/*
 * Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.oracle.truffle.erl.nodes.local;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.CompilerDirectives.CompilationFinal;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.FrameSlotKind;
import com.oracle.truffle.api.frame.FrameSlotTypeException;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.source.SourceSection;
import com.oracle.truffle.erl.nodes.ErlExpressionNode;

/**
 * Node to read a local variable from a function's {@link VirtualFrame frame}. The Truffle frame API
 * allows to store primitive values of all Java primitive types, and Object values. This means that
 * all SL types that are objects are handled by the {@link #readObject} method. When a local
 * variable changes its type, the frame access method throws an {@link FrameSlotTypeException},
 * which causes not rewriting. The rewriting code is generated by the Truffle DSL.
 */
@NodeField(name = "slot", type = FrameSlot.class)
public abstract class ErlLocalVariableNode extends ErlExpressionNode {

    @CompilationFinal private boolean isBound = false;

    public ErlLocalVariableNode(SourceSection src) {
        super(src);
    }

    /**
     * Returns the descriptor of the accessed local variable. The implementation of this method is
     * created by the Truffle DSL based on the {@link NodeField} annotation on the class.
     */
    protected abstract FrameSlot getSlot();

    public void setBound() {
        if (isBound) {
            return;
        }

        CompilerDirectives.transferToInterpreterAndInvalidate();
        isBound = true;
    }

    @Override
    public Object match(VirtualFrame frame, Object match) {

        assert null != match;

        if (!isBound) {
            if (getSlot().getKind() != FrameSlotKind.Object) {
                if (match instanceof Long) {
                    getSlot().setKind(FrameSlotKind.Long);
                    frame.setLong(getSlot(), (long) match);
                } else if (match instanceof Boolean) {
                    getSlot().setKind(FrameSlotKind.Boolean);
                    frame.setBoolean(getSlot(), (boolean) match);
                } else if (match instanceof Double) {
                    getSlot().setKind(FrameSlotKind.Double);
                    frame.setDouble(getSlot(), (double) match);
                } else {
                    getSlot().setKind(FrameSlotKind.Object);
                    frame.setObject(getSlot(), match);
                }
            } else {
                frame.setObject(getSlot(), match);
            }

            return match;
        }

        return super.match(frame, match);
    }

    @Specialization(rewriteOn = FrameSlotTypeException.class)
    protected long readLong(VirtualFrame frame) throws FrameSlotTypeException {
        return frame.getLong(getSlot());
    }

    @Specialization(rewriteOn = FrameSlotTypeException.class)
    protected boolean readBoolean(VirtualFrame frame) throws FrameSlotTypeException {
        return frame.getBoolean(getSlot());
    }

    @Specialization(rewriteOn = FrameSlotTypeException.class)
    protected Object readDouble(VirtualFrame frame) throws FrameSlotTypeException {
        return frame.getDouble(getSlot());
    }

    @Specialization(rewriteOn = FrameSlotTypeException.class)
    protected Object readObject(VirtualFrame frame) throws FrameSlotTypeException {
        return frame.getObject(getSlot());
    }

    /**
     * This is the generic case that always succeeds. Since we already have another specialization
     * with the same signature above, we need to order them explicitly with the order attribute.
     */
    @Specialization(contains = {"readLong", "readBoolean", "readDouble", "readObject"})
    protected Object read(VirtualFrame frame) {
        return frame.getValue(getSlot());
    }
}
