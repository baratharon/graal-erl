hipe_unified_loader
[]
[]
[{function,73,chunk_name,1,
  [{clause,73,
    [{var,73,'Architecture'}],
    [],
    [{'case',74,
      {var,74,'Architecture'},
      [{clause,75,[{atom,75,amd64}],[],[{string,64,"HA64"}]},
       {clause,76,[{atom,76,arm}],[],[{string,62,"HARM"}]},
       {clause,77,[{atom,77,powerpc}],[],[{string,60,"HPPC"}]},
       {clause,78,[{atom,78,ppc64}],[],[{string,61,"HP64"}]},
       {clause,79,[{atom,79,ultrasparc}],[],[{string,59,"HS8P"}]},
       {clause,80,[{atom,80,x86}],[],[{string,63,"HX86"}]}]}]}]},
 {function,85,word_size,1,
  [{clause,85,
    [{var,85,'Architecture'}],
    [],
    [{'case',86,
      {var,86,'Architecture'},
      [{clause,87,[{atom,87,amd64}],[],[{integer,87,8}]},
       {clause,88,[{atom,88,ppc64}],[],[{integer,88,8}]},
       {clause,89,[{var,89,'_'}],[],[{integer,89,4}]}]}]}]},
 {function,101,load_native_code,3,
  [{clause,101,
    [{var,101,'_Mod'},{var,101,'_Bin'},{atom,101,undefined}],
    [],
    [{atom,102,no_native}]},
   {clause,103,
    [{var,103,'Mod'},{var,103,'Bin'},{var,103,'Architecture'}],
    [[{call,103,{atom,103,is_atom},[{var,103,'Mod'}]},
      {call,103,{atom,103,is_binary},[{var,103,'Bin'}]}]],
    [{'case',105,
      {call,105,
       {remote,105,{atom,105,code},{atom,105,get_chunk}},
       [{var,105,'Bin'},
        {call,105,{atom,105,chunk_name},[{var,105,'Architecture'}]}]},
      [{clause,106,[{atom,106,undefined}],[],[{atom,106,no_native}]},
       {clause,107,
        [{var,107,'NativeCode'}],
        [[{call,107,{atom,107,is_binary},[{var,107,'NativeCode'}]}]],
        [{call,108,
          {remote,108,{atom,108,erlang},{atom,108,system_flag}},
          [{atom,108,multi_scheduling},{atom,108,block}]},
         {'try',109,
          [{match,110,
            {var,110,'OldReferencesToPatch'},
            {call,110,{atom,110,patch_to_emu_step1},[{var,110,'Mod'}]}},
           {'case',111,
            {call,111,
             {atom,111,load_module},
             [{var,111,'Mod'},
              {var,111,'NativeCode'},
              {var,111,'Bin'},
              {var,111,'OldReferencesToPatch'},
              {var,112,'Architecture'}]},
            [{clause,113,[{atom,113,bad_crc}],[],[{atom,113,no_native}]},
             {clause,114,[{var,114,'Result'}],[],[{var,114,'Result'}]}]}],
          [],[],
          [{call,117,
            {remote,117,{atom,117,erlang},{atom,117,system_flag}},
            [{atom,117,multi_scheduling},{atom,117,unblock}]}]}]}]}]}]},
 {function,126,post_beam_load,2,
  [{clause,126,[{var,126,'_Mod'},{atom,126,undefined}],[],[{atom,127,ok}]},
   {clause,128,
    [{var,128,'Mod'},{var,128,'_'}],
    [[{call,128,{atom,128,is_atom},[{var,128,'Mod'}]}]],
    [{call,129,
      {remote,129,{atom,129,erlang},{atom,129,system_flag}},
      [{atom,129,multi_scheduling},{atom,129,block}]},
     {'try',130,
      [{call,131,{atom,131,patch_to_emu},[{var,131,'Mod'}]}],
      [],[],
      [{call,133,
        {remote,133,{atom,133,erlang},{atom,133,system_flag}},
        [{atom,133,multi_scheduling},{atom,133,unblock}]}]},
     {atom,135,ok}]}]},
 {function,139,version_check,2,
  [{clause,139,
    [{var,139,'Version'},{var,139,'Mod'}],
    [[{call,139,{atom,139,is_atom},[{var,139,'Mod'}]}]],
    [{match,140,{var,140,'Ver'},{string,60,"3.13"}},
     {'case',141,
      {op,141,'<',{var,141,'Version'},{var,141,'Ver'}},
      [{clause,142,
        [{atom,142,true}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,143,
               "WARNING: Module ~w was compiled with HiPE version ~s\n"}}}},
           {cons,144,
            {var,144,'Mod'},
            {cons,144,{var,144,'Version'},{nil,144}}}]}]},
       {clause,145,[{var,145,'_'}],[],[{atom,145,ok}]}]}]}]},
 {function,153,load_module,4,
  [{clause,153,
    [{var,153,'Mod'},
     {var,153,'Bin'},
     {var,153,'Beam'},
     {var,153,'Architecture'}],
    [],
    [{call,154,
      {remote,154,{atom,154,erlang},{atom,154,system_flag}},
      [{atom,154,multi_scheduling},{atom,154,block}]},
     {'try',155,
      [{call,156,
        {atom,156,load_module_nosmp},
        [{var,156,'Mod'},
         {var,156,'Bin'},
         {var,156,'Beam'},
         {var,156,'Architecture'}]}],
      [],[],
      [{call,158,
        {remote,158,{atom,158,erlang},{atom,158,system_flag}},
        [{atom,158,multi_scheduling},{atom,158,unblock}]}]}]}]},
 {function,161,load_module_nosmp,4,
  [{clause,161,
    [{var,161,'Mod'},
     {var,161,'Bin'},
     {var,161,'Beam'},
     {var,161,'Architecture'}],
    [],
    [{call,162,
      {atom,162,load_module},
      [{var,162,'Mod'},
       {var,162,'Bin'},
       {var,162,'Beam'},
       {nil,162},
       {var,162,'Architecture'}]}]}]},
 {function,164,load_module,5,
  [{clause,164,
    [{var,164,'Mod'},
     {var,164,'Bin'},
     {var,164,'Beam'},
     {var,164,'OldReferencesToPatch'},
     {var,164,'Architecture'}],
    [],
    [{atom,101,no_debug},
     {call,167,
      {atom,167,put},
      [{atom,167,hipe_patch_closures},{atom,167,false}]},
     {call,168,
      {atom,168,load_common},
      [{var,168,'Mod'},
       {var,168,'Bin'},
       {var,168,'Beam'},
       {var,168,'OldReferencesToPatch'},
       {var,168,'Architecture'}]}]}]},
 {function,175,load,3,
  [{clause,175,
    [{var,175,'Mod'},{var,175,'Bin'},{var,175,'Architecture'}],
    [],
    [{call,176,
      {remote,176,{atom,176,erlang},{atom,176,system_flag}},
      [{atom,176,multi_scheduling},{atom,176,block}]},
     {'try',177,
      [{call,178,
        {atom,178,load_nosmp},
        [{var,178,'Mod'},{var,178,'Bin'},{var,178,'Architecture'}]}],
      [],[],
      [{call,180,
        {remote,180,{atom,180,erlang},{atom,180,system_flag}},
        [{atom,180,multi_scheduling},{atom,180,unblock}]}]}]}]},
 {function,183,load_nosmp,3,
  [{clause,183,
    [{var,183,'Mod'},{var,183,'Bin'},{var,183,'Architecture'}],
    [],
    [{atom,101,no_debug},
     {call,186,
      {atom,186,put},
      [{atom,186,hipe_patch_closures},{atom,186,true}]},
     {call,187,
      {atom,187,load_common},
      [{var,187,'Mod'},
       {var,187,'Bin'},
       {nil,187},
       {nil,187},
       {var,187,'Architecture'}]}]}]},
 {function,191,load_common,5,
  [{clause,191,
    [{var,191,'Mod'},
     {var,191,'Bin'},
     {var,191,'Beam'},
     {var,191,'OldReferencesToPatch'},
     {var,191,'Architecture'}],
    [],
    [{match,197,
      {cons,193,
       {tuple,193,[{var,193,'Version'},{var,193,'CheckSum'}]},
       {cons,194,
        {var,194,'ConstAlign'},
        {cons,194,
         {var,194,'ConstSize'},
         {cons,194,
          {var,194,'ConstMap'},
          {cons,194,
           {var,194,'LabelMap'},
           {cons,194,
            {var,194,'ExportMap'},
            {cons,195,
             {var,195,'CodeSize'},
             {cons,195,
              {var,195,'CodeBinary'},
              {cons,195,
               {var,195,'Refs'},
               {cons,196,
                {integer,196,0},
                {cons,196,{nil,196},{nil,197}}}}}}}}}}}},
      {call,197,{atom,197,binary_to_term},[{var,197,'Bin'}]}},
     {match,198,
      {var,198,'MD5'},
      {call,198,
       {remote,198,{atom,198,erlang},{atom,198,md5}},
       [{var,198,'Bin'}]}},
     {atom,101,no_debug},
     {call,207,{atom,207,version_check},[{var,207,'Version'},{var,207,'Mod'}]},
     {'case',208,
      {call,208,
       {remote,208,{atom,208,hipe_bifs},{atom,208,check_crc}},
       [{var,208,'CheckSum'}]},
      [{clause,209,
        [{atom,209,false}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,210,
               "Warning: not loading native code for module ~w: it was compiled for an incompatible runtime system; please regenerate native code for this runtime system\n"}}}},
           {cons,212,{var,212,'Mod'},{nil,212}}]},
         {atom,213,bad_crc}]},
       {clause,214,
        [{atom,214,true}],
        [],
        [{call,215,{atom,215,put},[{atom,215,closures_to_patch},{nil,215}]},
         {match,216,
          {var,216,'WordSize'},
          {call,216,{atom,216,word_size},[{var,216,'Architecture'}]}},
         {match,217,
          {var,217,'WriteWord'},
          {call,217,{atom,217,write_word_fun},[{var,217,'WordSize'}]}},
         {match,219,
          {tuple,219,[{var,219,'ConstAddr'},{var,219,'ConstMap2'}]},
          {call,220,
           {atom,220,create_data_segment},
           [{var,220,'ConstAlign'},
            {var,220,'ConstSize'},
            {var,220,'ConstMap'},
            {var,220,'WriteWord'}]}},
         {match,222,
          {var,222,'CalleeMFAs'},
          {call,222,
           {atom,222,find_callee_mfas},
           [{var,222,'Refs'},{var,222,'Architecture'}]}},
         {match,224,
          {tuple,224,[{var,224,'CodeAddress'},{var,224,'Trampolines'}]},
          {call,225,
           {atom,225,enter_code},
           [{var,225,'CodeSize'},
            {var,225,'CodeBinary'},
            {var,225,'CalleeMFAs'},
            {var,225,'Mod'},
            {var,225,'Beam'}]}},
         {match,227,
          {var,227,'TrampolineMap'},
          {call,227,
           {atom,227,mk_trampoline_map},
           [{var,227,'CalleeMFAs'},
            {var,227,'Trampolines'},
            {var,228,'Architecture'}]}},
         {match,230,
          {atom,230,ok},
          {call,230,
           {atom,230,patch_consts},
           [{var,230,'LabelMap'},
            {var,230,'ConstAddr'},
            {var,230,'CodeAddress'},
            {var,230,'WriteWord'}]}},
         {match,233,
          {tuple,233,[{var,233,'MFAs'},{var,233,'Addresses'}]},
          {call,233,
           {atom,233,exports},
           [{var,233,'ExportMap'},{var,233,'CodeAddress'}]}},
         {match,235,
          {var,235,'ReferencesToPatch'},
          {call,235,{atom,235,get_refs_from},[{var,235,'MFAs'},{nil,235}]}},
         {match,237,
          {atom,237,ok},
          {call,237,{atom,237,remove_refs_from},[{var,237,'MFAs'}]}},
         {match,240,
          {atom,240,ok},
          {call,240,
           {atom,240,patch},
           [{var,240,'Refs'},
            {var,240,'CodeAddress'},
            {var,240,'ConstMap2'},
            {var,240,'Addresses'},
            {var,240,'TrampolineMap'}]}},
         {'case',244,
          {var,244,'Beam'},
          [{clause,245,
            [{nil,245}],
            [],
            [{call,250,
              {remote,250,{atom,250,lists},{atom,250,foreach}},
              [{'fun',250,
                {clauses,
                 [{clause,250,
                   [{tuple,250,[{var,250,'FE'},{var,250,'DestAddress'}]}],
                   [],
                   [{call,251,
                     {remote,251,
                      {atom,251,hipe_bifs},
                      {atom,251,set_native_address_in_fe}},
                     [{var,251,'FE'},{var,251,'DestAddress'}]}]}]}},
               {call,252,{atom,252,erase},[{atom,252,closures_to_patch}]}]},
             {call,253,{atom,253,export_funs},[{var,253,'Addresses'}]},
             {atom,254,ok}]},
           {clause,255,
            [{var,255,'BeamBinary'}],
            [[{call,255,{atom,255,is_binary},[{var,255,'BeamBinary'}]}]],
            [{match,257,
              {nil,257},
              {call,257,{atom,257,erase},[{atom,257,closures_to_patch}]}},
             {match,258,
              {var,258,'ClosurePatches'},
              {call,258,{atom,258,find_closure_patches},[{var,258,'Refs'}]}},
             {match,259,
              {var,259,'AddressesOfClosuresToPatch'},
              {call,260,
               {atom,260,calculate_addresses},
               [{var,260,'ClosurePatches'},
                {var,260,'CodeAddress'},
                {var,260,'Addresses'}]}},
             {call,261,{atom,261,export_funs},[{var,261,'Addresses'}]},
             {call,262,
              {atom,262,export_funs},
              [{var,262,'Mod'},
               {var,262,'MD5'},
               {var,262,'BeamBinary'},
               {var,263,'Addresses'},
               {var,263,'AddressesOfClosuresToPatch'}]}]}]},
         {call,266,
          {atom,266,patch_to_emu_step2},
          [{var,266,'OldReferencesToPatch'}]},
         {call,270,{atom,270,redirect},[{var,270,'ReferencesToPatch'}]},
         {match,272,
          {var,272,'_'},
          {call,272,{atom,272,erase},[{atom,272,hipe_patch_closures}]}},
         {match,273,
          {var,273,'_'},
          {call,273,{atom,273,erase},[{atom,273,hipe_assert_code_area}]}},
         {atom,101,no_debug},
         {tuple,275,[{atom,275,module},{var,275,'Mod'}]}]}]}]}]},
 {function,282,find_callee_mfas,2,
  [{clause,282,
    [{var,282,'Patches'},{var,282,'Architecture'}],
    [[{call,282,{atom,282,is_list},[{var,282,'Patches'}]}]],
    [{'case',283,
      {call,283,{atom,283,needs_trampolines},[{var,283,'Architecture'}]},
      [{clause,284,
        [{atom,284,true}],
        [],
        [{call,284,
          {atom,284,find_callee_mfas},
          [{var,284,'Patches'},
           {call,284,{remote,284,{atom,284,gb_sets},{atom,284,empty}},[]},
           {call,285,
            {atom,285,no_erts_trampolines},
            [{var,285,'Architecture'}]}]}]},
       {clause,286,[{var,286,'_'}],[],[{nil,286}]}]}]}]},
 {function,289,needs_trampolines,1,
  [{clause,289,
    [{var,289,'Architecture'}],
    [],
    [{'case',290,
      {var,290,'Architecture'},
      [{clause,291,[{atom,291,arm}],[],[{atom,291,true}]},
       {clause,292,[{atom,292,powerpc}],[],[{atom,292,true}]},
       {clause,293,[{atom,293,ppc64}],[],[{atom,293,true}]},
       {clause,294,[{var,294,'_'}],[],[{atom,294,false}]}]}]}]},
 {function,297,no_erts_trampolines,1,
  [{clause,297,
    [{var,297,'Architecture'}],
    [],
    [{'case',298,
      {var,298,'Architecture'},
      [{clause,299,[{atom,299,powerpc}],[],[{atom,299,true}]},
       {clause,300,[{atom,300,ppc64}],[],[{atom,300,true}]},
       {clause,301,[{var,301,'_'}],[],[{atom,301,false}]}]}]}]},
 {function,304,find_callee_mfas,3,
  [{clause,304,
    [{cons,304,
      {tuple,304,[{var,304,'Type'},{var,304,'Data'}]},
      {var,304,'Patches'}},
     {var,304,'MFAs'},
     {var,304,'SkipErtsSyms'}],
    [],
    [{match,305,
      {var,305,'NewMFAs'},
      {'case',306,
       {'case',32,
        {var,306,'Type'},
        [{clause,6,[{integer,6,0}],[],[{atom,33,load_atom}]},
         {clause,7,[{integer,7,1}],[],[{atom,34,load_address}]},
         {clause,10,[{integer,10,4}],[],[{atom,35,sdesc}]},
         {clause,11,[{integer,11,5}],[],[{atom,36,x86_abs_pcrel}]},
         {clause,8,[{integer,8,2}],[],[{atom,37,call_remote}]},
         {clause,9,[{integer,9,3}],[],[{atom,38,call_local}]}]},
       [{clause,307,
         [{atom,307,call_local}],
         [],
         [{call,307,
           {atom,307,add_callee_mfas},
           [{var,307,'Data'},{var,307,'MFAs'},{var,307,'SkipErtsSyms'}]}]},
        {clause,308,
         [{atom,308,call_remote}],
         [],
         [{call,308,
           {atom,308,add_callee_mfas},
           [{var,308,'Data'},{var,308,'MFAs'},{var,308,'SkipErtsSyms'}]}]},
        {clause,310,[{var,310,'_'}],[],[{var,310,'MFAs'}]}]}},
     {call,312,
      {atom,312,find_callee_mfas},
      [{var,312,'Patches'},{var,312,'NewMFAs'},{var,312,'SkipErtsSyms'}]}]},
   {clause,313,
    [{nil,313},{var,313,'MFAs'},{var,313,'_SkipErtsSyms'}],
    [],
    [{call,314,
      {atom,314,list_to_tuple},
      [{call,314,
        {remote,314,{atom,314,gb_sets},{atom,314,to_list}},
        [{var,314,'MFAs'}]}]}]}]},
 {function,316,add_callee_mfas,3,
  [{clause,316,
    [{cons,316,
      {tuple,316,[{var,316,'DestMFA'},{var,316,'_Offsets'}]},
      {var,316,'Refs'}},
     {var,316,'MFAs'},
     {var,316,'SkipErtsSyms'}],
    [],
    [{match,317,
      {var,317,'NewMFAs'},
      {'case',318,
       {var,318,'SkipErtsSyms'},
       [{clause,319,
         [{atom,319,true}],
         [],
         [{'case',324,
           {call,324,{atom,324,bif_address},[{var,324,'DestMFA'}]},
           [{clause,325,
             [{atom,325,false}],
             [],
             [{call,325,
               {remote,325,{atom,325,gb_sets},{atom,325,add_element}},
               [{var,325,'DestMFA'},{var,325,'MFAs'}]}]},
            {clause,326,
             [{var,326,'BifAddress'}],
             [[{call,326,{atom,326,is_integer},[{var,326,'BifAddress'}]}]],
             [{var,326,'MFAs'}]}]}]},
        {clause,328,
         [{atom,328,false}],
         [],
         [{call,330,
           {remote,330,{atom,330,gb_sets},{atom,330,add_element}},
           [{var,330,'DestMFA'},{var,330,'MFAs'}]}]}]}},
     {call,332,
      {atom,332,add_callee_mfas},
      [{var,332,'Refs'},{var,332,'NewMFAs'},{var,332,'SkipErtsSyms'}]}]},
   {clause,333,
    [{nil,333},{var,333,'MFAs'},{var,333,'_SkipErtsSyms'}],
    [],
    [{var,333,'MFAs'}]}]},
 {function,337,mk_trampoline_map,3,
  [{clause,337,[{nil,337},{nil,337},{var,337,'_'}],[],[{nil,337}]},
   {clause,338,
    [{var,338,'CalleeMFAs'},{var,338,'Trampolines'},{var,338,'Architecture'}],
    [],
    [{match,339,
      {var,339,'SizeofLong'},
      {call,339,{atom,339,word_size},[{var,339,'Architecture'}]}},
     {call,340,
      {atom,340,mk_trampoline_map},
      [{call,340,{atom,340,tuple_size},[{var,340,'CalleeMFAs'}]},
       {var,340,'CalleeMFAs'},
       {var,341,'Trampolines'},
       {var,341,'SizeofLong'},
       {call,341,{remote,341,{atom,341,gb_trees},{atom,341,empty}},[]}]}]}]},
 {function,343,mk_trampoline_map,5,
  [{clause,343,
    [{var,343,'I'},
     {var,343,'CalleeMFAs'},
     {var,343,'Trampolines'},
     {var,343,'SizeofLong'},
     {var,343,'Map'}],
    [[{op,343,'>=',{var,343,'I'},{integer,343,1}}]],
    [{match,344,
      {var,344,'MFA'},
      {call,344,{atom,344,element},[{var,344,'I'},{var,344,'CalleeMFAs'}]}},
     {match,346,
      {var,346,'Skip'},
      {op,346,'*',
       {op,346,'-',{var,346,'I'},{integer,346,1}},
       {var,346,'SizeofLong'}}},
     {match,349,
      {bin,347,
       [{bin_element,347,{var,347,'_'},{var,347,'Skip'},[binary,{unit,8}]},
        {bin_element,348,
         {var,348,'Trampoline'},
         {var,348,'SizeofLong'},
         [integer,unsigned,native,{unit,8}]},
        {bin_element,349,{var,349,'_'},default,[binary]}]},
      {var,349,'Trampolines'}},
     {match,350,
      {var,350,'NewMap'},
      {call,350,
       {remote,350,{atom,350,gb_trees},{atom,350,insert}},
       [{var,350,'MFA'},{var,350,'Trampoline'},{var,350,'Map'}]}},
     {call,351,
      {atom,351,mk_trampoline_map},
      [{op,351,'-',{var,351,'I'},{integer,351,1}},
       {var,351,'CalleeMFAs'},
       {var,351,'Trampolines'},
       {var,351,'SizeofLong'},
       {var,351,'NewMap'}]}]},
   {clause,352,
    [{integer,352,0},
     {var,352,'_'},
     {var,352,'_'},
     {var,352,'_'},
     {var,352,'Map'}],
    [],
    [{var,352,'Map'}]}]},
 {function,356,trampoline_map_get,2,
  [{clause,356,[{var,356,'_'},{nil,356}],[],[{nil,356}]},
   {clause,357,
    [{var,357,'MFA'},{var,357,'Map'}],
    [],
    [{call,357,
      {remote,357,{atom,357,gb_trees},{atom,357,get}},
      [{var,357,'MFA'},{var,357,'Map'}]}]}]},
 {function,359,trampoline_map_lookup,2,
  [{clause,359,[{var,359,'_'},{nil,359}],[],[{nil,359}]},
   {clause,360,
    [{var,360,'Primop'},{var,360,'Map'}],
    [],
    [{'case',361,
      {call,361,
       {remote,361,{atom,361,gb_trees},{atom,361,lookup}},
       [{var,361,'Primop'},{var,361,'Map'}]},
      [{clause,362,
        [{tuple,362,[{atom,362,value},{var,362,'X'}]}],
        [],
        [{var,362,'X'}]},
       {clause,363,[{var,363,'_'}],[],[{nil,363}]}]}]}]},
 {function,373,exports,2,
  [{clause,373,
    [{var,373,'ExportMap'},{var,373,'BaseAddress'}],
    [],
    [{call,374,
      {atom,374,exports},
      [{var,374,'ExportMap'},{var,374,'BaseAddress'},{nil,374},{nil,374}]}]}]},
 {function,376,exports,4,
  [{clause,376,
    [{cons,376,
      {var,376,'Offset'},
      {cons,376,
       {var,376,'M'},
       {cons,376,
        {var,376,'F'},
        {cons,376,
         {var,376,'A'},
         {cons,376,
          {var,376,'IsClosure'},
          {cons,376,{var,376,'IsExported'},{var,376,'Rest'}}}}}}},
     {var,376,'BaseAddress'},
     {var,376,'MFAs'},
     {var,376,'Addresses'}],
    [],
    [{'case',377,
      {op,377,'andalso',
       {var,377,'IsExported'},
       {call,377,
        {remote,377,{atom,377,erlang},{atom,377,is_builtin}},
        [{var,377,'M'},{var,377,'F'},{var,377,'A'}]}},
      [{clause,378,
        [{atom,378,true}],
        [],
        [{call,379,
          {atom,379,exports},
          [{var,379,'Rest'},
           {var,379,'BaseAddress'},
           {var,379,'MFAs'},
           {var,379,'Addresses'}]}]},
       {clause,380,
        [{var,380,'_false'}],
        [],
        [{match,381,
          {var,381,'MFA'},
          {tuple,381,[{var,381,'M'},{var,381,'F'},{var,381,'A'}]}},
         {match,382,
          {var,382,'Address'},
          {op,382,'+',{var,382,'BaseAddress'},{var,382,'Offset'}}},
         {match,383,
          {var,383,'FunDef'},
          {tuple,383,
           [{atom,383,fundef},
            {var,383,'Address'},
            {var,383,'MFA'},
            {var,383,'IsClosure'},
            {var,384,'IsExported'}]}},
         {call,385,
          {atom,385,exports},
          [{var,385,'Rest'},
           {var,385,'BaseAddress'},
           {cons,385,{var,385,'MFA'},{var,385,'MFAs'}},
           {cons,385,{var,385,'FunDef'},{var,385,'Addresses'}}]}]}]}]},
   {clause,387,
    [{nil,387},{var,387,'_'},{var,387,'MFAs'},{var,387,'Addresses'}],
    [],
    [{tuple,388,[{var,388,'MFAs'},{var,388,'Addresses'}]}]}]},
 {function,390,mod,1,
  [{clause,390,
    [{tuple,390,[{var,390,'M'},{var,390,'_F'},{var,390,'_A'}]}],
    [],
    [{var,390,'M'}]}]},
 {function,394,calculate_addresses,3,
  [{clause,394,
    [{var,394,'PatchOffsets'},{var,394,'Base'},{var,394,'Addresses'}],
    [],
    [{match,395,{var,395,'RemoteOrLocal'},{atom,395,local}},
     {lc,396,
      {tuple,396,
       [{var,396,'Data'},
        {call,397,
         {atom,397,offsets_to_addresses},
         [{var,397,'Offsets'},{var,397,'Base'}]},
        {call,398,
         {atom,398,get_native_address},
         [{var,398,'DestMFA'},
          {var,398,'Addresses'},
          {var,398,'RemoteOrLocal'}]}]},
      [{generate,399,
        {tuple,399,
         [{match,399,
           {tuple,399,[{var,399,'DestMFA'},{var,399,'_'},{var,399,'_'}]},
           {var,399,'Data'}},
          {var,399,'Offsets'}]},
        {var,399,'PatchOffsets'}}]}]}]},
 {function,401,offsets_to_addresses,2,
  [{clause,401,
    [{var,401,'Os'},{var,401,'Base'}],
    [],
    [{lc,402,
      {tuple,402,
       [{op,402,'+',{var,402,'O'},{var,402,'Base'}},{atom,402,load_fe}]},
      [{generate,402,{var,402,'O'},{var,402,'Os'}}]}]}]},
 {function,406,find_closure_patches,1,
  [{clause,406,
    [{cons,406,
      {tuple,406,[{var,406,'Type'},{var,406,'Refs'}]},
      {var,406,'Rest'}}],
    [],
    [{'case',407,
      {'case',32,
       {var,407,'Type'},
       [{clause,6,[{integer,6,0}],[],[{atom,33,load_atom}]},
        {clause,7,[{integer,7,1}],[],[{atom,34,load_address}]},
        {clause,10,[{integer,10,4}],[],[{atom,35,sdesc}]},
        {clause,11,[{integer,11,5}],[],[{atom,36,x86_abs_pcrel}]},
        {clause,8,[{integer,8,2}],[],[{atom,37,call_remote}]},
        {clause,9,[{integer,9,3}],[],[{atom,38,call_local}]}]},
      [{clause,408,
        [{atom,408,load_address}],
        [],
        [{call,409,
          {atom,409,find_closure_refs},
          [{var,409,'Refs'},{var,409,'Rest'}]}]},
       {clause,410,
        [{var,410,'_'}],
        [],
        [{call,411,{atom,411,find_closure_patches},[{var,411,'Rest'}]}]}]}]},
   {clause,413,[{nil,413}],[],[{nil,413}]}]},
 {function,415,find_closure_refs,2,
  [{clause,415,
    [{cons,415,
      {tuple,415,[{var,415,'Dest'},{var,415,'Offsets'}]},
      {var,415,'Rest'}},
     {var,415,'Refs'}],
    [],
    [{'case',416,
      {var,416,'Dest'},
      [{clause,417,
        [{tuple,417,[{atom,417,closure},{var,417,'Data'}]}],
        [],
        [{cons,418,
          {tuple,418,[{var,418,'Data'},{var,418,'Offsets'}]},
          {call,418,
           {atom,418,find_closure_refs},
           [{var,418,'Rest'},{var,418,'Refs'}]}}]},
       {clause,419,
        [{var,419,'_'}],
        [],
        [{call,420,
          {atom,420,find_closure_refs},
          [{var,420,'Rest'},{var,420,'Refs'}]}]}]}]},
   {clause,422,
    [{nil,422},{var,422,'Refs'}],
    [],
    [{call,423,{atom,423,find_closure_patches},[{var,423,'Refs'}]}]}]},
 {function,427,export_funs,1,
  [{clause,427,
    [{cons,427,{var,427,'FunDef'},{var,427,'Addresses'}}],
    [],
    [{match,429,
      {tuple,428,
       [{atom,428,fundef},
        {var,428,'Address'},
        {var,428,'MFA'},
        {var,428,'IsClosure'},
        {var,429,'IsExported'}]},
      {var,429,'FunDef'}},
     {atom,430,no_debug},
     {atom,439,no_debug},
     {call,440,
      {remote,440,{atom,440,hipe_bifs},{atom,440,set_funinfo_native_address}},
      [{var,440,'MFA'},{var,440,'Address'},{var,440,'IsExported'}]},
     {call,441,
      {remote,441,{atom,441,hipe_bifs},{atom,441,set_native_address}},
      [{var,441,'MFA'},{var,441,'Address'},{var,441,'IsClosure'}]},
     {call,442,{atom,442,export_funs},[{var,442,'Addresses'}]}]},
   {clause,443,[{nil,443}],[],[{atom,444,ok}]}]},
 {function,446,export_funs,5,
  [{clause,446,
    [{var,446,'Mod'},
     {var,446,'MD5'},
     {var,446,'Beam'},
     {var,446,'Addresses'},
     {var,446,'ClosuresToPatch'}],
    [],
    [{match,447,
      {var,447,'Fs'},
      {lc,447,
       {tuple,447,[{var,447,'F'},{var,447,'A'},{var,447,'Address'}]},
       [{generate,447,
         {tuple,447,
          [{atom,447,fundef},
           {var,447,'Address'},
           {tuple,447,[{var,447,'_M'},{var,447,'F'},{var,447,'A'}]},
           {atom,447,undefined},
           {atom,447,undefined}]},
         {var,447,'Addresses'}}]}},
     {match,448,
      {var,448,'Mod'},
      {call,448,
       {remote,448,{atom,448,code},{atom,448,make_stub_module}},
       [{var,448,'Mod'},
        {var,448,'Beam'},
        {tuple,448,
         [{var,448,'Fs'},{var,448,'ClosuresToPatch'},{var,448,'MD5'}]}]}},
     {atom,449,ok}]}]},
 {function,466,patch,5,
  [{clause,466,
    [{cons,466,
      {tuple,466,[{var,466,'Type'},{var,466,'SortedRefs'}]},
      {var,466,'Rest'}},
     {var,466,'CodeAddress'},
     {var,466,'ConstMap2'},
     {var,466,'Addresses'},
     {var,466,'TrampolineMap'}],
    [],
    [{atom,101,no_debug},
     {'case',469,
      {'case',32,
       {var,469,'Type'},
       [{clause,6,[{integer,6,0}],[],[{atom,33,load_atom}]},
        {clause,7,[{integer,7,1}],[],[{atom,34,load_address}]},
        {clause,10,[{integer,10,4}],[],[{atom,35,sdesc}]},
        {clause,11,[{integer,11,5}],[],[{atom,36,x86_abs_pcrel}]},
        {clause,8,[{integer,8,2}],[],[{atom,37,call_remote}]},
        {clause,9,[{integer,9,3}],[],[{atom,38,call_local}]}]},
      [{clause,470,
        [{atom,470,call_local}],
        [],
        [{call,471,
          {atom,471,patch_call},
          [{var,471,'SortedRefs'},
           {var,471,'CodeAddress'},
           {var,471,'Addresses'},
           {atom,471,local},
           {var,471,'TrampolineMap'}]}]},
       {clause,472,
        [{atom,472,call_remote}],
        [],
        [{call,473,
          {atom,473,patch_call},
          [{var,473,'SortedRefs'},
           {var,473,'CodeAddress'},
           {var,473,'Addresses'},
           {atom,473,remote},
           {var,473,'TrampolineMap'}]}]},
       {clause,474,
        [{var,474,'Other'}],
        [],
        [{call,475,
          {atom,475,patch_all},
          [{var,475,'Other'},
           {var,475,'SortedRefs'},
           {var,475,'CodeAddress'},
           {tuple,475,[{var,475,'ConstMap2'},{var,475,'CodeAddress'}]},
           {var,475,'Addresses'}]}]}]},
     {call,477,
      {atom,477,patch},
      [{var,477,'Rest'},
       {var,477,'CodeAddress'},
       {var,477,'ConstMap2'},
       {var,477,'Addresses'},
       {var,477,'TrampolineMap'}]}]},
   {clause,478,
    [{nil,478},{var,478,'_'},{var,478,'_'},{var,478,'_'},{var,478,'_'}],
    [],
    [{atom,478,ok}]}]},
 {function,483,patch_call,5,
  [{clause,483,
    [{cons,483,
      {tuple,483,[{var,483,'DestMFA'},{var,483,'Offsets'}]},
      {var,483,'SortedRefs'}},
     {var,483,'BaseAddress'},
     {var,483,'Addresses'},
     {var,483,'RemoteOrLocal'},
     {var,483,'TrampolineMap'}],
    [],
    [{'case',484,
      {call,484,{atom,484,bif_address},[{var,484,'DestMFA'}]},
      [{clause,485,
        [{atom,485,false}],
        [],
        [{match,491,
          {var,491,'DestAddress'},
          {call,491,
           {atom,491,get_native_address},
           [{var,491,'DestMFA'},
            {var,491,'Addresses'},
            {var,491,'RemoteOrLocal'}]}},
         {match,492,
          {var,492,'Trampoline'},
          {call,492,
           {atom,492,trampoline_map_get},
           [{var,492,'DestMFA'},{var,492,'TrampolineMap'}]}},
         {call,493,
          {atom,493,patch_mfa_call_list},
          [{var,493,'Offsets'},
           {var,493,'BaseAddress'},
           {var,493,'DestMFA'},
           {var,493,'DestAddress'},
           {var,493,'Addresses'},
           {var,493,'RemoteOrLocal'},
           {var,493,'Trampoline'}]}]},
       {clause,494,
        [{var,494,'BifAddress'}],
        [[{call,494,{atom,494,is_integer},[{var,494,'BifAddress'}]}]],
        [{match,495,
          {var,495,'Trampoline'},
          {call,495,
           {atom,495,trampoline_map_lookup},
           [{var,495,'DestMFA'},{var,495,'TrampolineMap'}]}},
         {call,496,
          {atom,496,patch_bif_call_list},
          [{var,496,'Offsets'},
           {var,496,'BaseAddress'},
           {var,496,'BifAddress'},
           {var,496,'Trampoline'}]}]}]},
     {call,498,
      {atom,498,patch_call},
      [{var,498,'SortedRefs'},
       {var,498,'BaseAddress'},
       {var,498,'Addresses'},
       {var,498,'RemoteOrLocal'},
       {var,498,'TrampolineMap'}]}]},
   {clause,499,
    [{nil,499},{var,499,'_'},{var,499,'_'},{var,499,'_'},{var,499,'_'}],
    [],
    [{atom,500,ok}]}]},
 {function,502,patch_bif_call_list,4,
  [{clause,502,
    [{cons,502,{var,502,'Offset'},{var,502,'Offsets'}},
     {var,502,'BaseAddress'},
     {var,502,'BifAddress'},
     {var,502,'Trampoline'}],
    [],
    [{match,503,
      {var,503,'CallAddress'},
      {op,503,'+',{var,503,'BaseAddress'},{var,503,'Offset'}}},
     {'case',129,
      {call,504,{atom,504,assert_local_patch},[{var,504,'CallAddress'}]},
      [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
       {clause,131,
        [{var,131,'_'}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
           {cons,111,
            {atom,131,assertion_failed},
            {cons,-1,
             {atom,-1,hipe_unified_loader},
             {cons,111,{integer,111,111},{nil,111}}}}]},
         {call,112,
          {remote,112,{atom,112,erlang},{atom,112,error}},
          [{tuple,112,
            [{atom,-1,hipe_unified_loader},
             {integer,112,112},
             {atom,131,assertion_failed}]}]}]}]},
     {call,505,
      {atom,505,patch_call_insn},
      [{var,505,'CallAddress'},{var,505,'BifAddress'},{var,505,'Trampoline'}]},
     {call,506,
      {atom,506,patch_bif_call_list},
      [{var,506,'Offsets'},
       {var,506,'BaseAddress'},
       {var,506,'BifAddress'},
       {var,506,'Trampoline'}]}]},
   {clause,507,
    [{nil,507},{var,507,'_'},{var,507,'_'},{var,507,'_'}],
    [],
    [{atom,507,ok}]}]},
 {function,509,patch_mfa_call_list,7,
  [{clause,509,
    [{cons,509,{var,509,'Offset'},{var,509,'Offsets'}},
     {var,509,'BaseAddress'},
     {var,509,'DestMFA'},
     {var,509,'DestAddress'},
     {var,509,'Addresses'},
     {var,509,'RemoteOrLocal'},
     {var,509,'Trampoline'}],
    [],
    [{match,510,
      {var,510,'CallAddress'},
      {op,510,'+',{var,510,'BaseAddress'},{var,510,'Offset'}}},
     {call,511,
      {atom,511,add_ref},
      [{var,511,'DestMFA'},
       {var,511,'CallAddress'},
       {var,511,'Addresses'},
       {atom,511,call},
       {var,511,'Trampoline'},
       {var,511,'RemoteOrLocal'}]},
     {'case',129,
      {call,512,{atom,512,assert_local_patch},[{var,512,'CallAddress'}]},
      [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
       {clause,131,
        [{var,131,'_'}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
           {cons,111,
            {atom,131,assertion_failed},
            {cons,-1,
             {atom,-1,hipe_unified_loader},
             {cons,111,{integer,111,111},{nil,111}}}}]},
         {call,112,
          {remote,112,{atom,112,erlang},{atom,112,error}},
          [{tuple,112,
            [{atom,-1,hipe_unified_loader},
             {integer,112,112},
             {atom,131,assertion_failed}]}]}]}]},
     {call,513,
      {atom,513,patch_call_insn},
      [{var,513,'CallAddress'},
       {var,513,'DestAddress'},
       {var,513,'Trampoline'}]},
     {call,514,
      {atom,514,patch_mfa_call_list},
      [{var,514,'Offsets'},
       {var,514,'BaseAddress'},
       {var,514,'DestMFA'},
       {var,514,'DestAddress'},
       {var,514,'Addresses'},
       {var,514,'RemoteOrLocal'},
       {var,514,'Trampoline'}]}]},
   {clause,515,
    [{nil,515},
     {var,515,'_'},
     {var,515,'_'},
     {var,515,'_'},
     {var,515,'_'},
     {var,515,'_'},
     {var,515,'_'}],
    [],
    [{atom,515,ok}]}]},
 {function,517,patch_call_insn,3,
  [{clause,517,
    [{var,517,'CallAddress'},{var,517,'DestAddress'},{var,517,'Trampoline'}],
    [],
    [{call,520,
      {remote,520,{atom,520,hipe_bifs},{atom,520,patch_call}},
      [{var,520,'CallAddress'},
       {var,520,'DestAddress'},
       {var,520,'Trampoline'}]}]}]},
 {function,525,patch_all,5,
  [{clause,525,
    [{var,525,'Type'},
     {cons,525,
      {tuple,525,[{var,525,'Dest'},{var,525,'Offsets'}]},
      {var,525,'Rest'}},
     {var,525,'BaseAddress'},
     {var,525,'ConstAndZone'},
     {var,525,'Addresses'}],
    [],
    [{call,526,
      {atom,526,patch_all_offsets},
      [{var,526,'Type'},
       {var,526,'Dest'},
       {var,526,'Offsets'},
       {var,526,'BaseAddress'},
       {var,526,'ConstAndZone'},
       {var,526,'Addresses'}]},
     {call,527,
      {atom,527,patch_all},
      [{var,527,'Type'},
       {var,527,'Rest'},
       {var,527,'BaseAddress'},
       {var,527,'ConstAndZone'},
       {var,527,'Addresses'}]}]},
   {clause,528,
    [{var,528,'_'},{nil,528},{var,528,'_'},{var,528,'_'},{var,528,'_'}],
    [],
    [{atom,528,ok}]}]},
 {function,530,patch_all_offsets,6,
  [{clause,530,
    [{var,530,'Type'},
     {var,530,'Data'},
     {cons,530,{var,530,'Offset'},{var,530,'Offsets'}},
     {var,530,'BaseAddress'},
     {var,531,'ConstAndZone'},
     {var,531,'Addresses'}],
    [],
    [{atom,101,no_debug},
     {match,534,
      {var,534,'Address'},
      {op,534,'+',{var,534,'BaseAddress'},{var,534,'Offset'}}},
     {call,535,
      {atom,535,patch_offset},
      [{var,535,'Type'},
       {var,535,'Data'},
       {var,535,'Address'},
       {var,535,'ConstAndZone'},
       {var,535,'Addresses'}]},
     {atom,101,no_debug},
     {call,537,
      {atom,537,patch_all_offsets},
      [{var,537,'Type'},
       {var,537,'Data'},
       {var,537,'Offsets'},
       {var,537,'BaseAddress'},
       {var,537,'ConstAndZone'},
       {var,537,'Addresses'}]}]},
   {clause,538,
    [{var,538,'_'},
     {var,538,'_'},
     {nil,538},
     {var,538,'_'},
     {var,538,'_'},
     {var,538,'_'}],
    [],
    [{atom,538,ok}]}]},
 {function,543,patch_offset,5,
  [{clause,543,
    [{var,543,'Type'},
     {var,543,'Data'},
     {var,543,'Address'},
     {var,543,'ConstAndZone'},
     {var,543,'Addresses'}],
    [],
    [{'case',544,
      {var,544,'Type'},
      [{clause,545,
        [{atom,545,load_address}],
        [],
        [{call,546,
          {atom,546,patch_load_address},
          [{var,546,'Data'},
           {var,546,'Address'},
           {var,546,'ConstAndZone'},
           {var,546,'Addresses'}]}]},
       {clause,547,
        [{atom,547,load_atom}],
        [],
        [{match,548,{var,548,'Atom'},{var,548,'Data'}},
         {call,549,
          {atom,549,patch_atom},
          [{var,549,'Address'},{var,549,'Atom'}]}]},
       {clause,550,
        [{atom,550,sdesc}],
        [],
        [{call,551,
          {atom,551,patch_sdesc},
          [{var,551,'Data'},
           {var,551,'Address'},
           {var,551,'ConstAndZone'},
           {var,551,'Addresses'}]}]},
       {clause,552,
        [{atom,552,x86_abs_pcrel}],
        [],
        [{call,553,
          {atom,553,patch_instr},
          [{var,553,'Address'},
           {var,553,'Data'},
           {atom,553,x86_abs_pcrel}]}]}]}]}]},
 {function,559,patch_atom,2,
  [{clause,559,
    [{var,559,'Address'},{var,559,'Atom'}],
    [],
    [{'case',129,
      {call,560,{atom,560,assert_local_patch},[{var,560,'Address'}]},
      [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
       {clause,131,
        [{var,131,'_'}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
           {cons,111,
            {atom,131,assertion_failed},
            {cons,-1,
             {atom,-1,hipe_unified_loader},
             {cons,111,{integer,111,111},{nil,111}}}}]},
         {call,112,
          {remote,112,{atom,112,erlang},{atom,112,error}},
          [{tuple,112,
            [{atom,-1,hipe_unified_loader},
             {integer,112,112},
             {atom,131,assertion_failed}]}]}]}]},
     {call,561,
      {atom,561,patch_instr},
      [{var,561,'Address'},
       {call,561,
        {remote,561,{atom,561,hipe_bifs},{atom,561,atom_to_word}},
        [{var,561,'Atom'}]},
       {atom,561,atom}]}]}]},
 {function,563,patch_sdesc,4,
  [{clause,563,
    [{tuple,41,
      [{var,563,'SymExnRA'},
       {var,563,'FSize'},
       {var,563,'Arity'},
       {var,563,'Live'}]},
     {var,564,'Address'},
     {tuple,564,[{var,564,'_ConstMap2'},{var,564,'CodeAddress'}]},
     {var,564,'_Addresses'}],
    [],
    [{match,565,
      {var,565,'ExnRA'},
      {'case',566,
       {var,566,'SymExnRA'},
       [{clause,567,[{nil,567}],[],[{integer,567,0}]},
        {clause,568,
         [{var,568,'LabelOffset'}],
         [],
         [{op,568,'+',{var,568,'CodeAddress'},{var,568,'LabelOffset'}}]}]}},
     {'case',129,
      {call,570,{atom,570,assert_local_patch},[{var,570,'Address'}]},
      [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
       {clause,131,
        [{var,131,'_'}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
           {cons,111,
            {atom,131,assertion_failed},
            {cons,-1,
             {atom,-1,hipe_unified_loader},
             {cons,111,{integer,111,111},{nil,111}}}}]},
         {call,112,
          {remote,112,{atom,112,erlang},{atom,112,error}},
          [{tuple,112,
            [{atom,-1,hipe_unified_loader},
             {integer,112,112},
             {atom,131,assertion_failed}]}]}]}]},
     {match,571,
      {var,571,'DBG_MFA'},
      {tuple,571,[{atom,571,undefined},{atom,571,undefined},{integer,571,0}]}},
     {call,572,
      {remote,572,{atom,572,hipe_bifs},{atom,572,enter_sdesc}},
      [{tuple,572,
        [{var,572,'Address'},
         {var,572,'ExnRA'},
         {var,572,'FSize'},
         {var,572,'Arity'},
         {var,572,'Live'},
         {var,572,'DBG_MFA'}]}]}]}]},
 {function,578,patch_load_address,4,
  [{clause,578,
    [{var,578,'Data'},
     {var,578,'Address'},
     {var,578,'ConstAndZone'},
     {var,578,'Addresses'}],
    [],
    [{'case',579,
      {var,579,'Data'},
      [{clause,580,
        [{tuple,580,[{atom,580,local_function},{var,580,'DestMFA'}]}],
        [],
        [{call,581,
          {atom,581,patch_load_mfa},
          [{var,581,'Address'},
           {var,581,'DestMFA'},
           {var,581,'Addresses'},
           {atom,581,local}]}]},
       {clause,582,
        [{tuple,582,[{atom,582,remote_function},{var,582,'DestMFA'}]}],
        [],
        [{call,583,
          {atom,583,patch_load_mfa},
          [{var,583,'Address'},
           {var,583,'DestMFA'},
           {var,583,'Addresses'},
           {atom,583,remote}]}]},
       {clause,584,
        [{tuple,584,[{atom,584,constant},{var,584,'Name'}]}],
        [],
        [{match,585,
          {tuple,585,[{var,585,'ConstMap2'},{var,585,'_CodeAddress'}]},
          {var,585,'ConstAndZone'}},
         {match,586,
          {var,586,'ConstAddress'},
          {call,586,
           {atom,586,find_const},
           [{var,586,'Name'},{var,586,'ConstMap2'}]}},
         {call,587,
          {atom,587,patch_instr},
          [{var,587,'Address'},
           {var,587,'ConstAddress'},
           {atom,587,constant}]}]},
       {clause,588,
        [{tuple,588,
          [{atom,588,closure},
           {tuple,588,
            [{var,588,'DestMFA'},{var,588,'Uniq'},{var,588,'Index'}]}]}],
        [],
        [{call,589,
          {atom,589,patch_closure},
          [{var,589,'DestMFA'},
           {var,589,'Uniq'},
           {var,589,'Index'},
           {var,589,'Address'},
           {var,589,'Addresses'}]}]},
       {clause,590,
        [{tuple,590,[{atom,590,c_const},{var,590,'CConst'}]}],
        [],
        [{call,591,
          {atom,591,patch_instr},
          [{var,591,'Address'},
           {call,591,{atom,591,bif_address},[{var,591,'CConst'}]},
           {atom,591,c_const}]}]}]}]}]},
 {function,594,patch_closure,5,
  [{clause,594,
    [{var,594,'DestMFA'},
     {var,594,'Uniq'},
     {var,594,'Index'},
     {var,594,'Address'},
     {var,594,'Addresses'}],
    [],
    [{'case',595,
      {call,595,{atom,595,get},[{atom,595,hipe_patch_closures}]},
      [{clause,596,[{atom,596,false}],[],[{nil,597}]},
       {clause,598,
        [{atom,598,true}],
        [],
        [{match,604,{var,604,'RemoteOrLocal'},{atom,604,local}},
         {match,605,
          {var,605,'DestAddress'},
          {call,605,
           {atom,605,get_native_address},
           [{var,605,'DestMFA'},
            {var,605,'Addresses'},
            {var,605,'RemoteOrLocal'}]}},
         {match,606,
          {var,606,'BEAMAddress'},
          {call,606,
           {remote,606,{atom,606,hipe_bifs},{atom,606,fun_to_address}},
           [{var,606,'DestMFA'}]}},
         {match,607,
          {var,607,'FE'},
          {call,607,
           {remote,607,{atom,607,hipe_bifs},{atom,607,get_fe}},
           [{call,607,{atom,607,mod},[{var,607,'DestMFA'}]},
            {tuple,607,
             [{var,607,'Uniq'},{var,607,'Index'},{var,607,'BEAMAddress'}]}]}},
         {call,608,
          {atom,608,put},
          [{atom,608,closures_to_patch},
           {cons,608,
            {tuple,608,[{var,608,'FE'},{var,608,'DestAddress'}]},
            {call,608,{atom,608,get},[{atom,608,closures_to_patch}]}}]},
         {atom,101,no_debug},
         {'case',129,
          {call,611,{atom,611,assert_local_patch},[{var,611,'Address'}]},
          [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
           {clause,131,
            [{var,131,'_'}],
            [],
            [{call,70,
              {remote,70,{atom,70,code_server},{atom,70,info_msg}},
              [{op,61,'++',
                {string,61,"<HiPE (v "},
                {op,61,'++',
                 {string,60,"3.13"},
                 {op,70,'++',
                  {string,61,")> "},
                  {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
               {cons,111,
                {atom,131,assertion_failed},
                {cons,-1,
                 {atom,-1,hipe_unified_loader},
                 {cons,111,{integer,111,111},{nil,111}}}}]},
             {call,112,
              {remote,112,{atom,112,erlang},{atom,112,error}},
              [{tuple,112,
                [{atom,-1,hipe_unified_loader},
                 {integer,112,112},
                 {atom,131,assertion_failed}]}]}]}]},
         {call,612,
          {atom,612,patch_instr},
          [{var,612,'Address'},{var,612,'FE'},{atom,612,closure}]}]}]}]}]},
 {function,619,patch_load_mfa,4,
  [{clause,619,
    [{var,619,'CodeAddress'},
     {var,619,'DestMFA'},
     {var,619,'Addresses'},
     {var,619,'RemoteOrLocal'}],
    [],
    [{match,620,
      {var,620,'DestAddress'},
      {'case',621,
       {call,621,{atom,621,bif_address},[{var,621,'DestMFA'}]},
       [{clause,622,
         [{atom,622,false}],
         [],
         [{match,623,
           {var,623,'NativeAddress'},
           {call,623,
            {atom,623,get_native_address},
            [{var,623,'DestMFA'},
             {var,623,'Addresses'},
             {var,623,'RemoteOrLocal'}]}},
          {call,624,
           {atom,624,add_ref},
           [{var,624,'DestMFA'},
            {var,624,'CodeAddress'},
            {var,624,'Addresses'},
            {atom,624,load_mfa},
            {nil,624},
            {var,624,'RemoteOrLocal'}]},
          {var,625,'NativeAddress'}]},
        {clause,626,
         [{var,626,'BifAddress'}],
         [[{call,626,{atom,626,is_integer},[{var,626,'BifAddress'}]}]],
         [{var,627,'BifAddress'}]}]}},
     {'case',129,
      {call,629,{atom,629,assert_local_patch},[{var,629,'CodeAddress'}]},
      [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
       {clause,131,
        [{var,131,'_'}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
           {cons,111,
            {atom,131,assertion_failed},
            {cons,-1,
             {atom,-1,hipe_unified_loader},
             {cons,111,{integer,111,111},{nil,111}}}}]},
         {call,112,
          {remote,112,{atom,112,erlang},{atom,112,error}},
          [{tuple,112,
            [{atom,-1,hipe_unified_loader},
             {integer,112,112},
             {atom,131,assertion_failed}]}]}]}]},
     {call,630,
      {atom,630,patch_instr},
      [{var,630,'CodeAddress'},
       {var,630,'DestAddress'},
       {atom,630,load_mfa}]}]}]},
 {function,635,patch_consts,4,
  [{clause,635,
    [{var,635,'Labels'},
     {var,635,'DataAddress'},
     {var,635,'CodeAddress'},
     {var,635,'WriteWord'}],
    [],
    [{call,636,
      {remote,636,{atom,636,lists},{atom,636,foreach}},
      [{'fun',636,
        {clauses,
         [{clause,636,
           [{var,636,'L'}],
           [],
           [{call,637,
             {atom,637,patch_label_or_labels},
             [{var,637,'L'},
              {var,637,'DataAddress'},
              {var,637,'CodeAddress'},
              {var,638,'WriteWord'}]}]}]}},
       {var,639,'Labels'}]}]}]},
 {function,641,patch_label_or_labels,4,
  [{clause,641,
    [{tuple,641,[{var,641,'Pos'},{var,641,'Offset'}]},
     {var,641,'DataAddress'},
     {var,641,'CodeAddress'},
     {var,641,'WriteWord'}],
    [],
    [{'case',129,
      {call,642,
       {atom,642,assert_local_patch},
       [{op,642,'+',{var,642,'CodeAddress'},{var,642,'Offset'}}]},
      [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
       {clause,131,
        [{var,131,'_'}],
        [],
        [{call,70,
          {remote,70,{atom,70,code_server},{atom,70,info_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,70,'++',
              {string,61,")> "},
              {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
           {cons,111,
            {atom,131,assertion_failed},
            {cons,-1,
             {atom,-1,hipe_unified_loader},
             {cons,111,{integer,111,111},{nil,111}}}}]},
         {call,112,
          {remote,112,{atom,112,erlang},{atom,112,error}},
          [{tuple,112,
            [{atom,-1,hipe_unified_loader},
             {integer,112,112},
             {atom,131,assertion_failed}]}]}]}]},
     {call,643,
      {var,643,'WriteWord'},
      [{op,643,'+',{var,643,'DataAddress'},{var,643,'Pos'}},
       {op,643,'+',{var,643,'CodeAddress'},{var,643,'Offset'}}]}]},
   {clause,644,
    [{tuple,644,[{atom,644,sorted},{var,644,'Base'},{var,644,'UnOrderdList'}]},
     {var,644,'DataAddress'},
     {var,644,'CodeAddress'},
     {var,645,'WriteWord'}],
    [],
    [{call,646,
      {atom,646,sort_and_write},
      [{var,646,'UnOrderdList'},
       {var,646,'Base'},
       {var,646,'DataAddress'},
       {var,646,'CodeAddress'},
       {var,646,'WriteWord'}]}]}]},
 {function,648,sort_and_write,5,
  [{clause,648,
    [{var,648,'UnOrderdList'},
     {var,648,'Base'},
     {var,648,'DataAddress'},
     {var,648,'CodeAddress'},
     {var,648,'WriteWord'}],
    [],
    [{match,649,
      {var,649,'WriteAndInc'},
      {'fun',650,
       {clauses,
        [{clause,650,
          [{tuple,650,[{var,650,'_'},{var,650,'Offset'}]},{var,650,'DataPos'}],
          [],
          [{'case',129,
            {call,651,
             {atom,651,assert_local_patch},
             [{op,651,'+',{var,651,'CodeAddress'},{var,651,'Offset'}}]},
            [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
             {clause,131,
              [{var,131,'_'}],
              [],
              [{call,70,
                {remote,70,{atom,70,code_server},{atom,70,info_msg}},
                [{op,61,'++',
                  {string,61,"<HiPE (v "},
                  {op,61,'++',
                   {string,60,"3.13"},
                   {op,70,'++',
                    {string,61,")> "},
                    {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
                 {cons,111,
                  {atom,131,assertion_failed},
                  {cons,-1,
                   {atom,-1,hipe_unified_loader},
                   {cons,111,{integer,111,111},{nil,111}}}}]},
               {call,112,
                {remote,112,{atom,112,erlang},{atom,112,error}},
                [{tuple,112,
                  [{atom,-1,hipe_unified_loader},
                   {integer,112,112},
                   {atom,131,assertion_failed}]}]}]}]},
           {call,652,
            {var,652,'WriteWord'},
            [{var,652,'DataPos'},
             {op,652,'+',{var,652,'CodeAddress'},{var,652,'Offset'}}]}]}]}}},
     {call,654,
      {remote,654,{atom,654,lists},{atom,654,foldl}},
      [{var,654,'WriteAndInc'},
       {op,654,'+',{var,654,'DataAddress'},{var,654,'Base'}},
       {call,654,
        {atom,654,sort_on_representation},
        [{var,654,'UnOrderdList'}]}]}]}]},
 {function,656,sort_on_representation,1,
  [{clause,656,
    [{var,656,'List'}],
    [],
    [{call,657,
      {remote,657,{atom,657,lists},{atom,657,sort}},
      [{lc,657,
        {tuple,657,
         [{call,657,
           {remote,657,{atom,657,hipe_bifs},{atom,657,term_to_word}},
           [{var,657,'Term'}]},
          {var,657,'Offset'}]},
        [{generate,658,
          {tuple,658,[{var,658,'Term'},{var,658,'Offset'}]},
          {var,658,'List'}}]}]}]}]},
 {function,668,patch_instr,3,
  [{clause,668,
    [{var,668,'Address'},{var,668,'Value'},{var,668,'Type'}],
    [],
    [{call,669,
      {remote,669,{atom,669,hipe_bifs},{atom,669,patch_insn}},
      [{var,669,'Address'},{var,669,'Value'},{var,669,'Type'}]}]}]},
 {function,678,write_word_fun,1,
  [{clause,678,
    [{var,678,'WordSize'}],
    [],
    [{'case',679,
      {var,679,'WordSize'},
      [{clause,680,
        [{integer,680,8}],
        [],
        [{'fun',681,
          {clauses,
           [{clause,681,
             [{var,681,'DataAddress'},{var,681,'DataWord'}],
             [],
             [{call,682,
               {remote,682,{atom,682,hipe_bifs},{atom,682,write_u64}},
               [{var,682,'DataAddress'},{var,682,'DataWord'}]},
              {op,683,'+',{var,683,'DataAddress'},{integer,683,8}}]}]}}]},
       {clause,685,
        [{integer,685,4}],
        [],
        [{'fun',686,
          {clauses,
           [{clause,686,
             [{var,686,'DataAddress'},{var,686,'DataWord'}],
             [],
             [{call,687,
               {remote,687,{atom,687,hipe_bifs},{atom,687,write_u32}},
               [{var,687,'DataAddress'},{var,687,'DataWord'}]},
              {op,688,'+',
               {var,688,'DataAddress'},
               {integer,688,4}}]}]}}]}]}]}]},
 {function,694,bif_address,1,
  [{clause,694,
    [{tuple,694,[{var,694,'M'},{var,694,'F'},{var,694,'A'}]}],
    [],
    [{call,695,
      {remote,695,{atom,695,hipe_bifs},{atom,695,bif_address}},
      [{var,695,'M'},{var,695,'F'},{var,695,'A'}]}]},
   {clause,696,
    [{var,696,'Name'}],
    [[{call,696,{atom,696,is_atom},[{var,696,'Name'}]}]],
    [{call,697,
      {remote,697,{atom,697,hipe_bifs},{atom,697,primop_address}},
      [{var,697,'Name'}]}]}]},
 {function,705,create_data_segment,4,
  [{clause,705,
    [{var,705,'DataAlign'},
     {var,705,'DataSize'},
     {var,705,'DataList'},
     {var,705,'WriteWord'}],
    [],
    [{match,707,
      {var,707,'DataAddress'},
      {call,707,
       {remote,707,{atom,707,hipe_bifs},{atom,707,alloc_data}},
       [{var,707,'DataAlign'},{var,707,'DataSize'}]}},
     {call,708,
      {atom,708,enter_data},
      [{var,708,'DataList'},
       {nil,708},
       {var,708,'DataAddress'},
       {var,708,'DataSize'},
       {var,708,'WriteWord'}]}]}]},
 {function,710,enter_data,5,
  [{clause,710,
    [{var,710,'List'},
     {var,710,'ConstMap2'},
     {var,710,'DataAddress'},
     {var,710,'DataSize'},
     {var,710,'WriteWord'}],
    [],
    [{'case',711,
      {var,711,'List'},
      [{clause,712,
        [{cons,712,
          {var,712,'ConstNo'},
          {cons,712,
           {var,712,'Offset'},
           {cons,712,
            {var,712,'Type'},
            {cons,712,{var,712,'Data'},{var,712,'Rest'}}}}}],
        [[{call,712,{atom,712,is_integer},[{var,712,'Offset'}]}]],
        [{'case',129,
          {op,714,'and',
           {op,714,'>=',{var,714,'Offset'},{integer,714,0}},
           {op,714,'=<',{var,714,'Offset'},{var,714,'DataSize'}}},
          [{clause,130,[{atom,130,true}],[],[{atom,130,true}]},
           {clause,131,
            [{var,131,'_'}],
            [],
            [{call,70,
              {remote,70,{atom,70,code_server},{atom,70,info_msg}},
              [{op,61,'++',
                {string,61,"<HiPE (v "},
                {op,61,'++',
                 {string,60,"3.13"},
                 {op,70,'++',
                  {string,61,")> "},
                  {string,111,"EXITED with reason ~w @~w:~w\n"}}}},
               {cons,111,
                {atom,131,assertion_failed},
                {cons,-1,
                 {atom,-1,hipe_unified_loader},
                 {cons,111,{integer,111,111},{nil,111}}}}]},
             {call,112,
              {remote,112,{atom,112,erlang},{atom,112,error}},
              [{tuple,112,
                [{atom,-1,hipe_unified_loader},
                 {integer,112,112},
                 {atom,131,assertion_failed}]}]}]}]},
         {match,715,
          {var,715,'Res'},
          {call,715,
           {atom,715,enter_datum},
           [{var,715,'Type'},
            {var,715,'Data'},
            {op,715,'+',{var,715,'DataAddress'},{var,715,'Offset'}},
            {var,715,'WriteWord'}]}},
         {call,716,
          {atom,716,enter_data},
          [{var,716,'Rest'},
           {cons,716,
            {tuple,716,[{var,716,'ConstNo'},{var,716,'Res'}]},
            {var,716,'ConstMap2'}},
           {var,716,'DataAddress'},
           {var,716,'DataSize'},
           {var,717,'WriteWord'}]}]},
       {clause,718,
        [{nil,718}],
        [],
        [{tuple,719,[{var,719,'DataAddress'},{var,719,'ConstMap2'}]}]}]}]}]},
 {function,722,enter_datum,4,
  [{clause,722,
    [{var,722,'Type'},
     {var,722,'Data'},
     {var,722,'Address'},
     {var,722,'WriteWord'}],
    [],
    [{'case',723,
      {'case',25,
       {var,723,'Type'},
       [{clause,13,[{integer,13,0}],[],[{atom,26,term}]},
        {clause,15,[{integer,15,2}],[],[{atom,27,sorted_block}]},
        {clause,14,[{integer,14,1}],[],[{atom,28,block}]}]},
      [{clause,724,
        [{atom,724,term}],
        [],
        [{call,726,
          {remote,726,{atom,726,hipe_bifs},{atom,726,term_to_word}},
          [{call,726,
            {remote,726,{atom,726,hipe_bifs},{atom,726,merge_term}},
            [{var,726,'Data'}]}]}]},
       {clause,727,
        [{atom,727,sorted_block}],
        [],
        [{match,728,
          {var,728,'L'},
          {call,728,
           {remote,728,{atom,728,lists},{atom,728,sort}},
           [{lc,728,
             {call,728,
              {remote,728,{atom,728,hipe_bifs},{atom,728,term_to_word}},
              [{var,728,'Term'}]},
             [{generate,728,{var,728,'Term'},{var,728,'Data'}}]}]}},
         {call,729,
          {atom,729,write_words},
          [{var,729,'L'},{var,729,'Address'},{var,729,'WriteWord'}]},
         {var,730,'Address'}]},
       {clause,731,
        [{atom,731,block}],
        [],
        [{'case',732,
          {var,732,'Data'},
          [{clause,733,
            [{tuple,733,[{var,733,'Lbls'},{nil,733}]}],
            [],
            [{call,734,
              {atom,734,write_bytes},
              [{var,734,'Lbls'},{var,734,'Address'}]}]},
           {clause,735,
            [{tuple,735,[{var,735,'Lbls'},{var,735,'SortOrder'}]}],
            [],
            [{match,736,
              {var,736,'SortedLbls'},
              {lc,736,
               {var,736,'Lbl'},
               [{generate,736,
                 {tuple,736,[{var,736,'_'},{var,736,'Lbl'}]},
                 {call,736,
                  {remote,736,{atom,736,lists},{atom,736,sort}},
                  [{call,736,
                    {atom,736,group},
                    [{var,736,'Lbls'},{var,736,'SortOrder'}]}]}}]}},
             {call,737,
              {atom,737,write_words},
              [{var,737,'SortedLbls'},
               {var,737,'Address'},
               {var,737,'WriteWord'}]}]},
           {clause,738,
            [{var,738,'Lbls'}],
            [],
            [{call,739,
              {atom,739,write_bytes},
              [{var,739,'Lbls'},{var,739,'Address'}]}]}]},
         {var,741,'Address'}]}]}]}]},
 {function,744,group,2,
  [{clause,744,[{nil,744},{nil,744}],[],[{nil,745}]},
   {clause,746,
    [{cons,746,
      {var,746,'B1'},
      {cons,746,
       {var,746,'B2'},
       {cons,746,{var,746,'B3'},{cons,746,{var,746,'B4'},{var,746,'Ls'}}}}},
     {cons,746,{var,746,'O'},{var,746,'Os'}}],
    [],
    [{cons,747,
      {tuple,747,
       [{call,747,
         {remote,747,{atom,747,hipe_bifs},{atom,747,term_to_word}},
         [{var,747,'O'}]},
        {call,747,
         {atom,747,bytes_to_32},
         [{var,747,'B4'},{var,747,'B3'},{var,747,'B2'},{var,747,'B1'}]}]},
      {call,747,{atom,747,group},[{var,747,'Ls'},{var,747,'Os'}]}}]}]},
 {function,749,bytes_to_32,4,
  [{clause,749,
    [{var,749,'B4'},{var,749,'B3'},{var,749,'B2'},{var,749,'B1'}],
    [],
    [{op,750,'bor',
      {op,750,'bor',
       {op,750,'bor',
        {op,750,'bsl',{var,750,'B4'},{integer,750,24}},
        {op,750,'bsl',{var,750,'B3'},{integer,750,16}}},
       {op,750,'bsl',{var,750,'B2'},{integer,750,8}}},
      {var,750,'B1'}}]}]},
 {function,752,write_words,3,
  [{clause,752,
    [{cons,752,{var,752,'W'},{var,752,'Rest'}},
     {var,752,'Addr'},
     {var,752,'WriteWord'}],
    [],
    [{call,753,
      {atom,753,write_words},
      [{var,753,'Rest'},
       {call,753,{var,753,'WriteWord'},[{var,753,'Addr'},{var,753,'W'}]},
       {var,753,'WriteWord'}]}]},
   {clause,754,
    [{nil,754},{var,754,'Addr'},{var,754,'_'}],
    [[{call,754,{atom,754,is_integer},[{var,754,'Addr'}]}]],
    [{atom,754,true}]}]},
 {function,756,write_bytes,2,
  [{clause,756,
    [{cons,756,{var,756,'B'},{var,756,'Rest'}},{var,756,'Addr'}],
    [],
    [{call,757,
      {remote,757,{atom,757,hipe_bifs},{atom,757,write_u8}},
      [{var,757,'Addr'},{var,757,'B'}]},
     {call,758,
      {atom,758,write_bytes},
      [{var,758,'Rest'},{op,758,'+',{var,758,'Addr'},{integer,758,1}}]}]},
   {clause,759,
    [{nil,759},{var,759,'Addr'}],
    [[{call,759,{atom,759,is_integer},[{var,759,'Addr'}]}]],
    [{atom,759,true}]}]},
 {function,763,find_const,2,
  [{clause,763,
    [{var,763,'ConstNo'},
     {cons,763,
      {tuple,763,[{var,763,'ConstNo'},{var,763,'Addr'}]},
      {var,763,'_ConstMap2'}}],
    [],
    [{var,764,'Addr'}]},
   {clause,765,
    [{var,765,'ConstNo'},{cons,765,{var,765,'_'},{var,765,'ConstMap2'}}],
    [],
    [{call,766,
      {atom,766,find_const},
      [{var,766,'ConstNo'},{var,766,'ConstMap2'}]}]},
   {clause,767,
    [{var,767,'ConstNo'},{nil,767}],
    [],
    [{call,84,
      {remote,84,{atom,84,code_server},{atom,84,error_msg}},
      [{op,61,'++',
        {string,61,"<HiPE (v "},
        {op,61,'++',
         {string,60,"3.13"},
         {op,84,'++',
          {string,61,")> "},
          {op,85,'++',
           {string,85,"Error: [~s:~w]: "},
           {string,768,"Constant not found ~w\n"}}}}},
       {cons,86,
        {atom,-1,hipe_unified_loader},
        {cons,86,{integer,86,86},{cons,768,{var,768,'ConstNo'},{nil,768}}}}]},
     {call,769,
      {atom,769,exit},
      [{tuple,769,[{atom,769,constant_not_found},{var,769,'ConstNo'}]}]}]}]},
 {function,788,add_ref,6,
  [{clause,788,
    [{var,788,'CalleeMFA'},
     {var,788,'Address'},
     {var,788,'Addresses'},
     {var,788,'RefType'},
     {var,788,'Trampoline'},
     {var,788,'RemoteOrLocal'}],
    [],
    [{match,789,
      {var,789,'CallerMFA'},
      {call,789,
       {atom,789,address_to_mfa_lth},
       [{var,789,'Address'},{var,789,'Addresses'}]}},
     {match,791,
      {atom,791,true},
      {'case',791,
       {var,791,'RemoteOrLocal'},
       [{clause,792,
         [{atom,792,local}],
         [],
         [{match,793,
           {tuple,793,[{var,793,'M1'},{var,793,'_'},{var,793,'_'}]},
           {var,793,'CalleeMFA'}},
          {match,794,
           {tuple,794,[{var,794,'M2'},{var,794,'_'},{var,794,'_'}]},
           {var,794,'CallerMFA'}},
          {op,795,'=:=',{var,795,'M1'},{var,795,'M2'}}]},
        {clause,796,[{atom,796,remote}],[],[{atom,797,true}]}]}},
     {call,800,
      {remote,800,{atom,800,hipe_bifs},{atom,800,add_ref}},
      [{var,800,'CalleeMFA'},
       {tuple,800,
        [{var,800,'CallerMFA'},
         {var,800,'Address'},
         {var,800,'RefType'},
         {var,800,'Trampoline'},
         {var,800,'RemoteOrLocal'}]}]}]}]},
 {function,803,address_to_mfa_lth,2,
  [{clause,803,
    [{var,803,'Address'},{var,803,'FunDefs'}],
    [],
    [{'case',804,
      {call,804,
       {atom,804,address_to_mfa_lth},
       [{var,804,'Address'},{var,804,'FunDefs'},{atom,804,false}]},
      [{clause,805,
        [{atom,805,false}],
        [],
        [{call,84,
          {remote,84,{atom,84,code_server},{atom,84,error_msg}},
          [{op,61,'++',
            {string,61,"<HiPE (v "},
            {op,61,'++',
             {string,60,"3.13"},
             {op,84,'++',
              {string,61,")> "},
              {op,85,'++',
               {string,85,"Error: [~s:~w]: "},
               {string,806,"Local adddress not found ~w\n"}}}}},
           {cons,86,
            {atom,-1,hipe_unified_loader},
            {cons,86,
             {integer,86,86},
             {cons,806,{var,806,'Address'},{nil,806}}}}]},
         {call,807,
          {atom,807,exit},
          [{tuple,807,
            [{atom,-1,hipe_unified_loader},
             {atom,807,local_address_not_found}]}]}]},
       {clause,808,[{var,808,'MFA'}],[],[{var,809,'MFA'}]}]}]}]},
 {function,812,address_to_mfa_lth,3,
  [{clause,812,
    [{var,812,'Address'},
     {cons,812,
      {tuple,812,
       [{atom,812,fundef},
        {var,812,'Adr'},
        {var,812,'MFA'},
        {var,812,'_'},
        {var,812,'_'}]},
      {var,812,'Rest'}},
     {var,812,'Prev'}],
    [],
    [{'if',813,
      [{clause,813,[],
        [[{op,813,'<',{var,813,'Address'},{var,813,'Adr'}}]],
        [{var,814,'Prev'}]},
       {clause,815,[],
        [[{atom,815,true}]],
        [{call,816,
          {atom,816,address_to_mfa_lth},
          [{var,816,'Address'},{var,816,'Rest'},{var,816,'MFA'}]}]}]}]},
   {clause,818,
    [{var,818,'_Address'},{nil,818},{var,818,'Prev'}],
    [],
    [{var,819,'Prev'}]}]},
 {function,832,patch_to_emu,1,
  [{clause,832,
    [{var,832,'Mod'}],
    [],
    [{call,833,
      {atom,833,patch_to_emu_step2},
      [{call,833,{atom,833,patch_to_emu_step1},[{var,833,'Mod'}]}]}]}]},
 {function,837,patch_to_emu_step1,1,
  [{clause,837,
    [{var,837,'Mod'}],
    [],
    [{'case',838,
      {call,838,{atom,838,is_loaded},[{var,838,'Mod'}]},
      [{clause,839,
        [{atom,839,true}],
        [],
        [{match,841,
          {var,841,'MFAs'},
          {lc,841,
           {tuple,841,[{var,841,'Mod'},{var,841,'Fun'},{var,841,'Arity'}]},
           [{generate,841,
             {tuple,841,[{var,841,'Fun'},{var,841,'Arity'}]},
             {call,841,
              {remote,841,{var,841,'Mod'},{atom,841,module_info}},
              [{atom,841,exports}]}}]}},
         {call,847,
          {remote,847,
           {atom,847,hipe_bifs},
           {atom,847,invalidate_funinfo_native_addresses}},
          [{var,847,'MFAs'}]},
         {match,850,
          {var,850,'ReferencesToPatch'},
          {call,850,{atom,850,get_refs_from},[{var,850,'MFAs'},{nil,850}]}},
         {match,851,
          {atom,851,ok},
          {call,851,{atom,851,remove_refs_from},[{var,851,'MFAs'}]}},
         {var,852,'ReferencesToPatch'}]},
       {clause,853,[{atom,853,false}],[],[{nil,855}]}]}]}]},
 {function,859,patch_to_emu_step2,1,
  [{clause,859,
    [{var,859,'ReferencesToPatch'}],
    [],
    [{call,860,{atom,860,redirect},[{var,860,'ReferencesToPatch'}]}]}]},
 {function,864,is_loaded,1,
  [{clause,864,
    [{var,864,'M'}],
    [[{call,864,{atom,864,is_atom},[{var,864,'M'}]}]],
    [{'try',865,
      [{call,865,
        {remote,865,{atom,865,hipe_bifs},{atom,865,fun_to_address}},
        [{tuple,865,[{var,865,'M'},{atom,865,module_info},{integer,865,0}]}]}],
      [{clause,866,
        [{var,866,'I'}],
        [[{call,866,{atom,866,is_integer},[{var,866,'I'}]}]],
        [{atom,866,true}]}],
      [{clause,867,
        [{tuple,867,[{var,867,'_'},{var,867,'_'},{var,867,'_'}]}],
        [],
        [{atom,867,false}]}],
      []}]}]},
 {function,875,get_refs_from,2,
  [{clause,875,
    [{var,875,'MFAs'},{nil,875}],
    [],
    [{call,876,{atom,876,mark_referred_from},[{var,876,'MFAs'}]},
     {var,877,'MFAs'}]}]},
 {function,879,mark_referred_from,1,
  [{clause,879,
    [{var,879,'MFAs'}],
    [],
    [{call,880,
      {remote,880,{atom,880,lists},{atom,880,foreach}},
      [{'fun',880,
        {clauses,
         [{clause,880,
           [{var,880,'MFA'}],
           [],
           [{call,880,
             {remote,880,{atom,880,hipe_bifs},{atom,880,mark_referred_from}},
             [{var,880,'MFA'}]}]}]}},
       {var,880,'MFAs'}]}]}]},
 {function,888,redirect,1,
  [{clause,888,
    [{var,888,'MFAs'}],
    [],
    [{call,889,
      {remote,889,{atom,889,lists},{atom,889,foreach}},
      [{'fun',889,
        {clauses,
         [{clause,889,
           [{var,889,'MFA'}],
           [],
           [{call,889,
             {remote,889,
              {atom,889,hipe_bifs},
              {atom,889,redirect_referred_from}},
             [{var,889,'MFA'}]}]}]}},
       {var,889,'MFAs'}]}]}]},
 {function,901,remove_refs_from,1,
  [{clause,901,
    [{var,901,'MFAs'}],
    [],
    [{call,902,
      {remote,902,{atom,902,lists},{atom,902,foreach}},
      [{'fun',902,
        {clauses,
         [{clause,902,
           [{var,902,'MFA'}],
           [],
           [{call,902,
             {remote,902,{atom,902,hipe_bifs},{atom,902,remove_refs_from}},
             [{var,902,'MFA'}]}]}]}},
       {var,902,'MFAs'}]}]}]},
 {function,912,get_native_address,3,
  [{clause,912,
    [{var,912,'MFA'},{var,912,'Addresses'},{var,912,'RemoteOrLocal'}],
    [],
    [{'case',913,
      {call,913,
       {atom,913,mfa_to_address},
       [{var,913,'MFA'},{var,913,'Addresses'},{var,913,'RemoteOrLocal'}]},
      [{clause,914,
        [{var,914,'Adr'}],
        [[{call,914,{atom,914,is_integer},[{var,914,'Adr'}]}]],
        [{var,914,'Adr'}]},
       {clause,915,
        [{atom,915,false}],
        [],
        [{match,916,
          {var,916,'IsRemote'},
          {'case',917,
           {var,917,'RemoteOrLocal'},
           [{clause,918,[{atom,918,remote}],[],[{atom,918,true}]},
            {clause,919,[{atom,919,local}],[],[{atom,919,false}]}]}},
         {call,921,
          {remote,921,{atom,921,hipe_bifs},{atom,921,find_na_or_make_stub}},
          [{var,921,'MFA'},{var,921,'IsRemote'}]}]}]}]}]},
 {function,924,mfa_to_address,3,
  [{clause,924,
    [{var,924,'MFA'},
     {cons,924,
      {tuple,924,
       [{atom,924,fundef},
        {var,924,'Adr'},
        {var,924,'MFA'},
        {var,924,'_'},
        {var,925,'IsExported'}]},
      {var,925,'_Rest'}},
     {var,925,'RemoteOrLocal'}],
    [],
    [{'case',926,
      {var,926,'RemoteOrLocal'},
      [{clause,927,[{atom,927,local}],[],[{var,928,'Adr'}]},
       {clause,929,
        [{atom,929,remote}],
        [],
        [{'case',930,
          {var,930,'IsExported'},
          [{clause,931,[{atom,931,true}],[],[{var,932,'Adr'}]},
           {clause,933,[{atom,933,false}],[],[{atom,934,false}]}]}]}]}]},
   {clause,937,
    [{var,937,'MFA'},
     {cons,937,{var,937,'_'},{var,937,'Rest'}},
     {var,937,'RemoteOrLocal'}],
    [],
    [{call,938,
      {atom,938,mfa_to_address},
      [{var,938,'MFA'},{var,938,'Rest'},{var,938,'RemoteOrLocal'}]}]},
   {clause,939,
    [{var,939,'_'},{nil,939},{var,939,'_'}],
    [],
    [{atom,939,false}]}]},
 {function,948,assert_local_patch,1,
  [{clause,948,
    [{var,948,'Address'}],
    [[{call,948,{atom,948,is_integer},[{var,948,'Address'}]}]],
    [{match,949,
      {tuple,949,[{var,949,'First'},{var,949,'Last'}]},
      {call,949,{atom,949,get},[{atom,949,hipe_assert_code_area}]}},
     {op,950,'andalso',
      {op,950,'>=',{var,950,'Address'},{var,950,'First'}},
      {op,950,'<',{var,950,'Address'},{var,950,'Last'}}}]}]},
 {function,963,enter_code,5,
  [{clause,963,
    [{var,963,'CodeSize'},
     {var,963,'CodeBinary'},
     {var,963,'CalleeMFAs'},
     {var,963,'Mod'},
     {var,963,'Beam'}],
    [],
    [{match,964,
      {atom,964,true},
      {op,964,'=:=',
       {call,964,{atom,964,byte_size},[{var,964,'CodeBinary'}]},
       {var,964,'CodeSize'}}},
     {call,965,
      {remote,965,{atom,965,hipe_bifs},{atom,965,update_code_size}},
      [{var,965,'Mod'},{var,965,'Beam'},{var,965,'CodeSize'}]},
     {match,966,
      {tuple,966,[{var,966,'CodeAddress'},{var,966,'Trampolines'}]},
      {call,966,
       {remote,966,{atom,966,hipe_bifs},{atom,966,enter_code}},
       [{var,966,'CodeBinary'},{var,966,'CalleeMFAs'}]}},
     {call,946,
      {atom,946,put},
      [{atom,946,hipe_assert_code_area},
       {tuple,946,
        [{var,967,'CodeAddress'},
         {op,946,'+',
          {var,967,'CodeAddress'},
          {call,967,{atom,967,byte_size},[{var,967,'CodeBinary'}]}}]}]},
     {tuple,968,[{var,968,'CodeAddress'},{var,968,'Trampolines'}]}]}]}]
