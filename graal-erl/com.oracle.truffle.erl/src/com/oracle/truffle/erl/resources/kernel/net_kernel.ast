net_kernel
[{error_logger,error_msg,2}]
[]
[{function,152,dflag_unicode_io,1,
  [{clause,152,
    [{var,152,'_'}],
    [],
    [{call,153,
      {remote,153,{atom,153,erlang},{atom,153,nif_error}},
      [{atom,153,undef}]}]}]},
 {function,159,kernel_apply,3,
  [{clause,159,
    [{var,159,'M'},{var,159,'F'},{var,159,'A'}],
    [],
    [{call,159,
      {atom,159,request},
      [{tuple,159,
        [{atom,159,apply},{var,159,'M'},{var,159,'F'},{var,159,'A'}]}]}]}]},
 {function,163,allow,1,
  [{clause,163,
    [{var,163,'Nodes'}],
    [],
    [{call,163,
      {atom,163,request},
      [{tuple,163,[{atom,163,allow},{var,163,'Nodes'}]}]}]}]},
 {function,165,longnames,0,
  [{clause,165,[],[],[{call,165,{atom,165,request},[{atom,165,longnames}]}]}]},
 {function,169,stop,0,
  [{clause,169,[],[],
    [{call,169,
      {remote,169,{atom,169,erl_distribution},{atom,169,stop}},
      []}]}]},
 {function,171,node_info,1,
  [{clause,171,
    [{var,171,'Node'}],
    [],
    [{call,171,{atom,171,get_node_info},[{var,171,'Node'}]}]}]},
 {function,172,node_info,2,
  [{clause,172,
    [{var,172,'Node'},{var,172,'Key'}],
    [],
    [{call,172,
      {atom,172,get_node_info},
      [{var,172,'Node'},{var,172,'Key'}]}]}]},
 {function,173,nodes_info,0,
  [{clause,173,[],[],[{call,173,{atom,173,get_nodes_info},[]}]}]},
 {function,174,i,0,[{clause,174,[],[],[{call,174,{atom,174,print_info},[]}]}]},
 {function,175,i,1,
  [{clause,175,
    [{var,175,'Node'}],
    [],
    [{call,175,{atom,175,print_info},[{var,175,'Node'}]}]}]},
 {function,177,verbose,1,
  [{clause,177,
    [{var,177,'Level'}],
    [[{call,177,{atom,177,is_integer},[{var,177,'Level'}]}]],
    [{call,178,
      {atom,178,request},
      [{tuple,178,[{atom,178,verbose},{var,178,'Level'}]}]}]}]},
 {function,187,set_net_ticktime,2,
  [{clause,187,
    [{var,187,'T'},{var,187,'TP'}],
    [[{call,187,{atom,187,is_integer},[{var,187,'T'}]},
      {op,187,'>',{var,187,'T'},{integer,187,0}},
      {call,187,{atom,187,is_integer},[{var,187,'TP'}]},
      {op,187,'>=',{var,187,'TP'},{integer,187,0}}]],
    [{call,188,
      {atom,188,ticktime_res},
      [{call,188,
        {atom,188,request},
        [{tuple,188,
          [{atom,188,new_ticktime},
           {op,188,'*',{var,188,'T'},{integer,188,250}},
           {op,188,'*',{var,188,'TP'},{integer,188,1000}}]}]}]}]}]},
 {function,196,set_net_ticktime,1,
  [{clause,196,
    [{var,196,'T'}],
    [[{call,196,{atom,196,is_integer},[{var,196,'T'}]}]],
    [{call,197,
      {atom,197,set_net_ticktime},
      [{var,197,'T'},{integer,46,60}]}]}]},
 {function,202,get_net_ticktime,0,
  [{clause,202,[],[],
    [{call,203,
      {atom,203,ticktime_res},
      [{call,203,{atom,203,request},[{atom,203,ticktime}]}]}]}]},
 {function,214,monitor_nodes,1,
  [{clause,214,
    [{var,214,'Flag'}],
    [],
    [{'case',215,
      {'catch',215,
       {call,215,
        {atom,215,process_flag},
        [{atom,215,monitor_nodes},{var,215,'Flag'}]}},
      [{clause,216,[{atom,216,true}],[],[{atom,216,ok}]},
       {clause,217,[{atom,217,false}],[],[{atom,217,ok}]},
       {clause,218,
        [{var,218,'_'}],
        [],
        [{call,218,
          {atom,218,mk_monitor_nodes_error},
          [{var,218,'Flag'},{nil,218}]}]}]}]}]},
 {function,228,monitor_nodes,2,
  [{clause,228,
    [{var,228,'Flag'},{var,228,'Opts'}],
    [],
    [{'case',229,
      {'catch',229,
       {call,229,
        {atom,229,process_flag},
        [{tuple,229,[{atom,229,monitor_nodes},{var,229,'Opts'}]},
         {var,229,'Flag'}]}},
      [{clause,230,[{atom,230,true}],[],[{atom,230,ok}]},
       {clause,231,[{atom,231,false}],[],[{atom,231,ok}]},
       {clause,232,
        [{var,232,'_'}],
        [],
        [{call,232,
          {atom,232,mk_monitor_nodes_error},
          [{var,232,'Flag'},{var,232,'Opts'}]}]}]}]}]},
 {function,236,ticktime_res,1,
  [{clause,236,
    [{tuple,236,[{var,236,'A'},{var,236,'I'}]}],
    [[{call,236,{atom,236,is_atom},[{var,236,'A'}]},
      {call,236,{atom,236,is_integer},[{var,236,'I'}]}]],
    [{tuple,236,
      [{var,236,'A'},{op,236,'div',{var,236,'I'},{integer,236,250}}]}]},
   {clause,237,
    [{var,237,'I'}],
    [[{call,237,{atom,237,is_integer},[{var,237,'I'}]}]],
    [{op,237,'div',{var,237,'I'},{integer,237,250}}]},
   {clause,238,
    [{var,238,'A'}],
    [[{call,238,{atom,238,is_atom},[{var,238,'A'}]}]],
    [{var,238,'A'}]}]},
 {function,242,connect,1,
  [{clause,242,
    [{var,242,'Node'}],
    [],
    [{call,242,
      {atom,242,do_connect},
      [{var,242,'Node'},{atom,242,normal},{atom,242,false}]}]}]},
 {function,245,passive_cnct,1,
  [{clause,245,
    [{var,245,'Node'}],
    [],
    [{call,245,
      {atom,245,do_connect},
      [{var,245,'Node'},{atom,245,normal},{atom,245,true}]}]}]},
 {function,246,disconnect,1,
  [{clause,246,
    [{var,246,'Node'}],
    [],
    [{call,246,
      {atom,246,request},
      [{tuple,246,[{atom,246,disconnect},{var,246,'Node'}]}]}]}]},
 {function,249,hidden_connect,1,
  [{clause,249,
    [{var,249,'Node'}],
    [],
    [{call,249,
      {atom,249,do_connect},
      [{var,249,'Node'},{atom,249,hidden},{atom,249,false}]}]}]},
 {function,252,publish_on_node,1,
  [{clause,252,
    [{var,252,'Node'}],
    [[{call,252,{atom,252,is_atom},[{var,252,'Node'}]}]],
    [{call,253,
      {atom,253,request},
      [{tuple,253,[{atom,253,publish_on_node},{var,253,'Node'}]}]}]}]},
 {function,256,update_publish_nodes,1,
  [{clause,256,
    [{var,256,'Ns'}],
    [],
    [{call,257,
      {atom,257,request},
      [{tuple,257,[{atom,257,update_publish_nodes},{var,257,'Ns'}]}]}]}]},
 {function,262,connect_node,1,
  [{clause,262,
    [{var,262,'Node'}],
    [[{call,262,{atom,262,is_atom},[{var,262,'Node'}]}]],
    [{call,263,
      {atom,263,request},
      [{tuple,263,
        [{atom,263,connect},{atom,263,normal},{var,263,'Node'}]}]}]}]},
 {function,264,hidden_connect_node,1,
  [{clause,264,
    [{var,264,'Node'}],
    [[{call,264,{atom,264,is_atom},[{var,264,'Node'}]}]],
    [{call,265,
      {atom,265,request},
      [{tuple,265,
        [{atom,265,connect},{atom,265,hidden},{var,265,'Node'}]}]}]}]},
 {function,267,do_connect,3,
  [{clause,267,
    [{var,267,'Node'},{var,267,'Type'},{var,267,'WaitForBarred'}],
    [],
    [{'case',268,
      {'catch',268,
       {call,268,
        {remote,268,{atom,268,ets},{atom,268,lookup}},
        [{atom,268,sys_dist},{var,268,'Node'}]}},
      [{clause,269,
        [{tuple,269,[{atom,269,'EXIT'},{var,269,'_'}]}],
        [],
        [{atom,42,noop},{atom,271,false}]},
       {clause,272,
        [{cons,272,
          {tuple,272,[{atom,272,barred_connection},{var,272,'_'}]},
          {nil,272}}],
        [],
        [{'case',273,
          {var,273,'WaitForBarred'},
          [{clause,274,[{atom,274,false}],[],[{atom,275,false}]},
           {clause,276,
            [{atom,276,true}],
            [],
            [{match,277,
              {var,277,'Pid'},
              {call,277,
               {atom,277,spawn},
               [{atom,-1,net_kernel},
                {atom,277,passive_connect_monitor},
                {cons,277,
                 {call,277,{atom,277,self},[]},
                 {cons,277,{var,277,'Node'},{nil,277}}}]}},
             {'receive',278,
              [{clause,279,
                [{tuple,279,[{var,279,'Pid'},{atom,279,true}]}],
                [],
                [{atom,282,true}]},
               {clause,283,
                [{tuple,283,[{var,283,'Pid'},{atom,283,false}]}],
                [],
                [{atom,42,noop},{atom,288,false}]}]}]}]}]},
       {clause,291,
        [{var,291,'Else'}],
        [],
        [{'case',292,
          {call,292,
           {remote,292,{atom,292,application},{atom,292,get_env}},
           [{atom,292,kernel},{atom,292,dist_auto_connect}]},
          [{clause,293,
            [{tuple,293,[{atom,293,ok},{atom,293,never}]}],
            [],
            [{atom,42,noop},{atom,295,false}]},
           {clause,299,
            [{tuple,299,[{atom,299,ok},{atom,299,once}]}],
            [[{op,299,'=/=',{var,299,'Else'},{nil,299}},
              {op,300,'=:=',
               {call,300,
                {remote,300,{atom,300,erlang},{atom,300,element}},
                [{integer,300,3},{call,300,{atom,300,hd},[{var,300,'Else'}]}]},
               {atom,300,up}}]],
            [{atom,42,noop},{atom,303,false}]},
           {clause,304,
            [{var,304,'_'}],
            [],
            [{call,305,
              {atom,305,request},
              [{tuple,305,
                [{atom,305,connect},
                 {var,305,'Type'},
                 {var,305,'Node'}]}]}]}]}]}]}]}]},
 {function,309,passive_connect_monitor,2,
  [{clause,309,
    [{var,309,'Parent'},{var,309,'Node'}],
    [],
    [{match,310,
      {atom,310,ok},
      {call,310,
       {atom,310,monitor_nodes},
       [{atom,310,true},
        {cons,310,
         {tuple,310,[{atom,310,node_type},{atom,310,all}]},
         {nil,310}}]}},
     {'case',311,
      {call,311,
       {remote,311,{atom,311,lists},{atom,311,member}},
       [{var,311,'Node'},
        {call,311,
         {atom,311,nodes},
         [{cons,311,{atom,311,connected},{nil,311}}]}]},
      [{clause,312,
        [{atom,312,true}],
        [],
        [{match,313,
          {atom,313,ok},
          {call,313,
           {atom,313,monitor_nodes},
           [{atom,313,false},
            {cons,313,
             {tuple,313,[{atom,313,node_type},{atom,313,all}]},
             {nil,313}}]}},
         {op,314,'!',
          {var,314,'Parent'},
          {tuple,314,[{call,314,{atom,314,self},[]},{atom,314,true}]}}]},
       {clause,315,
        [{var,315,'_'}],
        [],
        [{match,316,{var,316,'Ref'},{call,316,{atom,316,make_ref},[]}},
         {match,317,
          {var,317,'Tref'},
          {call,317,
           {remote,317,{atom,317,erlang},{atom,317,send_after}},
           [{call,317,{atom,317,connecttime},[]},
            {call,317,{atom,317,self},[]},
            {var,317,'Ref'}]}},
         {'receive',318,
          [{clause,319,
            [{var,319,'Ref'}],
            [],
            [{match,320,
              {atom,320,ok},
              {call,320,
               {atom,320,monitor_nodes},
               [{atom,320,false},
                {cons,320,
                 {tuple,320,[{atom,320,node_type},{atom,320,all}]},
                 {nil,320}}]}},
             {op,321,'!',
              {var,321,'Parent'},
              {tuple,321,[{call,321,{atom,321,self},[]},{atom,321,false}]}}]},
           {clause,322,
            [{tuple,322,[{atom,322,nodeup},{var,322,'Node'},{var,322,'_'}]}],
            [],
            [{match,323,
              {atom,323,ok},
              {call,323,
               {atom,323,monitor_nodes},
               [{atom,323,false},
                {cons,323,
                 {tuple,323,[{atom,323,node_type},{atom,323,all}]},
                 {nil,323}}]}},
             {match,324,
              {var,324,'_'},
              {call,324,
               {remote,324,{atom,324,erlang},{atom,324,cancel_timer}},
               [{var,324,'Tref'}]}},
             {op,325,'!',
              {var,325,'Parent'},
              {tuple,325,
               [{call,325,{atom,325,self},[]},{atom,325,true}]}}]}]}]}]}]}]},
 {function,331,request,1,
  [{clause,331,
    [{var,331,'Req'}],
    [],
    [{'case',332,
      {call,332,{atom,332,whereis},[{atom,332,net_kernel}]},
      [{clause,333,
        [{var,333,'P'}],
        [[{call,333,{atom,333,is_pid},[{var,333,'P'}]}]],
        [{call,334,
          {remote,334,{atom,334,gen_server},{atom,334,call}},
          [{atom,334,net_kernel},{var,334,'Req'},{atom,334,infinity}]}]},
       {clause,335,[{var,335,'_'}],[],[{atom,335,ignored}]}]}]}]},
 {function,341,start,1,
  [{clause,341,
    [{var,341,'Args'}],
    [],
    [{call,342,
      {remote,342,{atom,342,erl_distribution},{atom,342,start}},
      [{var,342,'Args'}]}]}]},
 {function,347,start_link,1,
  [{clause,347,
    [{cons,347,{var,347,'Name'},{nil,347}}],
    [],
    [{call,348,
      {atom,348,start_link},
      [{cons,348,
        {var,348,'Name'},
        {cons,348,{atom,348,longnames},{nil,348}}}]}]},
   {clause,350,
    [{cons,350,
      {var,350,'Name'},
      {cons,350,{var,350,'LongOrShortNames'},{nil,350}}}],
    [],
    [{call,351,
      {atom,351,start_link},
      [{cons,351,
        {var,351,'Name'},
        {cons,351,
         {var,351,'LongOrShortNames'},
         {cons,351,{integer,351,15000},{nil,351}}}}]}]},
   {clause,353,
    [{cons,353,
      {var,353,'Name'},
      {cons,353,
       {var,353,'LongOrShortNames'},
       {cons,353,{var,353,'Ticktime'},{nil,353}}}}],
    [],
    [{'case',354,
      {call,354,
       {remote,354,{atom,354,gen_server},{atom,354,start_link}},
       [{tuple,354,[{atom,354,local},{atom,354,net_kernel}]},
        {atom,354,net_kernel},
        {tuple,355,
         [{var,355,'Name'},{var,355,'LongOrShortNames'},{var,355,'Ticktime'}]},
        {nil,355}]},
      [{clause,356,
        [{tuple,356,[{atom,356,ok},{var,356,'Pid'}]}],
        [],
        [{tuple,357,[{atom,357,ok},{var,357,'Pid'}]}]},
       {clause,358,
        [{tuple,358,
          [{atom,358,error},
           {tuple,358,[{atom,358,already_started},{var,358,'Pid'}]}]}],
        [],
        [{tuple,359,[{atom,359,ok},{var,359,'Pid'}]}]},
       {clause,360,
        [{var,360,'_Error'}],
        [],
        [{call,361,{atom,361,exit},[{atom,361,nodistribution}]}]}]}]}]},
 {function,367,init,1,
  [{clause,367,
    [{tuple,367,
      [{var,367,'Name'},{var,367,'LongOrShortNames'},{var,367,'TickT'}]}],
    [],
    [{call,368,{atom,368,process_flag},[{atom,368,trap_exit},{atom,368,true}]},
     {'case',369,
      {call,369,
       {atom,369,init_node},
       [{var,369,'Name'},{var,369,'LongOrShortNames'}]},
      [{clause,370,
        [{tuple,370,[{atom,370,ok},{var,370,'Node'},{var,370,'Listeners'}]}],
        [],
        [{call,371,
          {atom,371,process_flag},
          [{atom,371,priority},{atom,371,max}]},
         {match,372,
          {var,372,'Ticktime'},
          {call,372,{atom,372,to_integer},[{var,372,'TickT'}]}},
         {match,373,
          {var,373,'Ticker'},
          {call,373,
           {atom,373,spawn_link},
           [{atom,373,net_kernel},
            {atom,373,ticker},
            {cons,373,
             {call,373,{atom,373,self},[]},
             {cons,373,{var,373,'Ticktime'},{nil,373}}}]}},
         {tuple,374,
          [{atom,374,ok},
           {tuple,374,
            [{atom,374,state},
             {var,374,'Name'},
             {var,375,'Node'},
             {var,376,'LongOrShortNames'},
             {tuple,377,
              [{atom,377,tick},{var,377,'Ticker'},{var,377,'Ticktime'}]},
             {call,378,{atom,378,connecttime},[]},
             {call,380,
              {remote,380,{atom,380,ets},{atom,380,new}},
              [{atom,380,sys_dist},
               {cons,380,
                {atom,380,named_table},
                {cons,381,
                 {atom,381,protected},
                 {cons,382,
                  {tuple,382,[{atom,382,keypos},{integer,382,2}]},
                  {nil,382}}}}]},
             {nil,97},
             {nil,98},
             {var,383,'Listeners'},
             {nil,384},
             {integer,385,0},
             {atom,102,undefined}]}]}]},
       {clause,387,
        [{var,387,'Error'}],
        [],
        [{tuple,388,[{atom,388,stop},{var,388,'Error'}]}]}]}]}]},
 {function,401,handle_call,3,
  [{clause,401,
    [{tuple,401,[{atom,401,connect},{var,401,'_'},{var,401,'Node'}]},
     {var,401,'From'},
     {var,401,'State'}],
    [[{op,401,'=:=',{var,401,'Node'},{call,401,{atom,401,node},[]}}]],
    [{call,402,
      {atom,402,async_reply},
      [{tuple,402,[{atom,402,reply},{atom,402,true},{var,402,'State'}]},
       {var,402,'From'}]}]},
   {clause,403,
    [{tuple,403,[{atom,403,connect},{var,403,'Type'},{var,403,'Node'}]},
     {var,403,'From'},
     {var,403,'State'}],
    [],
    [{call,404,
      {atom,404,verbose},
      [{tuple,404,[{atom,404,connect},{var,404,'Type'},{var,404,'Node'}]},
       {integer,404,1},
       {var,404,'State'}]},
     {'case',405,
      {call,405,
       {remote,405,{atom,405,ets},{atom,405,lookup}},
       [{atom,405,sys_dist},{var,405,'Node'}]},
      [{clause,406,
        [{cons,406,{var,406,'Conn'},{nil,406}}],
        [[{op,406,'=:=',
           {call,406,
            {remote,406,{atom,406,erlang},{atom,406,element}},
            [{integer,406,3},{var,406,'Conn'}]},
           {atom,406,up}}]],
        [{call,407,
          {atom,407,async_reply},
          [{tuple,407,[{atom,407,reply},{atom,407,true},{var,407,'State'}]},
           {var,407,'From'}]}]},
       {clause,408,
        [{cons,408,{var,408,'Conn'},{nil,408}}],
        [[{op,408,'=:=',
           {call,408,
            {remote,408,{atom,408,erlang},{atom,408,element}},
            [{integer,408,3},{var,408,'Conn'}]},
           {atom,408,pending}}]],
        [{match,409,
          {var,409,'Waiting'},
          {call,409,
           {remote,409,{atom,409,erlang},{atom,409,element}},
           [{integer,409,7},{var,409,'Conn'}]}},
         {call,410,
          {remote,410,{atom,410,ets},{atom,410,insert}},
          [{atom,410,sys_dist},
           {call,410,
            {remote,410,{atom,410,erlang},{atom,410,setelement}},
            [{integer,410,7},
             {var,410,'Conn'},
             {cons,410,{var,410,'From'},{var,410,'Waiting'}}]}]},
         {tuple,411,[{atom,411,noreply},{var,411,'State'}]}]},
       {clause,412,
        [{cons,412,{var,412,'Conn'},{nil,412}}],
        [[{op,412,'=:=',
           {call,412,
            {remote,412,{atom,412,erlang},{atom,412,element}},
            [{integer,412,3},{var,412,'Conn'}]},
           {atom,412,up_pending}}]],
        [{match,413,
          {var,413,'Waiting'},
          {call,413,
           {remote,413,{atom,413,erlang},{atom,413,element}},
           [{integer,413,7},{var,413,'Conn'}]}},
         {call,414,
          {remote,414,{atom,414,ets},{atom,414,insert}},
          [{atom,414,sys_dist},
           {call,414,
            {remote,414,{atom,414,erlang},{atom,414,setelement}},
            [{integer,414,7},
             {var,414,'Conn'},
             {cons,414,{var,414,'From'},{var,414,'Waiting'}}]}]},
         {tuple,415,[{atom,415,noreply},{var,415,'State'}]}]},
       {clause,416,
        [{var,416,'_'}],
        [],
        [{'case',417,
          {call,417,
           {atom,417,setup},
           [{var,417,'Node'},
            {var,417,'Type'},
            {var,417,'From'},
            {var,417,'State'}]},
          [{clause,418,
            [{tuple,418,[{atom,418,ok},{var,418,'SetupPid'}]}],
            [],
            [{match,419,
              {var,419,'Owners'},
              {cons,419,
               {tuple,419,[{var,419,'SetupPid'},{var,419,'Node'}]},
               {call,419,
                {remote,419,{atom,419,erlang},{atom,419,element}},
                [{integer,419,8},{var,419,'State'}]}}},
             {tuple,420,
              [{atom,420,noreply},
               {call,420,
                {remote,420,{atom,420,erlang},{atom,420,setelement}},
                [{integer,420,8},{var,420,'State'},{var,420,'Owners'}]}]}]},
           {clause,421,
            [{var,421,'_'}],
            [],
            [{atom,42,noop},
             {call,423,
              {atom,423,async_reply},
              [{tuple,423,
                [{atom,423,reply},{atom,423,false},{var,423,'State'}]},
               {var,423,'From'}]}]}]}]}]}]},
   {clause,430,
    [{tuple,430,[{atom,430,disconnect},{var,430,'Node'}]},
     {var,430,'From'},
     {var,430,'State'}],
    [[{op,430,'=:=',{var,430,'Node'},{call,430,{atom,430,node},[]}}]],
    [{call,431,
      {atom,431,async_reply},
      [{tuple,431,[{atom,431,reply},{atom,431,false},{var,431,'State'}]},
       {var,431,'From'}]}]},
   {clause,432,
    [{tuple,432,[{atom,432,disconnect},{var,432,'Node'}]},
     {var,432,'From'},
     {var,432,'State'}],
    [],
    [{call,433,
      {atom,433,verbose},
      [{tuple,433,[{atom,433,disconnect},{var,433,'Node'}]},
       {integer,433,1},
       {var,433,'State'}]},
     {match,434,
      {tuple,434,[{var,434,'Reply'},{var,434,'State1'}]},
      {call,434,
       {atom,434,do_disconnect},
       [{var,434,'Node'},{var,434,'State'}]}},
     {call,435,
      {atom,435,async_reply},
      [{tuple,435,[{atom,435,reply},{var,435,'Reply'},{var,435,'State1'}]},
       {var,435,'From'}]}]},
   {clause,440,
    [{tuple,440,
      [{atom,440,spawn},
       {var,440,'M'},
       {var,440,'F'},
       {var,440,'A'},
       {var,440,'Gleader'}]},
     {tuple,440,[{var,440,'From'},{var,440,'Tag'}]},
     {var,440,'State'}],
    [[{call,440,{atom,440,is_pid},[{var,440,'From'}]}]],
    [{call,441,
      {atom,441,do_spawn},
      [{cons,441,
        {atom,441,no_link},
        {cons,441,
         {tuple,441,[{var,441,'From'},{var,441,'Tag'}]},
         {cons,441,
          {var,441,'M'},
          {cons,441,
           {var,441,'F'},
           {cons,441,
            {var,441,'A'},
            {cons,441,{var,441,'Gleader'},{nil,441}}}}}}},
       {nil,441},
       {var,441,'State'}]}]},
   {clause,446,
    [{tuple,446,
      [{atom,446,spawn_link},
       {var,446,'M'},
       {var,446,'F'},
       {var,446,'A'},
       {var,446,'Gleader'}]},
     {tuple,446,[{var,446,'From'},{var,446,'Tag'}]},
     {var,446,'State'}],
    [[{call,446,{atom,446,is_pid},[{var,446,'From'}]}]],
    [{call,447,
      {atom,447,do_spawn},
      [{cons,447,
        {atom,447,link},
        {cons,447,
         {tuple,447,[{var,447,'From'},{var,447,'Tag'}]},
         {cons,447,
          {var,447,'M'},
          {cons,447,
           {var,447,'F'},
           {cons,447,
            {var,447,'A'},
            {cons,447,{var,447,'Gleader'},{nil,447}}}}}}},
       {nil,447},
       {var,447,'State'}]}]},
   {clause,452,
    [{tuple,452,
      [{atom,452,spawn_opt},
       {var,452,'M'},
       {var,452,'F'},
       {var,452,'A'},
       {var,452,'O'},
       {var,452,'L'},
       {var,452,'Gleader'}]},
     {tuple,452,[{var,452,'From'},{var,452,'Tag'}]},
     {var,452,'State'}],
    [[{call,452,{atom,452,is_pid},[{var,452,'From'}]}]],
    [{call,453,
      {atom,453,do_spawn},
      [{cons,453,
        {var,453,'L'},
        {cons,453,
         {tuple,453,[{var,453,'From'},{var,453,'Tag'}]},
         {cons,453,
          {var,453,'M'},
          {cons,453,
           {var,453,'F'},
           {cons,453,
            {var,453,'A'},
            {cons,453,{var,453,'Gleader'},{nil,453}}}}}}},
       {var,453,'O'},
       {var,453,'State'}]}]},
   {clause,458,
    [{tuple,458,[{atom,458,allow},{var,458,'Nodes'}]},
     {var,458,'From'},
     {var,458,'State'}],
    [],
    [{'case',459,
      {call,459,{atom,459,all_atoms},[{var,459,'Nodes'}]},
      [{clause,460,
        [{atom,460,true}],
        [],
        [{match,461,
          {var,461,'Allowed'},
          {call,461,
           {remote,461,{atom,461,erlang},{atom,461,element}},
           [{integer,461,11},{var,461,'State'}]}},
         {call,462,
          {atom,462,async_reply},
          [{tuple,462,
            [{atom,462,reply},
             {atom,462,ok},
             {call,462,
              {remote,462,{atom,462,erlang},{atom,462,setelement}},
              [{integer,462,11},
               {var,462,'State'},
               {op,462,'++',{var,462,'Allowed'},{var,462,'Nodes'}}]}]},
           {var,463,'From'}]}]},
       {clause,464,
        [{atom,464,false}],
        [],
        [{call,465,
          {atom,465,async_reply},
          [{tuple,465,[{atom,465,reply},{atom,465,error},{var,465,'State'}]},
           {var,465,'From'}]}]}]}]},
   {clause,472,
    [{tuple,472,[{atom,472,is_auth},{var,472,'_Node'}]},
     {var,472,'From'},
     {var,472,'State'}],
    [],
    [{call,473,
      {atom,473,async_reply},
      [{tuple,473,[{atom,473,reply},{atom,473,yes},{var,473,'State'}]},
       {var,473,'From'}]}]},
   {clause,478,
    [{tuple,478,
      [{atom,478,apply},{var,478,'_Mod'},{var,478,'_Fun'},{var,478,'_Args'}]},
     {tuple,478,[{var,478,'From'},{var,478,'Tag'}]},
     {var,478,'State'}],
    [[{call,479,{atom,479,is_pid},[{var,479,'From'}]},
      {op,479,'=:=',
       {call,479,{atom,479,node},[{var,479,'From'}]},
       {call,479,{atom,479,node},[]}}]],
    [{call,480,
      {atom,480,async_gen_server_reply},
      [{tuple,480,[{var,480,'From'},{var,480,'Tag'}]},
       {atom,480,not_implemented}]},
     {tuple,483,[{atom,483,noreply},{var,483,'State'}]}]},
   {clause,485,
    [{atom,485,longnames},{var,485,'From'},{var,485,'State'}],
    [],
    [{call,486,
      {atom,486,async_reply},
      [{tuple,486,
        [{atom,486,reply},
         {call,486,{atom,486,get},[{atom,486,longnames}]},
         {var,486,'State'}]},
       {var,486,'From'}]}]},
   {clause,488,
    [{tuple,488,[{atom,488,update_publish_nodes},{var,488,'Ns'}]},
     {var,488,'From'},
     {var,488,'State'}],
    [],
    [{call,489,
      {atom,489,async_reply},
      [{tuple,489,
        [{atom,489,reply},
         {atom,489,ok},
         {call,489,
          {remote,489,{atom,489,erlang},{atom,489,setelement}},
          [{integer,489,13},{var,489,'State'},{var,489,'Ns'}]}]},
       {var,489,'From'}]}]},
   {clause,491,
    [{tuple,491,[{atom,491,publish_on_node},{var,491,'Node'}]},
     {var,491,'From'},
     {var,491,'State'}],
    [],
    [{match,492,
      {var,492,'NewState'},
      {'case',492,
       {call,492,
        {remote,492,{atom,492,erlang},{atom,492,element}},
        [{integer,492,13},{var,492,'State'}]},
       [{clause,493,
         [{atom,493,undefined}],
         [],
         [{call,494,
           {remote,494,{atom,494,erlang},{atom,494,setelement}},
           [{integer,494,13},
            {var,494,'State'},
            {call,495,
             {remote,495,{atom,495,global_group},{atom,495,publish_on_nodes}},
             []}]}]},
        {clause,496,[{var,496,'_'}],[],[{var,497,'State'}]}]}},
     {match,499,
      {var,499,'Publish'},
      {'case',499,
       {call,499,
        {remote,499,{atom,499,erlang},{atom,499,element}},
        [{integer,499,13},{var,499,'NewState'}]},
       [{clause,500,[{atom,500,all}],[],[{atom,501,true}]},
        {clause,502,
         [{var,502,'Nodes'}],
         [],
         [{call,503,
           {remote,503,{atom,503,lists},{atom,503,member}},
           [{var,503,'Node'},{var,503,'Nodes'}]}]}]}},
     {call,505,
      {atom,505,async_reply},
      [{tuple,505,[{atom,505,reply},{var,505,'Publish'},{var,505,'NewState'}]},
       {var,505,'From'}]}]},
   {clause,508,
    [{tuple,508,[{atom,508,verbose},{var,508,'Level'}]},
     {var,508,'From'},
     {var,508,'State'}],
    [],
    [{call,509,
      {atom,509,async_reply},
      [{tuple,509,
        [{atom,509,reply},
         {call,509,
          {remote,509,{atom,509,erlang},{atom,509,element}},
          [{integer,509,12},{var,509,'State'}]},
         {call,509,
          {remote,509,{atom,509,erlang},{atom,509,setelement}},
          [{integer,509,12},{var,509,'State'},{var,509,'Level'}]}]},
       {var,510,'From'}]}]},
   {clause,520,
    [{atom,520,ticktime},
     {var,520,'From'},
     {match,520,
      {tuple,520,
       [{atom,520,state},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'},
        {tuple,520,[{atom,520,tick},{var,520,'_'},{var,520,'T'}]},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'},
        {var,520,'_'}]},
      {var,520,'State'}}],
    [],
    [{call,521,
      {atom,521,async_reply},
      [{tuple,521,[{atom,521,reply},{var,521,'T'},{var,521,'State'}]},
       {var,521,'From'}]}]},
   {clause,522,
    [{atom,522,ticktime},
     {var,522,'From'},
     {match,522,
      {tuple,522,
       [{atom,522,state},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'},
        {tuple,522,
         [{atom,522,tick_change},{var,522,'_'},{var,522,'T'},{var,522,'_'}]},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'},
        {var,522,'_'}]},
      {var,522,'State'}}],
    [],
    [{call,523,
      {atom,523,async_reply},
      [{tuple,523,
        [{atom,523,reply},
         {tuple,523,[{atom,523,ongoing_change_to},{var,523,'T'}]},
         {var,523,'State'}]},
       {var,523,'From'}]}]},
   {clause,525,
    [{tuple,525,[{atom,525,new_ticktime},{var,525,'T'},{var,525,'_TP'}]},
     {var,525,'From'},
     {match,525,
      {tuple,525,
       [{atom,525,state},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'},
        {tuple,525,[{atom,525,tick},{var,525,'_'},{var,525,'T'}]},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'},
        {var,525,'_'}]},
      {var,525,'State'}}],
    [],
    [{atom,53,ok},
     {call,527,
      {atom,527,async_reply},
      [{tuple,527,[{atom,527,reply},{atom,527,unchanged},{var,527,'State'}]},
       {var,527,'From'}]}]},
   {clause,529,
    [{tuple,529,[{atom,529,new_ticktime},{var,529,'T'},{var,529,'TP'}]},
     {var,529,'From'},
     {match,530,
      {tuple,529,
       [{atom,529,state},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'},
        {tuple,529,[{atom,529,tick},{var,529,'Tckr'},{var,530,'OT'}]},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'},
        {var,529,'_'}]},
      {var,530,'State'}}],
    [],
    [{atom,53,ok},
     {call,532,
      {atom,532,start_aux_ticker},
      [{var,532,'T'},{var,532,'OT'},{var,532,'TP'}]},
     {match,533,
      {var,533,'How'},
      {'case',533,
       {op,533,'>',{var,533,'T'},{var,533,'OT'}},
       [{clause,534,
         [{atom,534,true}],
         [],
         [{atom,53,ok},
          {op,536,'!',
           {var,536,'Tckr'},
           {tuple,536,[{atom,536,new_ticktime},{var,536,'T'}]}},
          {atom,537,longer}]},
        {clause,538,
         [{atom,538,false}],
         [],
         [{atom,53,ok},{atom,540,shorter}]}]}},
     {call,542,
      {atom,542,async_reply},
      [{tuple,542,
        [{atom,542,reply},
         {atom,542,change_initiated},
         {call,543,
          {remote,543,{atom,543,erlang},{atom,543,setelement}},
          [{integer,543,5},
           {var,543,'State'},
           {tuple,543,
            [{atom,543,tick_change},
             {var,543,'Tckr'},
             {var,544,'T'},
             {var,545,'How'}]}]}]},
       {var,545,'From'}]}]},
   {clause,547,
    [{tuple,547,[{atom,547,new_ticktime},{var,547,'_T'},{var,547,'_TP'}]},
     {var,548,'From'},
     {match,549,
      {tuple,549,
       [{atom,549,state},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'},
        {tuple,549,
         [{atom,549,tick_change},{var,549,'_'},{var,549,'T'},{var,549,'_'}]},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'},
        {var,549,'_'}]},
      {var,549,'State'}}],
    [],
    [{call,550,
      {atom,550,async_reply},
      [{tuple,550,
        [{atom,550,reply},
         {tuple,550,[{atom,550,ongoing_change_to},{var,550,'T'}]},
         {var,550,'State'}]},
       {var,550,'From'}]}]},
   {clause,552,
    [{var,552,'_Msg'},{var,552,'_From'},{var,552,'State'}],
    [],
    [{tuple,553,[{atom,553,noreply},{var,553,'State'}]}]}]},
 {function,559,handle_cast,2,
  [{clause,559,
    [{var,559,'_'},{var,559,'State'}],
    [],
    [{tuple,560,[{atom,560,noreply},{var,560,'State'}]}]}]},
 {function,566,code_change,3,
  [{clause,566,
    [{var,566,'_OldVsn'},{var,566,'State'},{var,566,'_Extra'}],
    [],
    [{tuple,567,[{atom,567,ok},{var,567,'State'}]}]}]},
 {function,573,terminate,2,
  [{clause,573,
    [{atom,573,no_network},{var,573,'State'}],
    [],
    [{call,574,
      {remote,574,{atom,574,lists},{atom,574,foreach}},
      [{'fun',575,
        {clauses,
         [{clause,575,
           [{tuple,575,[{var,575,'Node'},{var,575,'Type'}]}],
           [],
           [{'case',576,
             {var,576,'Type'},
             [{clause,577,
               [{atom,577,normal}],
               [],
               [{call,24,
                 {atom,24,verbose},
                 [{tuple,24,
                   [{atom,-1,net_kernel},
                    {integer,24,24},
                    {atom,24,nodedown},
                    {var,577,'Node'}]},
                  {integer,24,1},
                  {var,577,'State'}]}]},
              {clause,578,[{var,578,'_'}],[],[{atom,578,ok}]}]}]}]}},
       {op,580,'++',
        {call,580,{atom,580,get_up_nodes},[]},
        {cons,580,
         {tuple,580,[{call,580,{atom,580,node},[]},{atom,580,normal}]},
         {nil,580}}}]}]},
   {clause,581,
    [{var,581,'_Reason'},{var,581,'State'}],
    [],
    [{call,582,
      {remote,582,{atom,582,lists},{atom,582,foreach}},
      [{'fun',583,
        {clauses,
         [{clause,583,
           [{tuple,583,
             [{atom,583,listen},
              {var,583,'Listen'},
              {var,583,'_'},
              {var,583,'_'},
              {var,583,'Mod'}]}],
           [],
           [{call,584,
             {remote,584,{var,584,'Mod'},{atom,584,close}},
             [{var,584,'Listen'}]}]}]}},
       {call,585,
        {remote,585,{atom,585,erlang},{atom,585,element}},
        [{integer,585,10},{var,585,'State'}]}]},
     {call,586,
      {remote,586,{atom,586,lists},{atom,586,foreach}},
      [{'fun',587,
        {clauses,
         [{clause,587,
           [{tuple,587,[{var,587,'Node'},{var,587,'Type'}]}],
           [],
           [{'case',588,
             {var,588,'Type'},
             [{clause,589,
               [{atom,589,normal}],
               [],
               [{call,24,
                 {atom,24,verbose},
                 [{tuple,24,
                   [{atom,-1,net_kernel},
                    {integer,24,24},
                    {atom,24,nodedown},
                    {var,589,'Node'}]},
                  {integer,24,1},
                  {var,589,'State'}]}]},
              {clause,590,[{var,590,'_'}],[],[{atom,590,ok}]}]}]}]}},
       {op,592,'++',
        {call,592,{atom,592,get_up_nodes},[]},
        {cons,592,
         {tuple,592,[{call,592,{atom,592,node},[]},{atom,592,normal}]},
         {nil,592}}}]}]}]},
 {function,602,handle_info,2,
  [{clause,602,
    [{tuple,602,
      [{atom,602,accept},
       {var,602,'AcceptPid'},
       {var,602,'Socket'},
       {var,602,'Family'},
       {var,602,'Proto'}]},
     {var,602,'State'}],
    [],
    [{match,603,
      {var,603,'MyNode'},
      {call,603,
       {remote,603,{atom,603,erlang},{atom,603,element}},
       [{integer,603,3},{var,603,'State'}]}},
     {'case',604,
      {call,604,
       {atom,604,get_proto_mod},
       [{var,604,'Family'},
        {var,604,'Proto'},
        {call,604,
         {remote,604,{atom,604,erlang},{atom,604,element}},
         [{integer,604,10},{var,604,'State'}]}]},
      [{clause,605,
        [{tuple,605,[{atom,605,ok},{var,605,'Mod'}]}],
        [],
        [{match,606,
          {var,606,'Pid'},
          {call,606,
           {remote,606,{var,606,'Mod'},{atom,606,accept_connection}},
           [{var,606,'AcceptPid'},
            {var,607,'Socket'},
            {var,608,'MyNode'},
            {call,609,
             {remote,609,{atom,609,erlang},{atom,609,element}},
             [{integer,609,11},{var,609,'State'}]},
            {call,610,
             {remote,610,{atom,610,erlang},{atom,610,element}},
             [{integer,610,6},{var,610,'State'}]}]}},
         {op,611,'!',
          {var,611,'AcceptPid'},
          {tuple,611,
           [{call,611,{atom,611,self},[]},
            {atom,611,controller},
            {var,611,'Pid'}]}},
         {tuple,612,[{atom,612,noreply},{var,612,'State'}]}]},
       {clause,613,
        [{var,613,'_'}],
        [],
        [{op,614,'!',
          {var,614,'AcceptPid'},
          {tuple,614,
           [{call,614,{atom,614,self},[]},{atom,614,unsupported_protocol}]}},
         {tuple,615,[{atom,615,noreply},{var,615,'State'}]}]}]}]},
   {clause,621,
    [{tuple,621,
      [{var,621,'SetupPid'},
       {tuple,621,
        [{atom,621,nodeup},
         {var,621,'Node'},
         {var,621,'Address'},
         {var,621,'Type'},
         {var,621,'Immediate'}]}]},
     {var,622,'State'}],
    [],
    [{'case',623,
      {tuple,623,
       [{var,623,'Immediate'},
        {call,623,
         {remote,623,{atom,623,ets},{atom,623,lookup}},
         [{atom,623,sys_dist},{var,623,'Node'}]}]},
      [{clause,624,
        [{tuple,624,[{atom,624,true},{cons,624,{var,624,'Conn'},{nil,624}}]}],
        [[{op,624,'=:=',
           {call,624,
            {remote,624,{atom,624,erlang},{atom,624,element}},
            [{integer,624,3},{var,624,'Conn'}]},
           {atom,624,pending}},
          {op,625,'=:=',
           {call,625,
            {remote,625,{atom,625,erlang},{atom,625,element}},
            [{integer,625,4},{var,625,'Conn'}]},
           {var,625,'SetupPid'}}]],
        [{call,626,
          {remote,626,{atom,626,ets},{atom,626,insert}},
          [{atom,626,sys_dist},
           {call,626,
            {remote,626,{atom,626,erlang},{atom,626,setelement}},
            [{integer,626,8},
             {call,626,
              {remote,626,{atom,626,erlang},{atom,626,setelement}},
              [{integer,626,7},
               {call,626,
                {remote,626,{atom,626,erlang},{atom,626,setelement}},
                [{integer,626,6},
                 {call,626,
                  {remote,626,{atom,626,erlang},{atom,626,setelement}},
                  [{integer,626,3},{var,626,'Conn'},{atom,626,up}]},
                 {var,627,'Address'}]},
               {nil,628}]},
             {var,629,'Type'}]}]},
         {op,630,'!',
          {var,630,'SetupPid'},
          {tuple,630,[{call,630,{atom,630,self},[]},{atom,630,inserted}]}},
         {call,631,
          {atom,631,reply_waiting},
          [{var,631,'Node'},
           {call,631,
            {remote,631,{atom,631,erlang},{atom,631,element}},
            [{integer,631,7},{var,631,'Conn'}]},
           {atom,631,true}]},
         {tuple,632,[{atom,632,noreply},{var,632,'State'}]}]},
       {clause,633,
        [{var,633,'_'}],
        [],
        [{op,634,'!',
          {var,634,'SetupPid'},
          {tuple,634,[{call,634,{atom,634,self},[]},{atom,634,bad_request}]}},
         {tuple,635,[{atom,635,noreply},{var,635,'State'}]}]}]}]},
   {clause,641,
    [{tuple,641,
      [{var,641,'AcceptPid'},
       {tuple,641,
        [{atom,641,accept_pending},
         {var,641,'MyNode'},
         {var,641,'Node'},
         {var,641,'Address'},
         {var,641,'Type'}]}]},
     {var,641,'State'}],
    [],
    [{'case',642,
      {call,642,
       {remote,642,{atom,642,ets},{atom,642,lookup}},
       [{atom,642,sys_dist},{var,642,'Node'}]},
      [{clause,643,
        [{cons,643,
          {match,643,
           {tuple,643,
            [{atom,643,connection},
             {var,643,'_'},
             {atom,643,pending},
             {var,643,'_'},
             {var,643,'_'},
             {var,643,'_'},
             {var,643,'_'},
             {var,643,'_'}]},
           {var,643,'Conn'}},
          {nil,643}}],
        [],
        [{'if',644,
          [{clause,645,[],
            [[{op,645,'>',{var,645,'MyNode'},{var,645,'Node'}}]],
            [{op,646,'!',
              {var,646,'AcceptPid'},
              {tuple,646,
               [{call,646,{atom,646,self},[]},
                {tuple,646,
                 [{atom,646,accept_pending},{atom,646,nok_pending}]}]}},
             {tuple,647,[{atom,647,noreply},{var,647,'State'}]}]},
           {clause,648,[],
            [[{atom,648,true}]],
            [{match,653,
              {var,653,'OldOwner'},
              {call,653,
               {remote,653,{atom,653,erlang},{atom,653,element}},
               [{integer,653,4},{var,653,'Conn'}]}},
             {atom,34,ok},
             {call,655,
              {atom,655,exit},
              [{var,655,'OldOwner'},{atom,655,remarked}]},
             {'receive',656,
              [{clause,657,
                [{tuple,657,
                  [{atom,657,'EXIT'},{var,657,'OldOwner'},{var,657,'_'}]}],
                [],
                [{atom,658,true}]}]},
             {match,660,
              {var,660,'Owners'},
              {call,660,
               {remote,660,{atom,660,lists},{atom,660,keyreplace}},
               [{var,660,'OldOwner'},
                {integer,661,1},
                {call,662,
                 {remote,662,{atom,662,erlang},{atom,662,element}},
                 [{integer,662,8},{var,662,'State'}]},
                {tuple,663,[{var,663,'AcceptPid'},{var,663,'Node'}]}]}},
             {call,664,
              {remote,664,{atom,664,ets},{atom,664,insert}},
              [{atom,664,sys_dist},
               {call,664,
                {remote,664,{atom,664,erlang},{atom,664,setelement}},
                [{integer,664,4},{var,664,'Conn'},{var,664,'AcceptPid'}]}]},
             {op,665,'!',
              {var,665,'AcceptPid'},
              {tuple,665,
               [{call,665,{atom,665,self},[]},
                {tuple,665,
                 [{atom,665,accept_pending},{atom,665,ok_pending}]}]}},
             {match,666,
              {var,666,'State1'},
              {call,666,
               {remote,666,{atom,666,erlang},{atom,666,setelement}},
               [{integer,666,8},{var,666,'State'},{var,666,'Owners'}]}},
             {tuple,667,[{atom,667,noreply},{var,667,'State1'}]}]}]}]},
       {clause,669,
        [{cons,669,
          {match,669,
           {tuple,669,
            [{atom,669,connection},
             {var,669,'_'},
             {atom,669,up},
             {var,669,'_'},
             {var,669,'_'},
             {var,669,'_'},
             {var,669,'_'},
             {var,669,'_'}]},
           {var,669,'Conn'}},
          {nil,669}}],
        [],
        [{op,670,'!',
          {var,670,'AcceptPid'},
          {tuple,670,
           [{call,670,{atom,670,self},[]},
            {tuple,670,[{atom,670,accept_pending},{atom,670,up_pending}]}]}},
         {call,671,
          {remote,671,{atom,671,ets},{atom,671,insert}},
          [{atom,671,sys_dist},
           {call,671,
            {remote,671,{atom,671,erlang},{atom,671,setelement}},
            [{integer,671,3},
             {call,671,
              {remote,671,{atom,671,erlang},{atom,671,setelement}},
              [{integer,671,5},{var,671,'Conn'},{var,671,'AcceptPid'}]},
             {atom,672,up_pending}]}]},
         {match,673,
          {var,673,'Pend'},
          {cons,673,
           {tuple,673,[{var,673,'AcceptPid'},{var,673,'Node'}]},
           {call,673,
            {remote,673,{atom,673,erlang},{atom,673,element}},
            [{integer,673,9},{var,673,'State'}]}}},
         {tuple,674,
          [{atom,674,noreply},
           {call,674,
            {remote,674,{atom,674,erlang},{atom,674,setelement}},
            [{integer,674,9},{var,674,'State'},{var,674,'Pend'}]}]}]},
       {clause,675,
        [{cons,675,
          {tuple,675,
           [{atom,675,connection},
            {var,675,'_'},
            {atom,675,up_pending},
            {var,675,'_'},
            {var,675,'_'},
            {var,675,'_'},
            {var,675,'_'},
            {var,675,'_'}]},
          {nil,675}}],
        [],
        [{op,676,'!',
          {var,676,'AcceptPid'},
          {tuple,676,
           [{call,676,{atom,676,self},[]},
            {tuple,676,
             [{atom,676,accept_pending},{atom,676,already_pending}]}]}},
         {tuple,677,[{atom,677,noreply},{var,677,'State'}]}]},
       {clause,678,
        [{var,678,'_'}],
        [],
        [{call,679,
          {remote,679,{atom,679,ets},{atom,679,insert}},
          [{atom,679,sys_dist},
           {tuple,679,
            [{atom,679,connection},
             {var,679,'Node'},
             {atom,680,pending},
             {var,681,'AcceptPid'},
             {atom,679,undefined},
             {var,682,'Address'},
             {nil,121},
             {var,683,'Type'}]}]},
         {op,684,'!',
          {var,684,'AcceptPid'},
          {tuple,684,
           [{call,684,{atom,684,self},[]},
            {tuple,684,[{atom,684,accept_pending},{atom,684,ok}]}]}},
         {match,685,
          {var,685,'Owners'},
          {cons,685,
           {tuple,685,[{var,685,'AcceptPid'},{var,685,'Node'}]},
           {call,685,
            {remote,685,{atom,685,erlang},{atom,685,element}},
            [{integer,685,8},{var,685,'State'}]}}},
         {tuple,686,
          [{atom,686,noreply},
           {call,686,
            {remote,686,{atom,686,erlang},{atom,686,setelement}},
            [{integer,686,8},{var,686,'State'},{var,686,'Owners'}]}]}]}]}]},
   {clause,689,
    [{tuple,689,
      [{var,689,'SetupPid'},
       {tuple,689,[{atom,689,is_pending},{var,689,'Node'}]}]},
     {var,689,'State'}],
    [],
    [{match,690,
      {var,690,'Reply'},
      {call,690,
       {remote,690,{atom,690,lists},{atom,690,member}},
       [{tuple,690,[{var,690,'SetupPid'},{var,690,'Node'}]},
        {call,690,
         {remote,690,{atom,690,erlang},{atom,690,element}},
         [{integer,690,8},{var,690,'State'}]}]}},
     {op,691,'!',
      {var,691,'SetupPid'},
      {tuple,691,
       [{call,691,{atom,691,self},[]},
        {tuple,691,[{atom,691,is_pending},{var,691,'Reply'}]}]}},
     {tuple,692,[{atom,692,noreply},{var,692,'State'}]}]},
   {clause,698,
    [{tuple,698,[{atom,698,'EXIT'},{var,698,'From'},{var,698,'Reason'}]},
     {var,698,'State'}],
    [[{call,698,{atom,698,is_pid},[{var,698,'From'}]}]],
    [{call,699,
      {atom,699,verbose},
      [{tuple,699,[{atom,699,'EXIT'},{var,699,'From'},{var,699,'Reason'}]},
       {integer,699,1},
       {var,699,'State'}]},
     {call,700,
      {atom,700,handle_exit},
      [{var,700,'From'},{var,700,'Reason'},{var,700,'State'}]}]},
   {clause,705,
    [{tuple,705,
      [{var,705,'From'},
       {atom,705,registered_send},
       {var,705,'To'},
       {var,705,'Mess'}]},
     {var,705,'State'}],
    [],
    [{call,706,
      {atom,706,send},
      [{var,706,'From'},{var,706,'To'},{var,706,'Mess'}]},
     {tuple,707,[{atom,707,noreply},{var,707,'State'}]}]},
   {clause,711,
    [{tuple,711,
      [{var,711,'From'},
       {atom,711,badcookie},
       {var,711,'_To'},
       {var,711,'_Mess'}]},
     {var,711,'State'}],
    [],
    [{call,712,
      {remote,712,{atom,712,error_logger},{atom,712,error_msg}},
      [{string,712,"~n** Got OLD cookie from ~w~n"},
       {cons,713,{call,713,{atom,713,getnode},[{var,713,'From'}]},{nil,713}}]},
     {match,714,
      {tuple,714,[{var,714,'_Reply'},{var,714,'State1'}]},
      {call,714,
       {atom,714,do_disconnect},
       [{call,714,{atom,714,getnode},[{var,714,'From'}]},{var,714,'State'}]}},
     {tuple,715,[{atom,715,noreply},{var,715,'State1'}]}]},
   {clause,720,
    [{atom,720,tick},{var,720,'State'}],
    [],
    [{atom,53,ok},
     {call,722,
      {remote,722,{atom,722,lists},{atom,722,foreach}},
      [{'fun',722,
        {clauses,
         [{clause,722,
           [{tuple,722,[{var,722,'Pid'},{var,722,'_Node'}]}],
           [],
           [{op,722,'!',
             {var,722,'Pid'},
             {tuple,722,[{call,722,{atom,722,self},[]},{atom,722,tick}]}}]}]}},
       {call,723,
        {remote,723,{atom,723,erlang},{atom,723,element}},
        [{integer,723,8},{var,723,'State'}]}]},
     {tuple,724,[{atom,724,noreply},{var,724,'State'}]}]},
   {clause,726,
    [{atom,726,aux_tick},{var,726,'State'}],
    [],
    [{atom,53,ok},
     {call,728,
      {remote,728,{atom,728,lists},{atom,728,foreach}},
      [{'fun',728,
        {clauses,
         [{clause,728,
           [{tuple,728,[{var,728,'Pid'},{var,728,'_Node'}]}],
           [],
           [{op,728,'!',
             {var,728,'Pid'},
             {tuple,728,
              [{call,728,{atom,728,self},[]},{atom,728,aux_tick}]}}]}]}},
       {call,729,
        {remote,729,{atom,729,erlang},{atom,729,element}},
        [{integer,729,8},{var,729,'State'}]}]},
     {tuple,730,[{atom,730,noreply},{var,730,'State'}]}]},
   {clause,732,
    [{atom,732,transition_period_end},
     {match,735,
      {tuple,733,
       [{atom,733,state},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'},
        {tuple,733,
         [{atom,733,tick_change},
          {var,733,'Tckr'},
          {var,734,'T'},
          {var,735,'How'}]},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'},
        {var,733,'_'}]},
      {var,735,'State'}}],
    [],
    [{atom,53,ok},
     {'case',737,
      {var,737,'How'},
      [{clause,738,
        [{atom,738,shorter}],
        [],
        [{op,738,'!',
          {var,738,'Tckr'},
          {tuple,738,[{atom,738,new_ticktime},{var,738,'T'}]}},
         {atom,738,done}]},
       {clause,739,[{var,739,'_'}],[],[{atom,739,done}]}]},
     {tuple,741,
      [{atom,741,noreply},
       {call,741,
        {remote,741,{atom,741,erlang},{atom,741,setelement}},
        [{integer,741,5},
         {var,741,'State'},
         {tuple,741,[{atom,741,tick},{var,741,'Tckr'},{var,741,'T'}]}]}]}]},
   {clause,743,
    [{var,743,'X'},{var,743,'State'}],
    [],
    [{call,744,
      {atom,744,error_msg},
      [{string,744,"Net kernel got ~w~n"},{cons,744,{var,744,'X'},{nil,744}}]},
     {tuple,745,[{atom,745,noreply},{var,745,'State'}]}]}]},
 {function,761,handle_exit,3,
  [{clause,761,
    [{var,761,'Pid'},{var,761,'Reason'},{var,761,'State'}],
    [],
    [{'catch',762,
      {call,762,
       {atom,762,do_handle_exit},
       [{var,762,'Pid'},{var,762,'Reason'},{var,762,'State'}]}}]}]},
 {function,764,do_handle_exit,3,
  [{clause,764,
    [{var,764,'Pid'},{var,764,'Reason'},{var,764,'State'}],
    [],
    [{call,765,{atom,765,listen_exit},[{var,765,'Pid'},{var,765,'State'}]},
     {call,766,{atom,766,accept_exit},[{var,766,'Pid'},{var,766,'State'}]},
     {call,767,
      {atom,767,conn_own_exit},
      [{var,767,'Pid'},{var,767,'Reason'},{var,767,'State'}]},
     {call,768,
      {atom,768,pending_own_exit},
      [{var,768,'Pid'},{var,768,'State'}]},
     {call,769,{atom,769,ticker_exit},[{var,769,'Pid'},{var,769,'State'}]},
     {tuple,770,[{atom,770,noreply},{var,770,'State'}]}]}]},
 {function,772,listen_exit,2,
  [{clause,772,
    [{var,772,'Pid'},{var,772,'State'}],
    [],
    [{'case',773,
      {call,773,
       {remote,773,{atom,773,lists},{atom,773,keymember}},
       [{var,773,'Pid'},
        {integer,112,2},
        {call,773,
         {remote,773,{atom,773,erlang},{atom,773,element}},
         [{integer,773,10},{var,773,'State'}]}]},
      [{clause,774,
        [{atom,774,true}],
        [],
        [{call,775,
          {atom,775,error_msg},
          [{string,775,"** Netkernel terminating ... **\n"},{nil,775}]},
         {call,776,
          {atom,776,throw},
          [{tuple,776,
            [{atom,776,stop},{atom,776,no_network},{var,776,'State'}]}]}]},
       {clause,777,[{atom,777,false}],[],[{atom,778,false}]}]}]}]},
 {function,781,accept_exit,2,
  [{clause,781,
    [{var,781,'Pid'},{var,781,'State'}],
    [],
    [{match,782,
      {var,782,'Listen'},
      {call,782,
       {remote,782,{atom,782,erlang},{atom,782,element}},
       [{integer,782,10},{var,782,'State'}]}},
     {'case',783,
      {call,783,
       {remote,783,{atom,783,lists},{atom,783,keysearch}},
       [{var,783,'Pid'},{integer,113,3},{var,783,'Listen'}]},
      [{clause,784,
        [{tuple,784,[{atom,784,value},{var,784,'ListenR'}]}],
        [],
        [{match,785,
          {var,785,'ListenS'},
          {call,785,
           {remote,785,{atom,785,erlang},{atom,785,element}},
           [{integer,785,2},{var,785,'ListenR'}]}},
         {match,786,
          {var,786,'Mod'},
          {call,786,
           {remote,786,{atom,786,erlang},{atom,786,element}},
           [{integer,786,5},{var,786,'ListenR'}]}},
         {match,787,
          {var,787,'AcceptPid'},
          {call,787,
           {remote,787,{var,787,'Mod'},{atom,787,accept}},
           [{var,787,'ListenS'}]}},
         {match,788,
          {var,788,'L'},
          {call,788,
           {remote,788,{atom,788,lists},{atom,788,keyreplace}},
           [{var,788,'Pid'},
            {integer,113,3},
            {var,788,'Listen'},
            {call,789,
             {remote,789,{atom,789,erlang},{atom,789,setelement}},
             [{integer,789,3},{var,789,'ListenR'},{var,789,'AcceptPid'}]}]}},
         {call,790,
          {atom,790,throw},
          [{tuple,790,
            [{atom,790,noreply},
             {call,790,
              {remote,790,{atom,790,erlang},{atom,790,setelement}},
              [{integer,790,10},{var,790,'State'},{var,790,'L'}]}]}]}]},
       {clause,791,[{var,791,'_'}],[],[{atom,792,false}]}]}]}]},
 {function,795,conn_own_exit,3,
  [{clause,795,
    [{var,795,'Pid'},{var,795,'Reason'},{var,795,'State'}],
    [],
    [{match,796,
      {var,796,'Owners'},
      {call,796,
       {remote,796,{atom,796,erlang},{atom,796,element}},
       [{integer,796,8},{var,796,'State'}]}},
     {'case',797,
      {call,797,
       {remote,797,{atom,797,lists},{atom,797,keysearch}},
       [{var,797,'Pid'},{integer,797,1},{var,797,'Owners'}]},
      [{clause,798,
        [{tuple,798,
          [{atom,798,value},{tuple,798,[{var,798,'Pid'},{var,798,'Node'}]}]}],
        [],
        [{call,799,
          {atom,799,throw},
          [{tuple,799,
            [{atom,799,noreply},
             {call,799,
              {atom,799,nodedown},
              [{var,799,'Pid'},
               {var,799,'Node'},
               {var,799,'Reason'},
               {var,799,'State'}]}]}]}]},
       {clause,800,[{var,800,'_'}],[],[{atom,801,false}]}]}]}]},
 {function,804,pending_own_exit,2,
  [{clause,804,
    [{var,804,'Pid'},{var,804,'State'}],
    [],
    [{match,805,
      {var,805,'Pend'},
      {call,805,
       {remote,805,{atom,805,erlang},{atom,805,element}},
       [{integer,805,9},{var,805,'State'}]}},
     {'case',806,
      {call,806,
       {remote,806,{atom,806,lists},{atom,806,keysearch}},
       [{var,806,'Pid'},{integer,806,1},{var,806,'Pend'}]},
      [{clause,807,
        [{tuple,807,
          [{atom,807,value},{tuple,807,[{var,807,'Pid'},{var,807,'Node'}]}]}],
        [],
        [{match,808,
          {var,808,'NewPend'},
          {call,808,
           {remote,808,{atom,808,lists},{atom,808,keydelete}},
           [{var,808,'Pid'},{integer,808,1},{var,808,'Pend'}]}},
         {match,809,
          {var,809,'State1'},
          {call,809,
           {remote,809,{atom,809,erlang},{atom,809,setelement}},
           [{integer,809,9},{var,809,'State'},{var,809,'NewPend'}]}},
         {'case',810,
          {call,810,{atom,810,get_conn},[{var,810,'Node'}]},
          [{clause,811,
            [{tuple,811,[{atom,811,ok},{var,811,'Conn'}]}],
            [[{op,811,'=:=',
               {call,811,
                {remote,811,{atom,811,erlang},{atom,811,element}},
                [{integer,811,3},{var,811,'Conn'}]},
               {atom,811,up_pending}}]],
            [{call,812,
              {atom,812,reply_waiting},
              [{var,812,'Node'},
               {call,812,
                {remote,812,{atom,812,erlang},{atom,812,element}},
                [{integer,812,7},{var,812,'Conn'}]},
               {atom,812,true}]},
             {match,813,
              {var,813,'Conn1'},
              {call,813,
               {remote,813,{atom,813,erlang},{atom,813,setelement}},
               [{integer,813,5},
                {call,813,
                 {remote,813,{atom,813,erlang},{atom,813,setelement}},
                 [{integer,813,7},
                  {call,813,
                   {remote,813,{atom,813,erlang},{atom,813,setelement}},
                   [{integer,813,3},{var,813,'Conn'},{atom,813,up}]},
                  {nil,814}]},
                {atom,815,undefined}]}},
             {call,816,
              {remote,816,{atom,816,ets},{atom,816,insert}},
              [{atom,816,sys_dist},{var,816,'Conn1'}]}]},
           {clause,817,[{var,817,'_'}],[],[{atom,818,ok}]}]},
         {call,820,
          {atom,820,throw},
          [{tuple,820,[{atom,820,noreply},{var,820,'State1'}]}]}]},
       {clause,821,[{var,821,'_'}],[],[{atom,822,false}]}]}]}]},
 {function,825,ticker_exit,2,
  [{clause,825,
    [{var,825,'Pid'},
     {match,825,
      {tuple,825,
       [{atom,825,state},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'},
        {match,825,
         {tuple,825,[{atom,825,tick},{var,825,'Pid'},{var,825,'T'}]},
         {var,825,'Tck'}},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'},
        {var,825,'_'}]},
      {var,825,'State'}}],
    [],
    [{match,826,
      {var,826,'Tckr'},
      {call,826,{atom,826,restart_ticker},[{var,826,'T'}]}},
     {call,827,
      {atom,827,throw},
      [{tuple,827,
        [{atom,827,noreply},
         {call,827,
          {remote,827,{atom,827,erlang},{atom,827,setelement}},
          [{integer,827,5},
           {var,827,'State'},
           {call,827,
            {remote,827,{atom,827,erlang},{atom,827,setelement}},
            [{integer,827,2},{var,827,'Tck'},{var,827,'Tckr'}]}]}]}]}]},
   {clause,828,
    [{var,828,'Pid'},
     {match,829,
      {tuple,828,
       [{atom,828,state},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'},
        {match,829,
         {tuple,828,
          [{atom,828,tick_change},
           {var,828,'Pid'},
           {var,829,'T'},
           {var,828,'_'}]},
         {var,829,'TckCng'}},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'},
        {var,828,'_'}]},
      {var,829,'State'}}],
    [],
    [{match,830,
      {var,830,'Tckr'},
      {call,830,{atom,830,restart_ticker},[{var,830,'T'}]}},
     {call,831,
      {atom,831,throw},
      [{tuple,831,
        [{atom,831,noreply},
         {call,831,
          {remote,831,{atom,831,erlang},{atom,831,setelement}},
          [{integer,831,5},
           {var,831,'State'},
           {call,831,
            {remote,831,{atom,831,erlang},{atom,831,setelement}},
            [{integer,831,2},{var,831,'TckCng'},{var,831,'Tckr'}]}]}]}]}]},
   {clause,832,[{var,832,'_'},{var,832,'_'}],[],[{atom,833,false}]}]},
 {function,840,nodedown,4,
  [{clause,840,
    [{var,840,'Owner'},{var,840,'Node'},{var,840,'Reason'},{var,840,'State'}],
    [],
    [{'case',841,
      {call,841,{atom,841,get_conn},[{var,841,'Node'}]},
      [{clause,842,
        [{tuple,842,[{atom,842,ok},{var,842,'Conn'}]}],
        [],
        [{call,843,
          {atom,843,nodedown},
          [{var,843,'Conn'},
           {var,843,'Owner'},
           {var,843,'Node'},
           {var,843,'Reason'},
           {call,843,
            {remote,843,{atom,843,erlang},{atom,843,element}},
            [{integer,843,8},{var,843,'Conn'}]},
           {var,843,'State'}]}]},
       {clause,844,[{var,844,'_'}],[],[{var,845,'State'}]}]}]}]},
 {function,848,get_conn,1,
  [{clause,848,
    [{var,848,'Node'}],
    [],
    [{'case',849,
      {call,849,
       {remote,849,{atom,849,ets},{atom,849,lookup}},
       [{atom,849,sys_dist},{var,849,'Node'}]},
      [{clause,850,
        [{cons,850,
          {match,850,
           {var,850,'Conn'},
           {tuple,850,
            [{atom,850,connection},
             {var,850,'_'},
             {var,850,'_'},
             {var,850,'_'},
             {var,850,'_'},
             {var,850,'_'},
             {var,850,'_'},
             {var,850,'_'}]}},
          {nil,850}}],
        [],
        [{tuple,850,[{atom,850,ok},{var,850,'Conn'}]}]},
       {clause,851,[{var,851,'_'}],[],[{atom,851,error}]}]}]}]},
 {function,854,nodedown,6,
  [{clause,854,
    [{var,854,'Conn'},
     {var,854,'Owner'},
     {var,854,'Node'},
     {var,854,'Reason'},
     {var,854,'Type'},
     {var,854,'OldState'}],
    [],
    [{match,855,
      {var,855,'Owners'},
      {call,855,
       {remote,855,{atom,855,lists},{atom,855,keydelete}},
       [{var,855,'Owner'},
        {integer,855,1},
        {call,855,
         {remote,855,{atom,855,erlang},{atom,855,element}},
         [{integer,855,8},{var,855,'OldState'}]}]}},
     {match,856,
      {var,856,'State'},
      {call,856,
       {remote,856,{atom,856,erlang},{atom,856,setelement}},
       [{integer,856,8},{var,856,'OldState'},{var,856,'Owners'}]}},
     {'case',857,
      {call,857,
       {remote,857,{atom,857,erlang},{atom,857,element}},
       [{integer,857,3},{var,857,'Conn'}]},
      [{clause,858,
        [{atom,858,pending}],
        [[{op,858,'=:=',
           {call,858,
            {remote,858,{atom,858,erlang},{atom,858,element}},
            [{integer,858,4},{var,858,'Conn'}]},
           {var,858,'Owner'}}]],
        [{call,859,
          {atom,859,pending_nodedown},
          [{var,859,'Conn'},
           {var,859,'Node'},
           {var,859,'Type'},
           {var,859,'State'}]}]},
       {clause,860,
        [{atom,860,up}],
        [[{op,860,'=:=',
           {call,860,
            {remote,860,{atom,860,erlang},{atom,860,element}},
            [{integer,860,4},{var,860,'Conn'}]},
           {var,860,'Owner'}}]],
        [{call,861,
          {atom,861,up_nodedown},
          [{var,861,'Conn'},
           {var,861,'Node'},
           {var,861,'Reason'},
           {var,861,'Type'},
           {var,861,'State'}]}]},
       {clause,862,
        [{atom,862,up_pending}],
        [[{op,862,'=:=',
           {call,862,
            {remote,862,{atom,862,erlang},{atom,862,element}},
            [{integer,862,4},{var,862,'Conn'}]},
           {var,862,'Owner'}}]],
        [{call,863,
          {atom,863,up_pending_nodedown},
          [{var,863,'Conn'},
           {var,863,'Node'},
           {var,863,'Reason'},
           {var,863,'Type'},
           {var,863,'State'}]}]},
       {clause,864,[{var,864,'_'}],[],[{var,865,'OldState'}]}]}]}]},
 {function,868,pending_nodedown,4,
  [{clause,868,
    [{var,868,'Conn'},{var,868,'Node'},{var,868,'Type'},{var,868,'State'}],
    [],
    [{call,872,
      {remote,872,{atom,872,ets},{atom,872,delete}},
      [{atom,872,sys_dist},{var,872,'Node'}]},
     {call,873,
      {atom,873,reply_waiting},
      [{var,873,'Node'},
       {call,873,
        {remote,873,{atom,873,erlang},{atom,873,element}},
        [{integer,873,7},{var,873,'Conn'}]},
       {atom,873,false}]},
     {'case',874,
      {var,874,'Type'},
      [{clause,875,
        [{atom,875,normal}],
        [],
        [{call,24,
          {atom,24,verbose},
          [{tuple,24,
            [{atom,-1,net_kernel},
             {integer,24,24},
             {atom,24,nodedown},
             {var,876,'Node'}]},
           {integer,24,1},
           {var,876,'State'}]}]},
       {clause,877,[{var,877,'_'}],[],[{atom,878,ok}]}]},
     {var,880,'State'}]}]},
 {function,882,up_pending_nodedown,5,
  [{clause,882,
    [{var,882,'Conn'},
     {var,882,'Node'},
     {var,882,'_Reason'},
     {var,882,'_Type'},
     {var,882,'State'}],
    [],
    [{match,883,
      {var,883,'AcceptPid'},
      {call,883,
       {remote,883,{atom,883,erlang},{atom,883,element}},
       [{integer,883,5},{var,883,'Conn'}]}},
     {match,884,
      {var,884,'Owners'},
      {call,884,
       {remote,884,{atom,884,erlang},{atom,884,element}},
       [{integer,884,8},{var,884,'State'}]}},
     {match,885,
      {var,885,'Pend'},
      {call,885,
       {remote,885,{atom,885,lists},{atom,885,keydelete}},
       [{var,885,'AcceptPid'},
        {integer,885,1},
        {call,885,
         {remote,885,{atom,885,erlang},{atom,885,element}},
         [{integer,885,9},{var,885,'State'}]}]}},
     {match,886,
      {var,886,'Conn1'},
      {call,886,
       {remote,886,{atom,886,erlang},{atom,886,setelement}},
       [{integer,886,3},
        {call,886,
         {remote,886,{atom,886,erlang},{atom,886,setelement}},
         [{integer,886,5},
          {call,886,
           {remote,886,{atom,886,erlang},{atom,886,setelement}},
           [{integer,886,4},{var,886,'Conn'},{var,886,'AcceptPid'}]},
          {atom,887,undefined}]},
        {atom,888,pending}]}},
     {call,889,
      {remote,889,{atom,889,ets},{atom,889,insert}},
      [{atom,889,sys_dist},{var,889,'Conn1'}]},
     {op,890,'!',
      {var,890,'AcceptPid'},
      {tuple,890,[{call,890,{atom,890,self},[]},{atom,890,pending}]}},
     {call,891,
      {remote,891,{atom,891,erlang},{atom,891,setelement}},
      [{integer,891,9},
       {call,891,
        {remote,891,{atom,891,erlang},{atom,891,setelement}},
        [{integer,891,8},
         {var,891,'State'},
         {cons,891,
          {tuple,891,[{var,891,'AcceptPid'},{var,891,'Node'}]},
          {var,891,'Owners'}}]},
       {var,891,'Pend'}]}]}]},
 {function,894,up_nodedown,5,
  [{clause,894,
    [{var,894,'_Conn'},
     {var,894,'Node'},
     {var,894,'_Reason'},
     {var,894,'Type'},
     {var,894,'State'}],
    [],
    [{call,895,{atom,895,mark_sys_dist_nodedown},[{var,895,'Node'}]},
     {'case',896,
      {var,896,'Type'},
      [{clause,897,
        [{atom,897,normal}],
        [],
        [{call,24,
          {atom,24,verbose},
          [{tuple,24,
            [{atom,-1,net_kernel},
             {integer,24,24},
             {atom,24,nodedown},
             {var,897,'Node'}]},
           {integer,24,1},
           {var,897,'State'}]}]},
       {clause,898,[{var,898,'_'}],[],[{atom,898,ok}]}]},
     {var,900,'State'}]}]},
 {function,902,mark_sys_dist_nodedown,1,
  [{clause,902,
    [{var,902,'Node'}],
    [],
    [{'case',903,
      {call,903,
       {remote,903,{atom,903,application},{atom,903,get_env}},
       [{atom,903,kernel},{atom,903,dist_auto_connect}]},
      [{clause,904,
        [{tuple,904,[{atom,904,ok},{atom,904,once}]}],
        [],
        [{call,905,
          {remote,905,{atom,905,ets},{atom,905,insert}},
          [{atom,905,sys_dist},
           {tuple,905,[{atom,905,barred_connection},{var,905,'Node'}]}]}]},
       {clause,906,
        [{var,906,'_'}],
        [],
        [{call,907,
          {remote,907,{atom,907,ets},{atom,907,delete}},
          [{atom,907,sys_dist},{var,907,'Node'}]}]}]}]}]},
 {function,919,check_opt,2,
  [{clause,919,
    [{var,919,'Opt'},{var,919,'Opts'}],
    [],
    [{call,920,
      {atom,920,check_opt},
      [{var,920,'Opt'},{var,920,'Opts'},{atom,920,false},{nil,920}]}]}]},
 {function,922,check_opt,4,
  [{clause,922,
    [{var,922,'_Opt'},{nil,922},{atom,922,false},{var,922,'_OtherOpts'}],
    [],
    [{atom,923,false}]},
   {clause,924,
    [{var,924,'_Opt'},
     {nil,924},
     {tuple,924,[{atom,924,true},{var,924,'ORes'}]},
     {var,924,'OtherOpts'}],
    [],
    [{tuple,925,[{atom,925,true},{var,925,'ORes'},{var,925,'OtherOpts'}]}]},
   {clause,926,
    [{var,926,'Opt'},
     {cons,926,{var,926,'Opt'},{var,926,'RestOpts'}},
     {atom,926,false},
     {var,926,'OtherOpts'}],
    [],
    [{call,927,
      {atom,927,check_opt},
      [{var,927,'Opt'},
       {var,927,'RestOpts'},
       {tuple,927,[{atom,927,true},{var,927,'Opt'}]},
       {var,927,'OtherOpts'}]}]},
   {clause,928,
    [{var,928,'Opt'},
     {cons,928,{var,928,'Opt'},{var,928,'RestOpts'}},
     {match,928,
      {tuple,928,[{atom,928,true},{var,928,'Opt'}]},
      {var,928,'ORes'}},
     {var,928,'OtherOpts'}],
    [],
    [{call,929,
      {atom,929,check_opt},
      [{var,929,'Opt'},
       {var,929,'RestOpts'},
       {var,929,'ORes'},
       {var,929,'OtherOpts'}]}]},
   {clause,930,
    [{match,930,
      {tuple,930,[{var,930,'Opt'},{atom,930,value}]},
      {var,930,'TOpt'}},
     {cons,931,
      {match,931,
       {tuple,931,[{var,931,'Opt'},{var,931,'_Val'}]},
       {var,931,'ORes'}},
      {var,931,'RestOpts'}},
     {atom,932,false},
     {var,933,'OtherOpts'}],
    [],
    [{call,934,
      {atom,934,check_opt},
      [{var,934,'TOpt'},
       {var,934,'RestOpts'},
       {tuple,934,[{atom,934,true},{var,934,'ORes'}]},
       {var,934,'OtherOpts'}]}]},
   {clause,935,
    [{match,935,
      {tuple,935,[{var,935,'Opt'},{atom,935,value}]},
      {var,935,'TOpt'}},
     {cons,936,
      {match,936,
       {tuple,936,[{var,936,'Opt'},{var,936,'_Val'}]},
       {var,936,'ORes'}},
      {var,936,'RestOpts'}},
     {match,937,
      {tuple,937,[{atom,937,true},{var,937,'ORes'}]},
      {var,937,'TORes'}},
     {var,938,'OtherOpts'}],
    [],
    [{call,939,
      {atom,939,check_opt},
      [{var,939,'TOpt'},
       {var,939,'RestOpts'},
       {var,939,'TORes'},
       {var,939,'OtherOpts'}]}]},
   {clause,940,
    [{tuple,940,[{var,940,'Opt'},{atom,940,value}]},
     {cons,941,
      {match,941,
       {tuple,941,[{var,941,'Opt'},{var,941,'_Val'}]},
       {var,941,'ORes1'}},
      {var,941,'_RestOpts'}},
     {tuple,942,
      [{atom,942,true},
       {match,942,
        {tuple,942,[{var,942,'Opt'},{var,942,'_OtherVal'}]},
        {var,942,'ORes2'}}]},
     {var,943,'_OtherOpts'}],
    [],
    [{call,944,
      {atom,944,throw},
      [{tuple,944,
        [{atom,944,error},
         {tuple,944,
          [{atom,944,option_value_mismatch},
           {cons,944,
            {var,944,'ORes1'},
            {cons,944,{var,944,'ORes2'},{nil,944}}}]}]}]}]},
   {clause,945,
    [{var,945,'Opt'},
     {cons,945,{var,945,'OtherOpt'},{var,945,'RestOpts'}},
     {var,945,'TORes'},
     {var,945,'OtherOpts'}],
    [],
    [{call,946,
      {atom,946,check_opt},
      [{var,946,'Opt'},
       {var,946,'RestOpts'},
       {var,946,'TORes'},
       {cons,946,{var,946,'OtherOpt'},{var,946,'OtherOpts'}}]}]}]},
 {function,948,check_options,1,
  [{clause,948,
    [{var,948,'Opts'}],
    [[{call,948,{atom,948,is_list},[{var,948,'Opts'}]}]],
    [{match,949,
      {var,949,'RestOpts1'},
      {'case',949,
       {call,949,
        {atom,949,check_opt},
        [{tuple,949,[{atom,949,node_type},{atom,949,value}]},
         {var,949,'Opts'}]},
       [{clause,950,
         [{tuple,950,
           [{atom,950,true},
            {tuple,950,[{atom,950,node_type},{var,950,'Type'}]},
            {var,950,'RO1'}]}],
         [[{op,950,'=:=',{var,950,'Type'},{atom,950,visible}}],
          [{op,951,'=:=',{var,951,'Type'},{atom,951,hidden}}],
          [{op,952,'=:=',{var,952,'Type'},{atom,952,all}}]],
         [{var,953,'RO1'}]},
        {clause,954,
         [{tuple,954,
           [{atom,954,true},
            {match,954,
             {tuple,954,[{atom,954,node_type},{var,954,'_Type'}]},
             {var,954,'Opt'}},
            {var,954,'_RO1'}]}],
         [],
         [{call,955,
           {atom,955,throw},
           [{tuple,955,
             [{atom,955,error},
              {tuple,955,[{atom,955,bad_option_value},{var,955,'Opt'}]}]}]}]},
        {clause,956,[{atom,956,false}],[],[{var,957,'Opts'}]}]}},
     {match,959,
      {var,959,'RestOpts2'},
      {'case',959,
       {call,959,
        {atom,959,check_opt},
        [{atom,959,nodedown_reason},{var,959,'RestOpts1'}]},
       [{clause,960,
         [{tuple,960,
           [{atom,960,true},{atom,960,nodedown_reason},{var,960,'RO2'}]}],
         [],
         [{var,961,'RO2'}]},
        {clause,962,[{atom,962,false}],[],[{var,963,'RestOpts1'}]}]}},
     {'case',965,
      {var,965,'RestOpts2'},
      [{clause,966,
        [{nil,966}],
        [],
        [{tuple,969,[{atom,969,error},{atom,969,internal_error}]}]},
       {clause,970,
        [{var,970,'_'}],
        [],
        [{tuple,971,
          [{atom,971,error},
           {tuple,971,
            [{atom,971,unknown_options},{var,971,'RestOpts2'}]}]}]}]}]},
   {clause,973,
    [{var,973,'Opts'}],
    [],
    [{tuple,974,
      [{atom,974,error},
       {tuple,974,[{atom,974,options_not_a_list},{var,974,'Opts'}]}]}]}]},
 {function,976,mk_monitor_nodes_error,2,
  [{clause,976,
    [{var,976,'Flag'},{var,976,'_Opts'}],
    [[{op,976,'=/=',{var,976,'Flag'},{atom,976,true}},
      {op,976,'=/=',{var,976,'Flag'},{atom,976,false}}]],
    [{atom,977,error}]},
   {clause,978,
    [{var,978,'_Flag'},{var,978,'Opts'}],
    [],
    [{'case',979,
      {'catch',979,{call,979,{atom,979,check_options},[{var,979,'Opts'}]}},
      [{clause,980,
        [{match,980,
          {tuple,980,[{atom,980,error},{var,980,'_'}]},
          {var,980,'Error'}}],
        [],
        [{var,981,'Error'}]},
       {clause,982,
        [{var,982,'UnexpectedError'}],
        [],
        [{tuple,983,
          [{atom,983,error},
           {tuple,983,
            [{atom,983,internal_error},{var,983,'UnexpectedError'}]}]}]}]}]}]},
 {function,988,do_disconnect,2,
  [{clause,988,
    [{var,988,'Node'},{var,988,'State'}],
    [],
    [{'case',989,
      {call,989,
       {remote,989,{atom,989,ets},{atom,989,lookup}},
       [{atom,989,sys_dist},{var,989,'Node'}]},
      [{clause,990,
        [{cons,990,{var,990,'Conn'},{nil,990}}],
        [[{op,990,'=:=',
           {call,990,
            {remote,990,{atom,990,erlang},{atom,990,element}},
            [{integer,990,3},{var,990,'Conn'}]},
           {atom,990,up}}]],
        [{call,991,
          {atom,991,disconnect_pid},
          [{call,991,
            {remote,991,{atom,991,erlang},{atom,991,element}},
            [{integer,991,4},{var,991,'Conn'}]},
           {var,991,'State'}]}]},
       {clause,992,
        [{cons,992,{var,992,'Conn'},{nil,992}}],
        [[{op,992,'=:=',
           {call,992,
            {remote,992,{atom,992,erlang},{atom,992,element}},
            [{integer,992,3},{var,992,'Conn'}]},
           {atom,992,up_pending}}]],
        [{call,993,
          {atom,993,disconnect_pid},
          [{call,993,
            {remote,993,{atom,993,erlang},{atom,993,element}},
            [{integer,993,4},{var,993,'Conn'}]},
           {var,993,'State'}]}]},
       {clause,994,
        [{var,994,'_'}],
        [],
        [{tuple,995,[{atom,995,false},{var,995,'State'}]}]}]}]}]},
 {function,999,disconnect_pid,2,
  [{clause,999,
    [{var,999,'Pid'},{var,999,'State'}],
    [],
    [{call,1000,{atom,1000,exit},[{var,1000,'Pid'},{atom,1000,disconnect}]},
     {'receive',1002,
      [{clause,1003,
        [{tuple,1003,
          [{atom,1003,'EXIT'},{var,1003,'Pid'},{var,1003,'Reason'}]}],
        [],
        [{match,1004,
          {tuple,1004,[{var,1004,'_'},{var,1004,'State1'}]},
          {call,1004,
           {atom,1004,handle_exit},
           [{var,1004,'Pid'},{var,1004,'Reason'},{var,1004,'State'}]}},
         {tuple,1005,[{atom,1005,true},{var,1005,'State1'}]}]}]}]}]},
 {function,1011,get_nodes,1,
  [{clause,1011,
    [{var,1011,'Which'}],
    [],
    [{call,1012,
      {atom,1012,get_nodes},
      [{call,1012,
        {remote,1012,{atom,1012,ets},{atom,1012,first}},
        [{atom,1012,sys_dist}]},
       {var,1012,'Which'}]}]}]},
 {function,1014,get_nodes,2,
  [{clause,1014,[{atom,1014,'$end_of_table'},{var,1014,'_'}],[],[{nil,1015}]},
   {clause,1016,
    [{var,1016,'Key'},{var,1016,'Which'}],
    [],
    [{'case',1017,
      {call,1017,
       {remote,1017,{atom,1017,ets},{atom,1017,lookup}},
       [{atom,1017,sys_dist},{var,1017,'Key'}]},
      [{clause,1018,
        [{cons,1018,
          {match,1018,
           {var,1018,'Conn'},
           {tuple,1018,
            [{atom,1018,connection},
             {var,1018,'_'},
             {atom,1018,up},
             {var,1018,'_'},
             {var,1018,'_'},
             {var,1018,'_'},
             {var,1018,'_'},
             {var,1018,'_'}]}},
          {nil,1018}}],
        [],
        [{cons,1019,
          {call,1019,
           {remote,1019,{atom,1019,erlang},{atom,1019,element}},
           [{integer,1019,2},{var,1019,'Conn'}]},
          {call,1019,
           {atom,1019,get_nodes},
           [{call,1019,
             {remote,1019,{atom,1019,ets},{atom,1019,next}},
             [{atom,1019,sys_dist},{var,1019,'Key'}]},
            {var,1020,'Which'}]}}]},
       {clause,1021,
        [{cons,1021,
          {match,1021,
           {var,1021,'Conn'},
           {tuple,1021,
            [{atom,1021,connection},
             {var,1021,'_'},
             {var,1021,'_'},
             {var,1021,'_'},
             {var,1021,'_'},
             {var,1021,'_'},
             {var,1021,'_'},
             {var,1021,'_'}]}},
          {nil,1021}}],
        [[{op,1021,'=:=',{var,1021,'Which'},{atom,1021,all}}]],
        [{cons,1022,
          {call,1022,
           {remote,1022,{atom,1022,erlang},{atom,1022,element}},
           [{integer,1022,2},{var,1022,'Conn'}]},
          {call,1022,
           {atom,1022,get_nodes},
           [{call,1022,
             {remote,1022,{atom,1022,ets},{atom,1022,next}},
             [{atom,1022,sys_dist},{var,1022,'Key'}]},
            {var,1023,'Which'}]}}]},
       {clause,1024,
        [{var,1024,'_'}],
        [],
        [{call,1025,
          {atom,1025,get_nodes},
          [{call,1025,
            {remote,1025,{atom,1025,ets},{atom,1025,next}},
            [{atom,1025,sys_dist},{var,1025,'Key'}]},
           {var,1025,'Which'}]}]}]}]}]},
 {function,1029,get_up_nodes,0,
  [{clause,1029,[],[],
    [{call,1030,
      {atom,1030,get_up_nodes},
      [{call,1030,
        {remote,1030,{atom,1030,ets},{atom,1030,first}},
        [{atom,1030,sys_dist}]}]}]}]},
 {function,1032,get_up_nodes,1,
  [{clause,1032,[{atom,1032,'$end_of_table'}],[],[{nil,1032}]},
   {clause,1033,
    [{var,1033,'Key'}],
    [],
    [{'case',1034,
      {call,1034,
       {remote,1034,{atom,1034,ets},{atom,1034,lookup}},
       [{atom,1034,sys_dist},{var,1034,'Key'}]},
      [{clause,1035,
        [{cons,1035,
          {tuple,1035,
           [{atom,1035,connection},
            {var,1035,'Node'},
            {atom,1035,up},
            {var,1035,'_'},
            {var,1035,'_'},
            {var,1035,'_'},
            {var,1035,'_'},
            {var,1035,'Type'}]},
          {nil,1035}}],
        [],
        [{cons,1036,
          {tuple,1036,[{var,1036,'Node'},{var,1036,'Type'}]},
          {call,1036,
           {atom,1036,get_up_nodes},
           [{call,1036,
             {remote,1036,{atom,1036,ets},{atom,1036,next}},
             [{atom,1036,sys_dist},{var,1036,'Key'}]}]}}]},
       {clause,1037,
        [{var,1037,'_'}],
        [],
        [{call,1038,
          {atom,1038,get_up_nodes},
          [{call,1038,
            {remote,1038,{atom,1038,ets},{atom,1038,next}},
            [{atom,1038,sys_dist},{var,1038,'Key'}]}]}]}]}]}]},
 {function,1041,ticker,2,
  [{clause,1041,
    [{var,1041,'Kernel'},{var,1041,'Tick'}],
    [[{call,1041,{atom,1041,is_integer},[{var,1041,'Tick'}]}]],
    [{call,1042,
      {atom,1042,process_flag},
      [{atom,1042,priority},{atom,1042,max}]},
     {atom,53,ok},
     {call,1044,
      {atom,1044,ticker_loop},
      [{var,1044,'Kernel'},{var,1044,'Tick'}]}]}]},
 {function,1046,to_integer,1,
  [{clause,1046,
    [{var,1046,'T'}],
    [[{call,1046,{atom,1046,is_integer},[{var,1046,'T'}]}]],
    [{var,1046,'T'}]},
   {clause,1047,
    [{var,1047,'T'}],
    [[{call,1047,{atom,1047,is_atom},[{var,1047,'T'}]}]],
    [{call,1048,
      {atom,1048,list_to_integer},
      [{call,1048,{atom,1048,atom_to_list},[{var,1048,'T'}]}]}]},
   {clause,1049,
    [{var,1049,'T'}],
    [[{call,1049,{atom,1049,is_list},[{var,1049,'T'}]}]],
    [{call,1050,{atom,1050,list_to_integer},[{var,1050,'T'}]}]}]},
 {function,1052,ticker_loop,2,
  [{clause,1052,
    [{var,1052,'Kernel'},{var,1052,'Tick'}],
    [],
    [{'receive',1053,
      [{clause,1054,
        [{tuple,1054,[{atom,1054,new_ticktime},{var,1054,'NewTick'}]}],
        [],
        [{atom,53,ok},
         {call,1056,
          {remote,1056,{atom,-1,net_kernel},{atom,1056,ticker_loop}},
          [{var,1056,'Kernel'},{var,1056,'NewTick'}]}]}],
      {var,1057,'Tick'},
      [{op,1058,'!',{var,1058,'Kernel'},{atom,1058,tick}},
       {call,1059,
        {remote,1059,{atom,-1,net_kernel},{atom,1059,ticker_loop}},
        [{var,1059,'Kernel'},{var,1059,'Tick'}]}]}]}]},
 {function,1062,start_aux_ticker,3,
  [{clause,1062,
    [{var,1062,'NewTick'},{var,1062,'OldTick'},{var,1062,'TransitionPeriod'}],
    [],
    [{call,1063,
      {atom,1063,spawn_link},
      [{atom,-1,net_kernel},
       {atom,1063,aux_ticker},
       {cons,1064,
        {call,1064,{atom,1064,self},[]},
        {cons,1064,
         {var,1064,'NewTick'},
         {cons,1064,
          {var,1064,'OldTick'},
          {cons,1064,{var,1064,'TransitionPeriod'},{nil,1064}}}}}]}]}]},
 {function,1066,aux_ticker,4,
  [{clause,1066,
    [{var,1066,'NetKernel'},
     {var,1066,'NewTick'},
     {var,1066,'OldTick'},
     {var,1066,'TransitionPeriod'}],
    [],
    [{call,1067,
      {atom,1067,process_flag},
      [{atom,1067,priority},{atom,1067,max}]},
     {atom,53,ok},
     {match,1069,
      {var,1069,'TickInterval'},
      {'case',1069,
       {op,1069,'>',{var,1069,'NewTick'},{var,1069,'OldTick'}},
       [{clause,1070,[{atom,1070,true}],[],[{var,1070,'OldTick'}]},
        {clause,1071,[{atom,1071,false}],[],[{var,1071,'NewTick'}]}]}},
     {match,1073,
      {var,1073,'NoOfTicks'},
      {'case',1073,
       {op,1073,'>',{var,1073,'TransitionPeriod'},{integer,1073,0}},
       [{clause,1074,
         [{atom,1074,true}],
         [],
         [{op,1077,'+',
           {integer,1077,1},
           {op,1077,'+',
            {op,1077,'div',
             {op,1077,'-',{var,1077,'TransitionPeriod'},{integer,1077,1}},
             {var,1077,'TickInterval'}},
            {integer,1077,1}}}]},
        {clause,1078,[{atom,1078,false}],[],[{integer,1079,1}]}]}},
     {call,1081,
      {atom,1081,aux_ticker1},
      [{var,1081,'NetKernel'},
       {var,1081,'TickInterval'},
       {var,1081,'NoOfTicks'}]}]}]},
 {function,1083,aux_ticker1,3,
  [{clause,1083,
    [{var,1083,'NetKernel'},{var,1083,'_'},{integer,1083,1}],
    [],
    [{op,1084,'!',{var,1084,'NetKernel'},{atom,1084,transition_period_end}},
     {op,1085,'!',{var,1085,'NetKernel'},{atom,1085,aux_tick}},
     {atom,1086,bye}]},
   {clause,1087,
    [{var,1087,'NetKernel'},{var,1087,'TickInterval'},{var,1087,'NoOfTicks'}],
    [],
    [{op,1088,'!',{var,1088,'NetKernel'},{atom,1088,aux_tick}},
     {'receive',1089,[],
      {var,1090,'TickInterval'},
      [{call,1091,
        {atom,1091,aux_ticker1},
        [{var,1091,'NetKernel'},
         {var,1091,'TickInterval'},
         {op,1091,'-',{var,1091,'NoOfTicks'},{integer,1091,1}}]}]}]}]},
 {function,1094,send,3,
  [{clause,1094,
    [{var,1094,'_From'},{var,1094,'To'},{var,1094,'Mess'}],
    [],
    [{'case',1095,
      {call,1095,{atom,1095,whereis},[{var,1095,'To'}]},
      [{clause,1096,[{atom,1096,undefined}],[],[{var,1097,'Mess'}]},
       {clause,1098,
        [{var,1098,'P'}],
        [[{call,1098,{atom,1098,is_pid},[{var,1098,'P'}]}]],
        [{op,1099,'!',{var,1099,'P'},{var,1099,'Mess'}}]}]}]}]},
 {function,1115,do_spawn,3,
  [{clause,1115,
    [{var,1115,'SpawnFuncArgs'},{var,1115,'SpawnOpts'},{var,1115,'State'}],
    [],
    [{match,1116,
      {cons,1116,{var,1116,'_'},{cons,1116,{var,1116,'From'},{var,1116,'_'}}},
      {var,1116,'SpawnFuncArgs'}},
     {'case',1117,
      {'catch',1117,
       {call,1117,
        {atom,1117,spawn_opt},
        [{atom,-1,net_kernel},
         {atom,1117,spawn_func},
         {var,1117,'SpawnFuncArgs'},
         {var,1117,'SpawnOpts'}]}},
      [{clause,1118,
        [{tuple,1118,
          [{atom,1118,'EXIT'},
           {tuple,1118,[{var,1118,'Reason'},{var,1118,'_'}]}]}],
        [],
        [{call,1119,
          {atom,1119,async_reply},
          [{tuple,1119,
            [{atom,1119,reply},
             {tuple,1119,
              [{atom,1119,'EXIT'},
               {tuple,1119,[{var,1119,'Reason'},{nil,1119}]}]},
             {var,1119,'State'}]},
           {var,1119,'From'}]}]},
       {clause,1120,
        [{tuple,1120,[{atom,1120,'EXIT'},{var,1120,'Reason'}]}],
        [],
        [{call,1121,
          {atom,1121,async_reply},
          [{tuple,1121,
            [{atom,1121,reply},
             {tuple,1121,
              [{atom,1121,'EXIT'},
               {tuple,1121,[{var,1121,'Reason'},{nil,1121}]}]},
             {var,1121,'State'}]},
           {var,1121,'From'}]}]},
       {clause,1122,
        [{var,1122,'_'}],
        [],
        [{tuple,1123,[{atom,1123,noreply},{var,1123,'State'}]}]}]}]}]},
 {function,1131,spawn_func,6,
  [{clause,1131,
    [{atom,1131,link},
     {tuple,1131,[{var,1131,'From'},{var,1131,'Tag'}]},
     {var,1131,'M'},
     {var,1131,'F'},
     {var,1131,'A'},
     {var,1131,'Gleader'}],
    [],
    [{call,1132,{atom,1132,link},[{var,1132,'From'}]},
     {call,1133,
      {remote,1133,{atom,1133,gen_server},{atom,1133,reply}},
      [{tuple,1133,[{var,1133,'From'},{var,1133,'Tag'}]},
       {call,1133,{atom,1133,self},[]}]},
     {call,1134,
      {atom,1134,group_leader},
      [{var,1134,'Gleader'},{call,1134,{atom,1134,self},[]}]},
     {call,1135,
      {atom,1135,apply},
      [{var,1135,'M'},{var,1135,'F'},{var,1135,'A'}]}]},
   {clause,1136,
    [{var,1136,'_'},
     {tuple,1136,[{var,1136,'From'},{var,1136,'Tag'}]},
     {var,1136,'M'},
     {var,1136,'F'},
     {var,1136,'A'},
     {var,1136,'Gleader'}],
    [],
    [{call,1137,
      {remote,1137,{atom,1137,gen_server},{atom,1137,reply}},
      [{tuple,1137,[{var,1137,'From'},{var,1137,'Tag'}]},
       {call,1137,{atom,1137,self},[]}]},
     {call,1138,
      {atom,1138,group_leader},
      [{var,1138,'Gleader'},{call,1138,{atom,1138,self},[]}]},
     {call,1139,
      {atom,1139,apply},
      [{var,1139,'M'},{var,1139,'F'},{var,1139,'A'}]}]}]},
 {function,1145,setup,4,
  [{clause,1145,
    [{var,1145,'Node'},{var,1145,'Type'},{var,1145,'From'},{var,1145,'State'}],
    [],
    [{match,1146,
      {var,1146,'Allowed'},
      {call,1146,
       {remote,1146,{atom,1146,erlang},{atom,1146,element}},
       [{integer,1146,11},{var,1146,'State'}]}},
     {'case',1147,
      {call,1147,
       {remote,1147,{atom,1147,lists},{atom,1147,member}},
       [{var,1147,'Node'},{var,1147,'Allowed'}]},
      [{clause,1148,
        [{atom,1148,false}],
        [[{op,1148,'=/=',{var,1148,'Allowed'},{nil,1148}}]],
        [{call,1149,
          {atom,1149,error_msg},
          [{string,1149,"** Connection attempt with disallowed node ~w ** ~n"},
           {cons,1150,{var,1150,'Node'},{nil,1150}}]},
         {tuple,1151,[{atom,1151,error},{atom,1151,bad_node}]}]},
       {clause,1152,
        [{var,1152,'_'}],
        [],
        [{'case',1153,
          {call,1153,
           {atom,1153,select_mod},
           [{var,1153,'Node'},
            {call,1153,
             {remote,1153,{atom,1153,erlang},{atom,1153,element}},
             [{integer,1153,10},{var,1153,'State'}]}]},
          [{clause,1154,
            [{tuple,1154,[{atom,1154,ok},{var,1154,'L'}]}],
            [],
            [{match,1155,
              {var,1155,'Mod'},
              {call,1155,
               {remote,1155,{atom,1155,erlang},{atom,1155,element}},
               [{integer,1155,5},{var,1155,'L'}]}},
             {match,1156,
              {var,1156,'LAddr'},
              {call,1156,
               {remote,1156,{atom,1156,erlang},{atom,1156,element}},
               [{integer,1156,4},{var,1156,'L'}]}},
             {match,1157,
              {var,1157,'MyNode'},
              {call,1157,
               {remote,1157,{atom,1157,erlang},{atom,1157,element}},
               [{integer,1157,3},{var,1157,'State'}]}},
             {match,1158,
              {var,1158,'Pid'},
              {call,1158,
               {remote,1158,{var,1158,'Mod'},{atom,1158,setup}},
               [{var,1158,'Node'},
                {var,1159,'Type'},
                {var,1160,'MyNode'},
                {call,1161,
                 {remote,1161,{atom,1161,erlang},{atom,1161,element}},
                 [{integer,1161,4},{var,1161,'State'}]},
                {call,1162,
                 {remote,1162,{atom,1162,erlang},{atom,1162,element}},
                 [{integer,1162,6},{var,1162,'State'}]}]}},
             {match,1163,
              {var,1163,'Addr'},
              {call,1163,
               {remote,1163,{atom,1163,erlang},{atom,1163,setelement}},
               [{integer,1163,3},
                {call,1163,
                 {remote,1163,{atom,1163,erlang},{atom,1163,setelement}},
                 [{integer,1163,2},{var,1163,'LAddr'},{atom,1164,undefined}]},
                {atom,1165,undefined}]}},
             {call,1166,
              {remote,1166,{atom,1166,ets},{atom,1166,insert}},
              [{atom,1166,sys_dist},
               {tuple,1166,
                [{atom,1166,connection},
                 {var,1166,'Node'},
                 {atom,1167,pending},
                 {var,1168,'Pid'},
                 {atom,1166,undefined},
                 {var,1170,'Addr'},
                 {cons,1169,{var,1169,'From'},{nil,1169}},
                 {atom,1171,normal}]}]},
             {tuple,1172,[{atom,1172,ok},{var,1172,'Pid'}]}]},
           {clause,1173,
            [{var,1173,'Error'}],
            [],
            [{var,1174,'Error'}]}]}]}]}]}]},
 {function,1181,select_mod,2,
  [{clause,1181,
    [{var,1181,'Node'},{cons,1181,{var,1181,'L'},{var,1181,'Ls'}}],
    [],
    [{match,1182,
      {var,1182,'Mod'},
      {call,1182,
       {remote,1182,{atom,1182,erlang},{atom,1182,element}},
       [{integer,1182,5},{var,1182,'L'}]}},
     {'case',1183,
      {call,1183,
       {remote,1183,{var,1183,'Mod'},{atom,1183,select}},
       [{var,1183,'Node'}]},
      [{clause,1184,
        [{atom,1184,true}],
        [],
        [{tuple,1184,[{atom,1184,ok},{var,1184,'L'}]}]},
       {clause,1185,
        [{atom,1185,false}],
        [],
        [{call,1185,
          {atom,1185,select_mod},
          [{var,1185,'Node'},{var,1185,'Ls'}]}]}]}]},
   {clause,1187,
    [{var,1187,'Node'},{nil,1187}],
    [],
    [{tuple,1188,
      [{atom,1188,error},
       {tuple,1188,
        [{atom,1188,unsupported_address_type},{var,1188,'Node'}]}]}]}]},
 {function,1191,get_proto_mod,3,
  [{clause,1191,
    [{var,1191,'Family'},
     {var,1191,'Protocol'},
     {cons,1191,{var,1191,'L'},{var,1191,'Ls'}}],
    [],
    [{match,1192,
      {var,1192,'A'},
      {call,1192,
       {remote,1192,{atom,1192,erlang},{atom,1192,element}},
       [{integer,1192,4},{var,1192,'L'}]}},
     {'if',1193,
      [{clause,1193,[],
        [[{op,1193,'=:=',
           {call,1193,
            {remote,1193,{atom,1193,erlang},{atom,1193,element}},
            [{integer,1193,5},{var,1193,'A'}]},
           {var,1193,'Family'}},
          {op,1194,'=:=',
           {call,1194,
            {remote,1194,{atom,1194,erlang},{atom,1194,element}},
            [{integer,1194,4},{var,1194,'A'}]},
           {var,1194,'Protocol'}}]],
        [{tuple,1195,
          [{atom,1195,ok},
           {call,1195,
            {remote,1195,{atom,1195,erlang},{atom,1195,element}},
            [{integer,1195,5},{var,1195,'L'}]}]}]},
       {clause,1196,[],
        [[{atom,1196,true}]],
        [{call,1197,
          {atom,1197,get_proto_mod},
          [{var,1197,'Family'},{var,1197,'Protocol'},{var,1197,'Ls'}]}]}]}]},
   {clause,1199,
    [{var,1199,'_Family'},{var,1199,'_Protocol'},{nil,1199}],
    [],
    [{atom,1200,error}]}]},
 {function,1204,init_node,2,
  [{clause,1204,
    [{var,1204,'Name'},{var,1204,'LongOrShortNames'}],
    [],
    [{match,1205,
      {tuple,1205,[{var,1205,'NameWithoutHost'},{var,1205,'_Host'}]},
      {call,1205,
       {remote,1205,{atom,1205,lists},{atom,1205,splitwith}},
       [{'fun',1205,
         {clauses,
          [{clause,1205,[{char,1205,64}],[],[{atom,1205,false}]},
           {clause,1205,[{var,1205,'_'}],[],[{atom,1205,true}]}]}},
        {call,1206,{atom,1206,atom_to_list},[{var,1206,'Name'}]}]}},
     {'case',1207,
      {call,1207,
       {atom,1207,create_name},
       [{var,1207,'Name'},{var,1207,'LongOrShortNames'},{integer,1207,1}]},
      [{clause,1208,
        [{tuple,1208,[{atom,1208,ok},{var,1208,'Node'}]}],
        [],
        [{'case',1209,
          {call,1209,
           {atom,1209,start_protos},
           [{call,1209,
             {atom,1209,list_to_atom},
             [{var,1209,'NameWithoutHost'}]},
            {var,1209,'Node'}]},
          [{clause,1210,
            [{tuple,1210,[{atom,1210,ok},{var,1210,'Ls'}]}],
            [],
            [{tuple,1211,[{atom,1211,ok},{var,1211,'Node'},{var,1211,'Ls'}]}]},
           {clause,1212,[{var,1212,'Error'}],[],[{var,1213,'Error'}]}]}]},
       {clause,1215,[{var,1215,'Error'}],[],[{var,1216,'Error'}]}]}]}]},
 {function,1220,create_name,3,
  [{clause,1220,
    [{var,1220,'Name'},{var,1220,'LongOrShortNames'},{var,1220,'Try'}],
    [],
    [{call,1221,
      {atom,1221,put},
      [{atom,1221,longnames},
       {'case',1221,
        {var,1221,'LongOrShortNames'},
        [{clause,1222,[{atom,1222,shortnames}],[],[{atom,1222,false}]},
         {clause,1223,[{atom,1223,longnames}],[],[{atom,1223,true}]}]}]},
     {match,1225,
      {tuple,1225,[{var,1225,'Head'},{var,1225,'Host1'}]},
      {call,1225,
       {atom,1225,create_hostpart},
       [{var,1225,'Name'},{var,1225,'LongOrShortNames'}]}},
     {'case',1226,
      {var,1226,'Host1'},
      [{clause,1227,
        [{tuple,1227,[{atom,1227,ok},{var,1227,'HostPart'}]}],
        [],
        [{tuple,1228,
          [{atom,1228,ok},
           {call,1228,
            {atom,1228,list_to_atom},
            [{op,1228,'++',{var,1228,'Head'},{var,1228,'HostPart'}}]}]}]},
       {clause,1229,
        [{tuple,1229,[{atom,1229,error},{atom,1229,long}]}],
        [[{op,1229,'=:=',{var,1229,'Try'},{integer,1229,1}}]],
        [{call,1231,
          {remote,1231,{atom,1231,inet_config},{atom,1231,do_load_resolv}},
          [{call,1231,{remote,1231,{atom,1231,os},{atom,1231,type}},[]},
           {atom,1231,longnames}]},
         {call,1232,
          {atom,1232,create_name},
          [{var,1232,'Name'},
           {var,1232,'LongOrShortNames'},
           {integer,1232,0}]}]},
       {clause,1233,
        [{tuple,1233,[{atom,1233,error},{var,1233,'Type'}]}],
        [],
        [{call,1234,
          {remote,1234,{atom,1234,error_logger},{atom,1234,info_msg}},
          [{call,1235,
            {remote,1235,{atom,1235,lists},{atom,1235,concat}},
            [{cons,1235,
              {string,1235,"Can't set "},
              {cons,1236,
               {var,1236,'Type'},
               {cons,1237,
                {string,1237," node name!\nPlease check your configuration\n"},
                {nil,1238}}}}]}]},
         {tuple,1239,[{atom,1239,error},{atom,1239,badarg}]}]}]}]}]},
 {function,1242,create_hostpart,2,
  [{clause,1242,
    [{var,1242,'Name'},{var,1242,'LongOrShortNames'}],
    [],
    [{match,1243,
      {tuple,1243,[{var,1243,'Head'},{var,1243,'Host'}]},
      {call,1243,
       {remote,1243,{atom,1243,lists},{atom,1243,splitwith}},
       [{'fun',1243,
         {clauses,
          [{clause,1243,[{char,1243,64}],[],[{atom,1243,false}]},
           {clause,1243,[{var,1243,'_'}],[],[{atom,1243,true}]}]}},
        {call,1244,{atom,1244,atom_to_list},[{var,1244,'Name'}]}]}},
     {match,1245,
      {var,1245,'Host1'},
      {'case',1245,
       {tuple,1245,[{var,1245,'Host'},{var,1245,'LongOrShortNames'}]},
       [{clause,1246,
         [{tuple,1246,
           [{cons,1246,
             {char,1246,64},
             {cons,1246,{var,1246,'_'},{var,1246,'_'}}},
            {atom,1246,longnames}]}],
         [],
         [{tuple,1247,[{atom,1247,ok},{var,1247,'Host'}]}]},
        {clause,1248,
         [{tuple,1248,
           [{cons,1248,
             {char,1248,64},
             {cons,1248,{var,1248,'_'},{var,1248,'_'}}},
            {atom,1248,shortnames}]}],
         [],
         [{'case',1249,
           {call,1249,
            {remote,1249,{atom,1249,lists},{atom,1249,member}},
            [{char,1249,46},{var,1249,'Host'}]},
           [{clause,1250,
             [{atom,1250,true}],
             [],
             [{tuple,1250,[{atom,1250,error},{atom,1250,short}]}]},
            {clause,1251,
             [{var,1251,'_'}],
             [],
             [{tuple,1251,[{atom,1251,ok},{var,1251,'Host'}]}]}]}]},
        {clause,1253,
         [{tuple,1253,[{var,1253,'_'},{atom,1253,shortnames}]}],
         [],
         [{'case',1254,
           {call,1254,
            {remote,1254,{atom,1254,inet_db},{atom,1254,gethostname}},
            []},
           [{clause,1255,
             [{var,1255,'H'}],
             [[{call,1255,{atom,1255,is_list},[{var,1255,'H'}]},
               {op,1255,'>',
                {call,1255,{atom,1255,length},[{var,1255,'H'}]},
                {integer,1255,0}}]],
             [{tuple,1256,
               [{atom,1256,ok},
                {op,1256,'++',{string,1256,"@"},{var,1256,'H'}}]}]},
            {clause,1257,
             [{var,1257,'_'}],
             [],
             [{tuple,1258,[{atom,1258,error},{atom,1258,short}]}]}]}]},
        {clause,1260,
         [{tuple,1260,[{var,1260,'_'},{atom,1260,longnames}]}],
         [],
         [{'case',1261,
           {tuple,1261,
            [{call,1261,
              {remote,1261,{atom,1261,inet_db},{atom,1261,gethostname}},
              []},
             {call,1261,
              {remote,1261,{atom,1261,inet_db},{atom,1261,res_option}},
              [{atom,1261,domain}]}]},
           [{clause,1262,
             [{tuple,1262,[{var,1262,'H'},{var,1262,'D'}]}],
             [[{call,1262,{atom,1262,is_list},[{var,1262,'D'}]},
               {call,1262,{atom,1262,is_list},[{var,1262,'H'}]},
               {op,1263,'>',
                {call,1263,{atom,1263,length},[{var,1263,'D'}]},
                {integer,1263,0}},
               {op,1263,'>',
                {call,1263,{atom,1263,length},[{var,1263,'H'}]},
                {integer,1263,0}}]],
             [{tuple,1264,
               [{atom,1264,ok},
                {op,1264,'++',
                 {string,1264,"@"},
                 {op,1264,'++',
                  {var,1264,'H'},
                  {op,1264,'++',{string,1264,"."},{var,1264,'D'}}}}]}]},
            {clause,1265,
             [{var,1265,'_'}],
             [],
             [{tuple,1266,[{atom,1266,error},{atom,1266,long}]}]}]}]}]}},
     {tuple,1269,[{var,1269,'Head'},{var,1269,'Host1'}]}]}]},
 {function,1274,protocol_childspecs,0,
  [{clause,1274,[],[],
    [{'case',1275,
      {call,1275,
       {remote,1275,{atom,1275,init},{atom,1275,get_argument}},
       [{atom,1275,proto_dist}]},
      [{clause,1276,
        [{tuple,1276,
          [{atom,1276,ok},{cons,1276,{var,1276,'Protos'},{nil,1276}}]}],
        [],
        [{call,1277,{atom,1277,protocol_childspecs},[{var,1277,'Protos'}]}]},
       {clause,1278,
        [{var,1278,'_'}],
        [],
        [{call,1279,
          {atom,1279,protocol_childspecs},
          [{cons,1279,{string,1279,"inet_tcp"},{nil,1279}}]}]}]}]}]},
 {function,1282,protocol_childspecs,1,
  [{clause,1282,[{nil,1282}],[],[{nil,1283}]},
   {clause,1284,
    [{cons,1284,{var,1284,'H'},{var,1284,'T'}}],
    [],
    [{match,1285,
      {var,1285,'Mod'},
      {call,1285,
       {atom,1285,list_to_atom},
       [{op,1285,'++',{var,1285,'H'},{string,1285,"_dist"}}]}},
     {'case',1286,
      {'catch',1286,
       {call,1286,{remote,1286,{var,1286,'Mod'},{atom,1286,childspecs}},[]}},
      [{clause,1287,
        [{tuple,1287,[{atom,1287,ok},{var,1287,'Childspecs'}]}],
        [[{call,1287,{atom,1287,is_list},[{var,1287,'Childspecs'}]}]],
        [{op,1288,'++',
          {var,1288,'Childspecs'},
          {call,1288,{atom,1288,protocol_childspecs},[{var,1288,'T'}]}}]},
       {clause,1289,
        [{var,1289,'_'}],
        [],
        [{call,1290,{atom,1290,protocol_childspecs},[{var,1290,'T'}]}]}]}]}]},
 {function,1298,epmd_module,0,
  [{clause,1298,[],[],
    [{'case',1299,
      {call,1299,
       {remote,1299,{atom,1299,init},{atom,1299,get_argument}},
       [{atom,1299,epmd_module}]},
      [{clause,1300,
        [{tuple,1300,
          [{atom,1300,ok},
           {cons,1300,
            {cons,1300,{var,1300,'Module'},{nil,1300}},
            {nil,1300}}]}],
        [],
        [{call,1301,{atom,1301,list_to_atom},[{var,1301,'Module'}]}]},
       {clause,1302,[{var,1302,'_'}],[],[{atom,1303,erl_epmd}]}]}]}]},
 {function,1310,start_protos,2,
  [{clause,1310,
    [{var,1310,'Name'},{var,1310,'Node'}],
    [],
    [{'case',1311,
      {call,1311,
       {remote,1311,{atom,1311,init},{atom,1311,get_argument}},
       [{atom,1311,proto_dist}]},
      [{clause,1312,
        [{tuple,1312,
          [{atom,1312,ok},{cons,1312,{var,1312,'Protos'},{nil,1312}}]}],
        [],
        [{call,1313,
          {atom,1313,start_protos},
          [{var,1313,'Name'},{var,1313,'Protos'},{var,1313,'Node'}]}]},
       {clause,1314,
        [{var,1314,'_'}],
        [],
        [{call,1315,
          {atom,1315,start_protos},
          [{var,1315,'Name'},
           {cons,1315,{string,1315,"inet_tcp"},{nil,1315}},
           {var,1315,'Node'}]}]}]}]}]},
 {function,1318,start_protos,3,
  [{clause,1318,
    [{var,1318,'Name'},{var,1318,'Ps'},{var,1318,'Node'}],
    [],
    [{'case',1319,
      {call,1319,
       {atom,1319,start_protos},
       [{var,1319,'Name'},{var,1319,'Ps'},{var,1319,'Node'},{nil,1319}]},
      [{clause,1320,
        [{nil,1320}],
        [],
        [{tuple,1320,[{atom,1320,error},{atom,1320,badarg}]}]},
       {clause,1321,
        [{var,1321,'Ls'}],
        [],
        [{tuple,1321,[{atom,1321,ok},{var,1321,'Ls'}]}]}]}]}]},
 {function,1324,start_protos,4,
  [{clause,1324,
    [{var,1324,'Name'},
     {cons,1324,{var,1324,'Proto'},{var,1324,'Ps'}},
     {var,1324,'Node'},
     {var,1324,'Ls'}],
    [],
    [{match,1325,
      {var,1325,'Mod'},
      {call,1325,
       {atom,1325,list_to_atom},
       [{op,1325,'++',{var,1325,'Proto'},{string,1325,"_dist"}}]}},
     {'case',1326,
      {'catch',1326,
       {call,1326,
        {remote,1326,{var,1326,'Mod'},{atom,1326,listen}},
        [{var,1326,'Name'}]}},
      [{clause,1327,
        [{tuple,1327,
          [{atom,1327,ok},
           {tuple,1327,
            [{var,1327,'Socket'},
             {var,1327,'Address'},
             {var,1327,'Creation'}]}]}],
        [],
        [{'case',1328,
          {call,1328,
           {atom,1328,set_node},
           [{var,1328,'Node'},{var,1328,'Creation'}]},
          [{clause,1329,
            [{atom,1329,ok}],
            [],
            [{match,1330,
              {var,1330,'AcceptPid'},
              {call,1330,
               {remote,1330,{var,1330,'Mod'},{atom,1330,accept}},
               [{var,1330,'Socket'}]}},
             {call,1331,
              {remote,1331,{atom,1331,auth},{atom,1331,sync_cookie}},
              []},
             {match,1332,
              {var,1332,'L'},
              {tuple,1332,
               [{atom,1332,listen},
                {var,1333,'Socket'},
                {var,1335,'AcceptPid'},
                {var,1334,'Address'},
                {var,1336,'Mod'}]}},
             {call,1337,
              {atom,1337,start_protos},
              [{var,1337,'Name'},
               {var,1337,'Ps'},
               {var,1337,'Node'},
               {cons,1337,{var,1337,'L'},{var,1337,'Ls'}}]}]},
           {clause,1338,
            [{var,1338,'_'}],
            [],
            [{call,1339,
              {remote,1339,{var,1339,'Mod'},{atom,1339,close}},
              [{var,1339,'Socket'}]},
             {call,1340,
              {remote,1340,{atom,1340,error_logger},{atom,1340,info_msg}},
              [{string,1340,"Invalid node name: ~p~n"},
               {cons,1340,{var,1340,'Node'},{nil,1340}}]},
             {call,1341,
              {atom,1341,start_protos},
              [{var,1341,'Name'},
               {var,1341,'Ps'},
               {var,1341,'Node'},
               {var,1341,'Ls'}]}]}]}]},
       {clause,1343,
        [{tuple,1343,
          [{atom,1343,'EXIT'},
           {tuple,1343,[{atom,1343,undef},{var,1343,'_'}]}]}],
        [],
        [{call,1344,
          {remote,1344,{atom,1344,error_logger},{atom,1344,info_msg}},
          [{string,1344,"Protocol: ~tp: not supported~n"},
           {cons,1344,{var,1344,'Proto'},{nil,1344}}]},
         {call,1345,
          {atom,1345,start_protos},
          [{var,1345,'Name'},
           {var,1345,'Ps'},
           {var,1345,'Node'},
           {var,1345,'Ls'}]}]},
       {clause,1346,
        [{tuple,1346,[{atom,1346,'EXIT'},{var,1346,'Reason'}]}],
        [],
        [{call,1347,
          {remote,1347,{atom,1347,error_logger},{atom,1347,info_msg}},
          [{string,1347,"Protocol: ~tp: register error: ~tp~n"},
           {cons,1348,
            {var,1348,'Proto'},
            {cons,1348,{var,1348,'Reason'},{nil,1348}}}]},
         {call,1349,
          {atom,1349,start_protos},
          [{var,1349,'Name'},
           {var,1349,'Ps'},
           {var,1349,'Node'},
           {var,1349,'Ls'}]}]},
       {clause,1350,
        [{tuple,1350,[{atom,1350,error},{atom,1350,duplicate_name}]}],
        [],
        [{call,1351,
          {remote,1351,{atom,1351,error_logger},{atom,1351,info_msg}},
          [{op,1351,'++',
            {string,1351,"Protocol: ~tp: the name "},
            {op,1352,'++',
             {call,1352,{atom,1352,atom_to_list},[{var,1352,'Node'}]},
             {string,1353," seems to be in use by another Erlang node"}}},
           {cons,1354,{var,1354,'Proto'},{nil,1354}}]},
         {call,1355,
          {atom,1355,start_protos},
          [{var,1355,'Name'},
           {var,1355,'Ps'},
           {var,1355,'Node'},
           {var,1355,'Ls'}]}]},
       {clause,1356,
        [{tuple,1356,[{atom,1356,error},{var,1356,'Reason'}]}],
        [],
        [{call,1357,
          {remote,1357,{atom,1357,error_logger},{atom,1357,info_msg}},
          [{string,1357,"Protocol: ~tp: register/listen error: ~tp~n"},
           {cons,1358,
            {var,1358,'Proto'},
            {cons,1358,{var,1358,'Reason'},{nil,1358}}}]},
         {call,1359,
          {atom,1359,start_protos},
          [{var,1359,'Name'},
           {var,1359,'Ps'},
           {var,1359,'Node'},
           {var,1359,'Ls'}]}]}]}]},
   {clause,1361,
    [{var,1361,'_'},{nil,1361},{var,1361,'_Node'},{var,1361,'Ls'}],
    [],
    [{var,1362,'Ls'}]}]},
 {function,1364,set_node,2,
  [{clause,1364,
    [{var,1364,'Node'},{var,1364,'Creation'}],
    [[{op,1364,'=:=',
       {call,1364,{atom,1364,node},[]},
       {atom,1364,nonode@nohost}}]],
    [{'case',1365,
      {'catch',1365,
       {call,1365,
        {remote,1365,{atom,1365,erlang},{atom,1365,setnode}},
        [{var,1365,'Node'},{var,1365,'Creation'}]}},
      [{clause,1366,[{atom,1366,true}],[],[{atom,1367,ok}]},
       {clause,1368,
        [{tuple,1368,[{atom,1368,'EXIT'},{var,1368,'Reason'}]}],
        [],
        [{tuple,1369,[{atom,1369,error},{var,1369,'Reason'}]}]}]}]},
   {clause,1371,
    [{var,1371,'Node'},{var,1371,'_Creation'}],
    [[{op,1371,'=:=',{call,1371,{atom,1371,node},[]},{var,1371,'Node'}}]],
    [{atom,1372,ok}]}]},
 {function,1374,connecttime,0,
  [{clause,1374,[],[],
    [{'case',1375,
      {call,1375,
       {remote,1375,{atom,1375,application},{atom,1375,get_env}},
       [{atom,1375,kernel},{atom,1375,net_setuptime}]},
      [{clause,1376,
        [{tuple,1376,[{atom,1376,ok},{var,1376,'Time'}]}],
        [[{call,1376,{atom,1376,is_number},[{var,1376,'Time'}]},
          {op,1376,'>=',{var,1376,'Time'},{integer,1376,120}}]],
        [{op,1377,'*',{integer,1377,120},{integer,1377,1000}}]},
       {clause,1378,
        [{tuple,1378,[{atom,1378,ok},{var,1378,'Time'}]}],
        [[{call,1378,{atom,1378,is_number},[{var,1378,'Time'}]},
          {op,1378,'>',{var,1378,'Time'},{integer,1378,0}}]],
        [{call,1379,
          {atom,1379,round},
          [{op,1379,'*',{var,1379,'Time'},{integer,1379,1000}}]}]},
       {clause,1380,[{var,1380,'_'}],[],[{integer,142,7000}]}]}]}]},
 {function,1390,get_node_info,1,
  [{clause,1390,
    [{var,1390,'Node'}],
    [],
    [{'case',1391,
      {call,1391,
       {remote,1391,{atom,1391,ets},{atom,1391,lookup}},
       [{atom,1391,sys_dist},{var,1391,'Node'}]},
      [{clause,1392,
        [{cons,1392,
          {match,1392,
           {var,1392,'Conn'},
           {tuple,1392,
            [{atom,1392,connection},
             {var,1392,'_'},
             {var,1392,'State'},
             {var,1392,'Owner'},
             {var,1392,'_'},
             {var,1392,'_'},
             {var,1392,'_'},
             {var,1392,'_'}]}},
          {nil,1392}}],
        [],
        [{'case',1393,
          {call,1393,
           {atom,1393,get_status},
           [{var,1393,'Owner'},{var,1393,'Node'},{var,1393,'State'}]},
          [{clause,1394,
            [{tuple,1394,[{atom,1394,ok},{var,1394,'In'},{var,1394,'Out'}]}],
            [],
            [{tuple,1395,
              [{atom,1395,ok},
               {cons,1395,
                {tuple,1395,[{atom,1395,owner},{var,1395,'Owner'}]},
                {cons,1396,
                 {tuple,1396,[{atom,1396,state},{var,1396,'State'}]},
                 {cons,1397,
                  {tuple,1397,
                   [{atom,1397,address},
                    {call,1397,
                     {remote,1397,{atom,1397,erlang},{atom,1397,element}},
                     [{integer,1397,6},{var,1397,'Conn'}]}]},
                  {cons,1398,
                   {tuple,1398,
                    [{atom,1398,type},
                     {call,1398,
                      {remote,1398,{atom,1398,erlang},{atom,1398,element}},
                      [{integer,1398,8},{var,1398,'Conn'}]}]},
                   {cons,1399,
                    {tuple,1399,[{atom,1399,in},{var,1399,'In'}]},
                    {cons,1400,
                     {tuple,1400,[{atom,1400,out},{var,1400,'Out'}]},
                     {nil,1400}}}}}}}]}]},
           {clause,1401,
            [{var,1401,'_'}],
            [],
            [{tuple,1402,[{atom,1402,error},{atom,1402,bad_node}]}]}]}]},
       {clause,1404,
        [{var,1404,'_'}],
        [],
        [{tuple,1405,[{atom,1405,error},{atom,1405,bad_node}]}]}]}]}]},
 {function,1414,get_status,3,
  [{clause,1414,
    [{var,1414,'Owner'},{var,1414,'Node'},{atom,1414,up}],
    [],
    [{call,1415,{atom,1415,monitor_node},[{var,1415,'Node'},{atom,1415,true}]},
     {op,1416,'!',
      {var,1416,'Owner'},
      {tuple,1416,[{call,1416,{atom,1416,self},[]},{atom,1416,get_status}]}},
     {'receive',1417,
      [{clause,1418,
        [{tuple,1418,
          [{var,1418,'Owner'},{atom,1418,get_status},{var,1418,'Res'}]}],
        [],
        [{call,1419,
          {atom,1419,monitor_node},
          [{var,1419,'Node'},{atom,1419,false}]},
         {var,1420,'Res'}]},
       {clause,1421,
        [{tuple,1421,[{atom,1421,nodedown},{var,1421,'Node'}]}],
        [],
        [{atom,1422,error}]}]}]},
   {clause,1424,
    [{var,1424,'_'},{var,1424,'_'},{var,1424,'_'}],
    [],
    [{tuple,1425,[{atom,1425,ok},{integer,1425,0},{integer,1425,0}]}]}]},
 {function,1427,get_node_info,2,
  [{clause,1427,
    [{var,1427,'Node'},{var,1427,'Key'}],
    [],
    [{'case',1428,
      {call,1428,{atom,1428,get_node_info},[{var,1428,'Node'}]},
      [{clause,1429,
        [{tuple,1429,[{atom,1429,ok},{var,1429,'Info'}]}],
        [],
        [{'case',1430,
          {call,1430,
           {remote,1430,{atom,1430,lists},{atom,1430,keysearch}},
           [{var,1430,'Key'},{integer,1430,1},{var,1430,'Info'}]},
          [{clause,1431,
            [{tuple,1431,
              [{atom,1431,value},
               {tuple,1431,[{var,1431,'Key'},{var,1431,'Value'}]}]}],
            [],
            [{tuple,1431,[{atom,1431,ok},{var,1431,'Value'}]}]},
           {clause,1432,
            [{var,1432,'_'}],
            [],
            [{tuple,1432,[{atom,1432,error},{atom,1432,invalid_key}]}]}]}]},
       {clause,1434,[{var,1434,'Error'}],[],[{var,1435,'Error'}]}]}]}]},
 {function,1438,get_nodes_info,0,
  [{clause,1438,[],[],
    [{call,1439,
      {atom,1439,get_nodes_info},
      [{call,1439,{atom,1439,get_nodes},[{atom,1439,all}]},{nil,1439}]}]}]},
 {function,1441,get_nodes_info,2,
  [{clause,1441,
    [{cons,1441,{var,1441,'Node'},{var,1441,'Nodes'}},{var,1441,'InfoList'}],
    [],
    [{'case',1442,
      {call,1442,{atom,1442,get_node_info},[{var,1442,'Node'}]},
      [{clause,1443,
        [{tuple,1443,[{atom,1443,ok},{var,1443,'Info'}]}],
        [],
        [{call,1443,
          {atom,1443,get_nodes_info},
          [{var,1443,'Nodes'},
           {cons,1443,
            {tuple,1443,[{var,1443,'Node'},{var,1443,'Info'}]},
            {var,1443,'InfoList'}}]}]},
       {clause,1444,
        [{var,1444,'_'}],
        [],
        [{call,1444,
          {atom,1444,get_nodes_info},
          [{var,1444,'Nodes'},{var,1444,'InfoList'}]}]}]}]},
   {clause,1446,
    [{nil,1446},{var,1446,'InfoList'}],
    [],
    [{tuple,1447,[{atom,1447,ok},{var,1447,'InfoList'}]}]}]},
 {function,1453,reply_waiting,3,
  [{clause,1453,
    [{var,1453,'_Node'},{var,1453,'Waiting'},{var,1453,'Rep'}],
    [],
    [{'case',1454,
      {var,1454,'Rep'},
      [{clause,1455,[{atom,1455,false}],[],[{atom,42,noop}]},
       {clause,1457,[{var,1457,'_'}],[],[{atom,1458,ok}]}]},
     {call,1460,
      {atom,1460,reply_waiting1},
      [{call,1460,
        {remote,1460,{atom,1460,lists},{atom,1460,reverse}},
        [{var,1460,'Waiting'}]},
       {var,1460,'Rep'}]}]}]},
 {function,1462,reply_waiting1,2,
  [{clause,1462,
    [{cons,1462,{var,1462,'From'},{var,1462,'W'}},{var,1462,'Rep'}],
    [],
    [{call,1463,
      {atom,1463,async_gen_server_reply},
      [{var,1463,'From'},{var,1463,'Rep'}]},
     {call,1464,
      {atom,1464,reply_waiting1},
      [{var,1464,'W'},{var,1464,'Rep'}]}]},
   {clause,1465,[{nil,1465},{var,1465,'_'}],[],[{atom,1466,ok}]}]},
 {function,1477,all_atoms,1,
  [{clause,1477,[{nil,1477}],[],[{atom,1477,true}]},
   {clause,1478,
    [{cons,1478,{var,1478,'N'},{var,1478,'Tail'}}],
    [[{call,1478,{atom,1478,is_atom},[{var,1478,'N'}]}]],
    [{call,1479,{atom,1479,all_atoms},[{var,1479,'Tail'}]}]},
   {clause,1480,[{var,1480,'_'}],[],[{atom,1480,false}]}]},
 {function,1483,restart_ticker,1,
  [{clause,1483,
    [{var,1483,'Time'}],
    [],
    [{atom,53,ok},
     {op,1485,'!',{call,1485,{atom,1485,self},[]},{atom,1485,aux_tick}},
     {call,1486,
      {atom,1486,spawn_link},
      [{atom,-1,net_kernel},
       {atom,1486,ticker},
       {cons,1486,
        {call,1486,{atom,1486,self},[]},
        {cons,1486,{var,1486,'Time'},{nil,1486}}}]}]}]},
 {function,1492,print_info,0,
  [{clause,1492,[],[],
    [{call,1493,
      {atom,1493,nformat},
      [{string,1493,"Node"},
       {string,1493,"State"},
       {string,1493,"Type"},
       {string,1493,"In"},
       {string,1493,"Out"},
       {string,1493,"Address"}]},
     {match,1494,
      {tuple,1494,[{atom,1494,ok},{var,1494,'NodesInfo'}]},
      {call,1494,{atom,1494,nodes_info},[]}},
     {match,1495,
      {tuple,1495,[{var,1495,'In'},{var,1495,'Out'}]},
      {call,1495,
       {remote,1495,{atom,1495,lists},{atom,1495,foldl}},
       [{'fun',1495,{function,display_info,2}},
        {tuple,1495,[{integer,1495,0},{integer,1495,0}]},
        {var,1495,'NodesInfo'}]}},
     {call,1496,
      {atom,1496,nformat},
      [{string,1496,"Total"},
       {string,1496,[]},
       {string,1496,[]},
       {call,1497,{atom,1497,integer_to_list},[{var,1497,'In'}]},
       {call,1497,{atom,1497,integer_to_list},[{var,1497,'Out'}]},
       {string,1497,[]}]}]}]},
 {function,1499,display_info,2,
  [{clause,1499,
    [{tuple,1499,[{var,1499,'Node'},{var,1499,'Info'}]},
     {tuple,1499,[{var,1499,'I'},{var,1499,'O'}]}],
    [],
    [{match,1500,
      {var,1500,'State'},
      {call,1500,
       {atom,1500,atom_to_list},
       [{call,1500,{atom,1500,fetch},[{atom,1500,state},{var,1500,'Info'}]}]}},
     {match,1501,
      {var,1501,'In'},
      {call,1501,{atom,1501,fetch},[{atom,1501,in},{var,1501,'Info'}]}},
     {match,1502,
      {var,1502,'Out'},
      {call,1502,{atom,1502,fetch},[{atom,1502,out},{var,1502,'Info'}]}},
     {match,1503,
      {var,1503,'Type'},
      {call,1503,
       {atom,1503,atom_to_list},
       [{call,1503,{atom,1503,fetch},[{atom,1503,type},{var,1503,'Info'}]}]}},
     {match,1504,
      {var,1504,'Address'},
      {call,1504,
       {atom,1504,fmt_address},
       [{call,1504,
         {atom,1504,fetch},
         [{atom,1504,address},{var,1504,'Info'}]}]}},
     {call,1505,
      {atom,1505,nformat},
      [{call,1505,{atom,1505,atom_to_list},[{var,1505,'Node'}]},
       {var,1505,'State'},
       {var,1505,'Type'},
       {call,1506,{atom,1506,integer_to_list},[{var,1506,'In'}]},
       {call,1506,{atom,1506,integer_to_list},[{var,1506,'Out'}]},
       {var,1506,'Address'}]},
     {tuple,1507,
      [{op,1507,'+',{var,1507,'I'},{var,1507,'In'}},
       {op,1507,'+',{var,1507,'O'},{var,1507,'Out'}}]}]}]},
 {function,1509,fmt_address,1,
  [{clause,1509,[{atom,1509,undefined}],[],[{string,1510,"-"}]},
   {clause,1511,
    [{var,1511,'A'}],
    [],
    [{'case',1512,
      {call,1512,
       {remote,1512,{atom,1512,erlang},{atom,1512,element}},
       [{integer,1512,5},{var,1512,'A'}]},
      [{clause,1513,
        [{atom,1513,inet}],
        [],
        [{'case',1514,
          {call,1514,
           {remote,1514,{atom,1514,erlang},{atom,1514,element}},
           [{integer,1514,2},{var,1514,'A'}]},
          [{clause,1515,
            [{tuple,1515,[{var,1515,'IP'},{var,1515,'Port'}]}],
            [],
            [{op,1516,'++',
              {call,1516,
               {remote,1516,{atom,1516,inet_parse},{atom,1516,ntoa}},
               [{var,1516,'IP'}]},
              {op,1516,'++',
               {string,1516,":"},
               {call,1516,{atom,1516,integer_to_list},[{var,1516,'Port'}]}}}]},
           {clause,1517,[{var,1517,'_'}],[],[{string,1517,"-"}]}]}]},
       {clause,1519,
        [{atom,1519,inet6}],
        [],
        [{'case',1520,
          {call,1520,
           {remote,1520,{atom,1520,erlang},{atom,1520,element}},
           [{integer,1520,2},{var,1520,'A'}]},
          [{clause,1521,
            [{tuple,1521,[{var,1521,'IP'},{var,1521,'Port'}]}],
            [],
            [{op,1522,'++',
              {call,1522,
               {remote,1522,{atom,1522,inet_parse},{atom,1522,ntoa}},
               [{var,1522,'IP'}]},
              {op,1522,'++',
               {string,1522,"/"},
               {call,1522,{atom,1522,integer_to_list},[{var,1522,'Port'}]}}}]},
           {clause,1523,[{var,1523,'_'}],[],[{string,1523,"-"}]}]}]},
       {clause,1525,
        [{var,1525,'_'}],
        [],
        [{call,1526,
          {remote,1526,{atom,1526,lists},{atom,1526,flatten}},
          [{call,1526,
            {remote,1526,{atom,1526,io_lib},{atom,1526,format}},
            [{string,1526,"~p"},
             {cons,1526,
              {call,1526,
               {remote,1526,{atom,1526,erlang},{atom,1526,element}},
               [{integer,1526,2},{var,1526,'A'}]},
              {nil,1526}}]}]}]}]}]}]},
 {function,1530,fetch,2,
  [{clause,1530,
    [{var,1530,'Key'},{var,1530,'Info'}],
    [],
    [{'case',1531,
      {call,1531,
       {remote,1531,{atom,1531,lists},{atom,1531,keysearch}},
       [{var,1531,'Key'},{integer,1531,1},{var,1531,'Info'}]},
      [{clause,1532,
        [{tuple,1532,
          [{atom,1532,value},{tuple,1532,[{var,1532,'_'},{var,1532,'Val'}]}]}],
        [],
        [{var,1532,'Val'}]},
       {clause,1533,[{atom,1533,false}],[],[{integer,1533,0}]}]}]}]},
 {function,1536,nformat,6,
  [{clause,1536,
    [{var,1536,'A1'},
     {var,1536,'A2'},
     {var,1536,'A3'},
     {var,1536,'A4'},
     {var,1536,'A5'},
     {var,1536,'A6'}],
    [],
    [{call,1537,
      {remote,1537,{atom,1537,io},{atom,1537,format}},
      [{string,1537,"~-20s ~-7s ~-6s ~8s ~8s ~s~n"},
       {cons,1537,
        {var,1537,'A1'},
        {cons,1537,
         {var,1537,'A2'},
         {cons,1537,
          {var,1537,'A3'},
          {cons,1537,
           {var,1537,'A4'},
           {cons,1537,
            {var,1537,'A5'},
            {cons,1537,{var,1537,'A6'},{nil,1537}}}}}}}]}]}]},
 {function,1539,print_info,1,
  [{clause,1539,
    [{var,1539,'Node'}],
    [],
    [{'case',1540,
      {call,1540,{atom,1540,node_info},[{var,1540,'Node'}]},
      [{clause,1541,
        [{tuple,1541,[{atom,1541,ok},{var,1541,'Info'}]}],
        [],
        [{match,1542,
          {var,1542,'State'},
          {call,1542,{atom,1542,fetch},[{atom,1542,state},{var,1542,'Info'}]}},
         {match,1543,
          {var,1543,'In'},
          {call,1543,{atom,1543,fetch},[{atom,1543,in},{var,1543,'Info'}]}},
         {match,1544,
          {var,1544,'Out'},
          {call,1544,{atom,1544,fetch},[{atom,1544,out},{var,1544,'Info'}]}},
         {match,1545,
          {var,1545,'Type'},
          {call,1545,{atom,1545,fetch},[{atom,1545,type},{var,1545,'Info'}]}},
         {match,1546,
          {var,1546,'Address'},
          {call,1546,
           {atom,1546,fmt_address},
           [{call,1546,
             {atom,1546,fetch},
             [{atom,1546,address},{var,1546,'Info'}]}]}},
         {call,1547,
          {remote,1547,{atom,1547,io},{atom,1547,format}},
          [{string,1547,
            "Node     = ~p~nState    = ~p~nType     = ~p~nIn       = ~p~nOut      = ~p~nAddress  = ~s~n"},
           {cons,1553,
            {var,1553,'Node'},
            {cons,1553,
             {var,1553,'State'},
             {cons,1553,
              {var,1553,'Type'},
              {cons,1553,
               {var,1553,'In'},
               {cons,1553,
                {var,1553,'Out'},
                {cons,1553,{var,1553,'Address'},{nil,1553}}}}}}}]}]},
       {clause,1554,[{var,1554,'Error'}],[],[{var,1555,'Error'}]}]}]}]},
 {function,1558,verbose,3,
  [{clause,1558,
    [{var,1558,'Term'},
     {var,1558,'Level'},
     {tuple,1558,
      [{atom,1558,state},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'_'},
       {var,1558,'Verbose'},
       {var,1558,'_'}]}],
    [[{op,1558,'>=',{var,1558,'Verbose'},{var,1558,'Level'}}]],
    [{call,1559,
      {remote,1559,{atom,1559,error_logger},{atom,1559,info_report}},
      [{tuple,1559,[{atom,1559,net_kernel},{var,1559,'Term'}]}]}]},
   {clause,1560,
    [{var,1560,'_'},{var,1560,'_'},{var,1560,'_'}],
    [],
    [{atom,1561,ok}]}]},
 {function,1563,getnode,1,
  [{clause,1563,
    [{var,1563,'P'}],
    [[{call,1563,{atom,1563,is_pid},[{var,1563,'P'}]}]],
    [{call,1563,{atom,1563,node},[{var,1563,'P'}]}]},
   {clause,1564,[{var,1564,'P'}],[],[{var,1564,'P'}]}]},
 {function,1566,async_reply,2,
  [{clause,1566,
    [{tuple,1566,[{atom,1566,reply},{var,1566,'Msg'},{var,1566,'State'}]},
     {var,1566,'From'}],
    [],
    [{call,1567,
      {atom,1567,async_gen_server_reply},
      [{var,1567,'From'},{var,1567,'Msg'}]},
     {tuple,1568,[{atom,1568,noreply},{var,1568,'State'}]}]}]},
 {function,1570,async_gen_server_reply,2,
  [{clause,1570,
    [{var,1570,'From'},{var,1570,'Msg'}],
    [],
    [{match,1571,
      {tuple,1571,[{var,1571,'Pid'},{var,1571,'Tag'}]},
      {var,1571,'From'}},
     {match,1572,
      {var,1572,'M'},
      {tuple,1572,[{var,1572,'Tag'},{var,1572,'Msg'}]}},
     {'case',1573,
      {'catch',1573,
       {call,1573,
        {remote,1573,{atom,1573,erlang},{atom,1573,send}},
        [{var,1573,'Pid'},
         {var,1573,'M'},
         {cons,1573,
          {atom,1573,nosuspend},
          {cons,1573,{atom,1573,noconnect},{nil,1573}}}]}},
      [{clause,1574,[{atom,1574,ok}],[],[{atom,1575,ok}]},
       {clause,1576,
        [{atom,1576,nosuspend}],
        [],
        [{match,1577,
          {var,1577,'_'},
          {call,1577,
           {atom,1577,spawn},
           [{'fun',1577,
             {clauses,
              [{clause,1577,[],[],
                [{'catch',1577,
                  {call,1577,
                   {remote,1577,{atom,1577,erlang},{atom,1577,send}},
                   [{var,1577,'Pid'},
                    {var,1577,'M'},
                    {cons,1577,{atom,1577,noconnect},{nil,1577}}]}}]}]}}]}},
         {atom,1578,ok}]},
       {clause,1579,[{atom,1579,noconnect}],[],[{atom,1580,ok}]},
       {clause,1581,
        [{tuple,1581,[{atom,1581,'EXIT'},{var,1581,'_'}]}],
        [],
        [{atom,1582,ok}]}]}]}]}]
