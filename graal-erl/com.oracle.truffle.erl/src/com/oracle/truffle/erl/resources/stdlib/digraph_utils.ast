digraph_utils
[]
[]
[{function,50,components,1,
  [{clause,50,
    [{var,50,'G'}],
    [],
    [{call,51,
      {atom,51,forest},
      [{var,51,'G'},{'fun',51,{function,inout,3}}]}]}]},
 {function,57,strong_components,1,
  [{clause,57,
    [{var,57,'G'}],
    [],
    [{call,58,
      {atom,58,forest},
      [{var,58,'G'},
       {'fun',58,{function,in,3}},
       {call,58,{atom,58,revpostorder},[{var,58,'G'}]}]}]}]},
 {function,64,cyclic_strong_components,1,
  [{clause,64,
    [{var,64,'G'}],
    [],
    [{call,65,
      {atom,65,remove_singletons},
      [{call,65,{atom,65,strong_components},[{var,65,'G'}]},
       {var,65,'G'},
       {nil,65}]}]}]},
 {function,72,reachable,2,
  [{clause,72,
    [{var,72,'Vs'},{var,72,'G'}],
    [[{call,72,{atom,72,is_list},[{var,72,'Vs'}]}]],
    [{call,73,
      {remote,73,{atom,73,lists},{atom,73,append}},
      [{call,73,
        {atom,73,forest},
        [{var,73,'G'},
         {'fun',73,{function,out,3}},
         {var,73,'Vs'},
         {atom,73,first}]}]}]}]},
 {function,80,reachable_neighbours,2,
  [{clause,80,
    [{var,80,'Vs'},{var,80,'G'}],
    [[{call,80,{atom,80,is_list},[{var,80,'Vs'}]}]],
    [{call,81,
      {remote,81,{atom,81,lists},{atom,81,append}},
      [{call,81,
        {atom,81,forest},
        [{var,81,'G'},
         {'fun',81,{function,out,3}},
         {var,81,'Vs'},
         {atom,81,not_first}]}]}]}]},
 {function,88,reaching,2,
  [{clause,88,
    [{var,88,'Vs'},{var,88,'G'}],
    [[{call,88,{atom,88,is_list},[{var,88,'Vs'}]}]],
    [{call,89,
      {remote,89,{atom,89,lists},{atom,89,append}},
      [{call,89,
        {atom,89,forest},
        [{var,89,'G'},
         {'fun',89,{function,in,3}},
         {var,89,'Vs'},
         {atom,89,first}]}]}]}]},
 {function,96,reaching_neighbours,2,
  [{clause,96,
    [{var,96,'Vs'},{var,96,'G'}],
    [[{call,96,{atom,96,is_list},[{var,96,'Vs'}]}]],
    [{call,97,
      {remote,97,{atom,97,lists},{atom,97,append}},
      [{call,97,
        {atom,97,forest},
        [{var,97,'G'},
         {'fun',97,{function,in,3}},
         {var,97,'Vs'},
         {atom,97,not_first}]}]}]}]},
 {function,103,topsort,1,
  [{clause,103,
    [{var,103,'G'}],
    [],
    [{match,104,
      {var,104,'L'},
      {call,104,{atom,104,revpostorder},[{var,104,'G'}]}},
     {'case',105,
      {op,105,'=:=',
       {call,105,
        {atom,105,length},
        [{call,105,
          {atom,105,forest},
          [{var,105,'G'},{'fun',105,{function,in,3}},{var,105,'L'}]}]},
       {call,105,
        {atom,105,length},
        [{call,105,
          {remote,105,{atom,105,digraph},{atom,105,vertices}},
          [{var,105,'G'}]}]}},
      [{clause,106,[{atom,106,true}],[],[{var,106,'L'}]},
       {clause,107,[{atom,107,false}],[],[{atom,107,false}]}]}]}]},
 {function,113,is_acyclic,1,
  [{clause,113,
    [{var,113,'G'}],
    [],
    [{op,114,'andalso',
      {op,114,'=:=',
       {call,114,{atom,114,loop_vertices},[{var,114,'G'}]},
       {nil,114}},
      {op,114,'=/=',
       {call,114,{atom,114,topsort},[{var,114,'G'}]},
       {atom,114,false}}}]}]},
 {function,120,arborescence_root,1,
  [{clause,120,
    [{var,120,'G'}],
    [],
    [{'case',121,
      {op,121,'=:=',
       {call,121,
        {remote,121,{atom,121,digraph},{atom,121,no_edges}},
        [{var,121,'G'}]},
       {op,121,'-',
        {call,121,
         {remote,121,{atom,121,digraph},{atom,121,no_vertices}},
         [{var,121,'G'}]},
        {integer,121,1}}},
      [{clause,122,
        [{atom,122,true}],
        [],
        [{'try',123,
          [{match,124,
            {var,124,'F'},
            {'fun',124,
             {clauses,
              [{clause,124,
                [{var,124,'V'},{var,124,'Z'}],
                [],
                [{'case',125,
                  {call,125,
                   {remote,125,{atom,125,digraph},{atom,125,in_degree}},
                   [{var,125,'G'},{var,125,'V'}]},
                  [{clause,126,[{integer,126,1}],[],[{var,126,'Z'}]},
                   {clause,127,
                    [{integer,127,0}],
                    [[{op,127,'=:=',{var,127,'Z'},{nil,127}}]],
                    [{cons,127,{var,127,'V'},{nil,127}}]}]}]}]}}},
           {match,130,
            {cons,130,{var,130,'Root'},{nil,130}},
            {call,130,
             {remote,130,{atom,130,lists},{atom,130,foldl}},
             [{var,130,'F'},
              {nil,130},
              {call,130,
               {remote,130,{atom,130,digraph},{atom,130,vertices}},
               [{var,130,'G'}]}]}},
           {tuple,131,[{atom,131,yes},{var,131,'Root'}]}],
          [],
          [{clause,132,
            [{tuple,132,[{var,132,'_'},{var,132,'_'},{var,132,'_'}]}],
            [],
            [{atom,133,no}]}],
          []}]},
       {clause,135,[{atom,135,false}],[],[{atom,136,no}]}]}]}]},
 {function,142,is_arborescence,1,
  [{clause,142,
    [{var,142,'G'}],
    [],
    [{op,143,'=/=',
      {call,143,{atom,143,arborescence_root},[{var,143,'G'}]},
      {atom,143,no}}]}]},
 {function,148,is_tree,1,
  [{clause,148,
    [{var,148,'G'}],
    [],
    [{op,150,'andalso',
      {op,149,'=:=',
       {call,149,
        {remote,149,{atom,149,digraph},{atom,149,no_edges}},
        [{var,149,'G'}]},
       {op,149,'-',
        {call,149,
         {remote,149,{atom,149,digraph},{atom,149,no_vertices}},
         [{var,149,'G'}]},
        {integer,149,1}}},
      {op,150,'=:=',
       {call,150,
        {atom,150,length},
        [{call,150,{atom,150,components},[{var,150,'G'}]}]},
       {integer,150,1}}}]}]},
 {function,156,loop_vertices,1,
  [{clause,156,
    [{var,156,'G'}],
    [],
    [{lc,157,
      {var,157,'V'},
      [{generate,157,
        {var,157,'V'},
        {call,157,
         {remote,157,{atom,157,digraph},{atom,157,vertices}},
         [{var,157,'G'}]}},
       {call,157,
        {atom,157,is_reflexive_vertex},
        [{var,157,'V'},{var,157,'G'}]}]}]}]},
 {function,164,subgraph,2,
  [{clause,164,
    [{var,164,'G'},{var,164,'Vs'}],
    [],
    [{'try',165,
      [{call,166,
        {atom,166,subgraph_opts},
        [{var,166,'G'},{var,166,'Vs'},{nil,166}]}],
      [],
      [{clause,168,
        [{tuple,168,[{atom,168,throw},{atom,168,badarg},{var,168,'_'}]}],
        [],
        [{call,169,
          {remote,169,{atom,169,erlang},{atom,169,error}},
          [{atom,169,badarg}]}]}],
      []}]}]},
 {function,179,subgraph,3,
  [{clause,179,
    [{var,179,'G'},{var,179,'Vs'},{var,179,'Opts'}],
    [],
    [{'try',180,
      [{call,181,
        {atom,181,subgraph_opts},
        [{var,181,'G'},{var,181,'Vs'},{var,181,'Opts'}]}],
      [],
      [{clause,183,
        [{tuple,183,[{atom,183,throw},{atom,183,badarg},{var,183,'_'}]}],
        [],
        [{call,184,
          {remote,184,{atom,184,erlang},{atom,184,error}},
          [{atom,184,badarg}]}]}],
      []}]}]},
 {function,191,condensation,1,
  [{clause,191,
    [{var,191,'G'}],
    [],
    [{match,192,
      {var,192,'SCs'},
      {call,192,{atom,192,strong_components},[{var,192,'G'}]}},
     {match,196,
      {var,196,'V2I'},
      {call,196,
       {remote,196,{atom,196,ets},{atom,196,new}},
       [{atom,196,condensation},{nil,196}]}},
     {match,197,
      {var,197,'I2C'},
      {call,197,
       {remote,197,{atom,197,ets},{atom,197,new}},
       [{atom,197,condensation},{nil,197}]}},
     {match,198,
      {var,198,'CFun'},
      {'fun',198,
       {clauses,
        [{clause,198,
          [{var,198,'SC'},{var,198,'N'}],
          [],
          [{call,198,
            {remote,198,{atom,198,lists},{atom,198,foreach}},
            [{'fun',198,
              {clauses,
               [{clause,198,
                 [{var,198,'V'}],
                 [],
                 [{match,199,
                   {atom,199,true},
                   {call,199,
                    {remote,199,{atom,199,ets},{atom,199,insert}},
                    [{var,199,'V2I'},
                     {tuple,199,[{var,199,'V'},{var,199,'N'}]}]}}]}]}},
             {var,201,'SC'}]},
           {match,202,
            {atom,202,true},
            {call,202,
             {remote,202,{atom,202,ets},{atom,202,insert}},
             [{var,202,'I2C'},{tuple,202,[{var,202,'N'},{var,202,'SC'}]}]}},
           {op,203,'+',{var,203,'N'},{integer,203,1}}]}]}}},
     {call,205,
      {remote,205,{atom,205,lists},{atom,205,foldl}},
      [{var,205,'CFun'},{integer,205,1},{var,205,'SCs'}]},
     {match,206,
      {var,206,'SCG'},
      {call,206,{atom,206,subgraph_opts},[{var,206,'G'},{nil,206},{nil,206}]}},
     {call,207,
      {remote,207,{atom,207,lists},{atom,207,foreach}},
      [{'fun',207,
        {clauses,
         [{clause,207,
           [{var,207,'SC'}],
           [],
           [{call,207,
             {atom,207,condense},
             [{var,207,'SC'},
              {var,207,'G'},
              {var,207,'SCG'},
              {var,207,'V2I'},
              {var,207,'I2C'}]}]}]}},
       {var,207,'SCs'}]},
     {call,208,
      {remote,208,{atom,208,ets},{atom,208,delete}},
      [{var,208,'V2I'}]},
     {call,209,
      {remote,209,{atom,209,ets},{atom,209,delete}},
      [{var,209,'I2C'}]},
     {var,210,'SCG'}]}]},
 {function,216,preorder,1,
  [{clause,216,
    [{var,216,'G'}],
    [],
    [{call,217,
      {remote,217,{atom,217,lists},{atom,217,reverse}},
      [{call,217,{atom,217,revpreorder},[{var,217,'G'}]}]}]}]},
 {function,223,postorder,1,
  [{clause,223,
    [{var,223,'G'}],
    [],
    [{call,224,
      {remote,224,{atom,224,lists},{atom,224,reverse}},
      [{call,224,{atom,224,revpostorder},[{var,224,'G'}]}]}]}]},
 {function,230,forest,2,
  [{clause,230,
    [{var,230,'G'},{var,230,'SF'}],
    [],
    [{call,231,
      {atom,231,forest},
      [{var,231,'G'},
       {var,231,'SF'},
       {call,231,
        {remote,231,{atom,231,digraph},{atom,231,vertices}},
        [{var,231,'G'}]}]}]}]},
 {function,233,forest,3,
  [{clause,233,
    [{var,233,'G'},{var,233,'SF'},{var,233,'Vs'}],
    [],
    [{call,234,
      {atom,234,forest},
      [{var,234,'G'},{var,234,'SF'},{var,234,'Vs'},{atom,234,first}]}]}]},
 {function,236,forest,4,
  [{clause,236,
    [{var,236,'G'},{var,236,'SF'},{var,236,'Vs'},{var,236,'HandleFirst'}],
    [],
    [{match,237,
      {var,237,'T'},
      {call,237,
       {remote,237,{atom,237,ets},{atom,237,new}},
       [{atom,237,forest},{cons,237,{atom,237,set},{nil,237}}]}},
     {match,238,
      {var,238,'F'},
      {'fun',238,
       {clauses,
        [{clause,238,
          [{var,238,'V'},{var,238,'LL'}],
          [],
          [{call,238,
            {atom,238,pretraverse},
            [{var,238,'HandleFirst'},
             {var,238,'V'},
             {var,238,'SF'},
             {var,238,'G'},
             {var,238,'T'},
             {var,238,'LL'}]}]}]}}},
     {match,239,
      {var,239,'LL'},
      {call,239,
       {remote,239,{atom,239,lists},{atom,239,foldl}},
       [{var,239,'F'},{nil,239},{var,239,'Vs'}]}},
     {call,240,{remote,240,{atom,240,ets},{atom,240,delete}},[{var,240,'T'}]},
     {var,241,'LL'}]}]},
 {function,243,pretraverse,6,
  [{clause,243,
    [{atom,243,first},
     {var,243,'V'},
     {var,243,'SF'},
     {var,243,'G'},
     {var,243,'T'},
     {var,243,'LL'}],
    [],
    [{call,244,
      {atom,244,ptraverse},
      [{cons,244,{var,244,'V'},{nil,244}},
       {var,244,'SF'},
       {var,244,'G'},
       {var,244,'T'},
       {nil,244},
       {var,244,'LL'}]}]},
   {clause,245,
    [{atom,245,not_first},
     {var,245,'V'},
     {var,245,'SF'},
     {var,245,'G'},
     {var,245,'T'},
     {var,245,'LL'}],
    [],
    [{'case',246,
      {call,246,
       {remote,246,{atom,246,ets},{atom,246,member}},
       [{var,246,'T'},{var,246,'V'}]},
      [{clause,247,
        [{atom,247,false}],
        [],
        [{call,247,
          {atom,247,ptraverse},
          [{call,247,{var,247,'SF'},[{var,247,'G'},{var,247,'V'},{nil,247}]},
           {var,247,'SF'},
           {var,247,'G'},
           {var,247,'T'},
           {nil,247},
           {var,247,'LL'}]}]},
       {clause,248,[{atom,248,true}],[],[{var,248,'LL'}]}]}]}]},
 {function,251,ptraverse,6,
  [{clause,251,
    [{cons,251,{var,251,'V'},{var,251,'Vs'}},
     {var,251,'SF'},
     {var,251,'G'},
     {var,251,'T'},
     {var,251,'Rs'},
     {var,251,'LL'}],
    [],
    [{'case',252,
      {call,252,
       {remote,252,{atom,252,ets},{atom,252,member}},
       [{var,252,'T'},{var,252,'V'}]},
      [{clause,253,
        [{atom,253,false}],
        [],
        [{call,254,
          {remote,254,{atom,254,ets},{atom,254,insert}},
          [{var,254,'T'},{tuple,254,[{var,254,'V'}]}]},
         {call,255,
          {atom,255,ptraverse},
          [{call,255,
            {var,255,'SF'},
            [{var,255,'G'},{var,255,'V'},{var,255,'Vs'}]},
           {var,255,'SF'},
           {var,255,'G'},
           {var,255,'T'},
           {cons,255,{var,255,'V'},{var,255,'Rs'}},
           {var,255,'LL'}]}]},
       {clause,256,
        [{atom,256,true}],
        [],
        [{call,257,
          {atom,257,ptraverse},
          [{var,257,'Vs'},
           {var,257,'SF'},
           {var,257,'G'},
           {var,257,'T'},
           {var,257,'Rs'},
           {var,257,'LL'}]}]}]}]},
   {clause,259,
    [{nil,259},
     {var,259,'_SF'},
     {var,259,'_G'},
     {var,259,'_T'},
     {nil,259},
     {var,259,'LL'}],
    [],
    [{var,260,'LL'}]},
   {clause,261,
    [{nil,261},
     {var,261,'_SF'},
     {var,261,'_G'},
     {var,261,'_T'},
     {var,261,'Rs'},
     {var,261,'LL'}],
    [],
    [{cons,262,{var,262,'Rs'},{var,262,'LL'}}]}]},
 {function,264,revpreorder,1,
  [{clause,264,
    [{var,264,'G'}],
    [],
    [{call,265,
      {remote,265,{atom,265,lists},{atom,265,append}},
      [{call,265,
        {atom,265,forest},
        [{var,265,'G'},{'fun',265,{function,out,3}}]}]}]}]},
 {function,267,revpostorder,1,
  [{clause,267,
    [{var,267,'G'}],
    [],
    [{match,268,
      {var,268,'T'},
      {call,268,
       {remote,268,{atom,268,ets},{atom,268,new}},
       [{atom,268,forest},{cons,268,{atom,268,set},{nil,268}}]}},
     {match,269,
      {var,269,'L'},
      {call,269,
       {atom,269,posttraverse},
       [{call,269,
         {remote,269,{atom,269,digraph},{atom,269,vertices}},
         [{var,269,'G'}]},
        {var,269,'G'},
        {var,269,'T'},
        {nil,269}]}},
     {call,270,{remote,270,{atom,270,ets},{atom,270,delete}},[{var,270,'T'}]},
     {var,271,'L'}]}]},
 {function,273,posttraverse,4,
  [{clause,273,
    [{cons,273,{var,273,'V'},{var,273,'Vs'}},
     {var,273,'G'},
     {var,273,'T'},
     {var,273,'L'}],
    [],
    [{match,274,
      {var,274,'L1'},
      {'case',274,
       {call,274,
        {remote,274,{atom,274,ets},{atom,274,member}},
        [{var,274,'T'},{var,274,'V'}]},
       [{clause,275,
         [{atom,275,false}],
         [],
         [{call,276,
           {remote,276,{atom,276,ets},{atom,276,insert}},
           [{var,276,'T'},{tuple,276,[{var,276,'V'}]}]},
          {cons,277,
           {var,277,'V'},
           {call,277,
            {atom,277,posttraverse},
            [{call,277,{atom,277,out},[{var,277,'G'},{var,277,'V'},{nil,277}]},
             {var,277,'G'},
             {var,277,'T'},
             {var,277,'L'}]}}]},
        {clause,278,[{atom,278,true}],[],[{var,279,'L'}]}]}},
     {call,281,
      {atom,281,posttraverse},
      [{var,281,'Vs'},{var,281,'G'},{var,281,'T'},{var,281,'L1'}]}]},
   {clause,282,
    [{nil,282},{var,282,'_G'},{var,282,'_T'},{var,282,'L'}],
    [],
    [{var,283,'L'}]}]},
 {function,285,in,3,
  [{clause,285,
    [{var,285,'G'},{var,285,'V'},{var,285,'Vs'}],
    [],
    [{op,286,'++',
      {call,286,
       {remote,286,{atom,286,digraph},{atom,286,in_neighbours}},
       [{var,286,'G'},{var,286,'V'}]},
      {var,286,'Vs'}}]}]},
 {function,288,out,3,
  [{clause,288,
    [{var,288,'G'},{var,288,'V'},{var,288,'Vs'}],
    [],
    [{op,289,'++',
      {call,289,
       {remote,289,{atom,289,digraph},{atom,289,out_neighbours}},
       [{var,289,'G'},{var,289,'V'}]},
      {var,289,'Vs'}}]}]},
 {function,291,inout,3,
  [{clause,291,
    [{var,291,'G'},{var,291,'V'},{var,291,'Vs'}],
    [],
    [{call,292,
      {atom,292,in},
      [{var,292,'G'},
       {var,292,'V'},
       {call,292,
        {atom,292,out},
        [{var,292,'G'},{var,292,'V'},{var,292,'Vs'}]}]}]}]},
 {function,294,remove_singletons,3,
  [{clause,294,
    [{cons,294,
      {match,294,{var,294,'C'},{cons,294,{var,294,'V'},{nil,294}}},
      {var,294,'Cs'}},
     {var,294,'G'},
     {var,294,'L'}],
    [],
    [{'case',295,
      {call,295,{atom,295,is_reflexive_vertex},[{var,295,'V'},{var,295,'G'}]},
      [{clause,296,
        [{atom,296,true}],
        [],
        [{call,296,
          {atom,296,remove_singletons},
          [{var,296,'Cs'},
           {var,296,'G'},
           {cons,296,{var,296,'C'},{var,296,'L'}}]}]},
       {clause,297,
        [{atom,297,false}],
        [],
        [{call,297,
          {atom,297,remove_singletons},
          [{var,297,'Cs'},{var,297,'G'},{var,297,'L'}]}]}]}]},
   {clause,299,
    [{cons,299,{var,299,'C'},{var,299,'Cs'}},{var,299,'G'},{var,299,'L'}],
    [],
    [{call,300,
      {atom,300,remove_singletons},
      [{var,300,'Cs'},{var,300,'G'},{cons,300,{var,300,'C'},{var,300,'L'}}]}]},
   {clause,301,[{nil,301},{var,301,'_G'},{var,301,'L'}],[],[{var,302,'L'}]}]},
 {function,304,is_reflexive_vertex,2,
  [{clause,304,
    [{var,304,'V'},{var,304,'G'}],
    [],
    [{call,305,
      {remote,305,{atom,305,lists},{atom,305,member}},
      [{var,305,'V'},
       {call,305,
        {remote,305,{atom,305,digraph},{atom,305,out_neighbours}},
        [{var,305,'G'},{var,305,'V'}]}]}]}]},
 {function,307,subgraph_opts,3,
  [{clause,307,
    [{var,307,'G'},{var,307,'Vs'},{var,307,'Opts'}],
    [],
    [{call,308,
      {atom,308,subgraph_opts},
      [{var,308,'Opts'},
       {atom,308,inherit},
       {atom,308,true},
       {var,308,'G'},
       {var,308,'Vs'}]}]}]},
 {function,310,subgraph_opts,5,
  [{clause,310,
    [{cons,310,
      {tuple,310,[{atom,310,type},{var,310,'Type'}]},
      {var,310,'Opts'}},
     {var,310,'_Type0'},
     {var,310,'Keep'},
     {var,310,'G'},
     {var,310,'Vs'}],
    [[{op,311,'=:=',{var,311,'Type'},{atom,311,inherit}}],
     [{call,311,{atom,311,is_list},[{var,311,'Type'}]}]],
    [{call,312,
      {atom,312,subgraph_opts},
      [{var,312,'Opts'},
       {var,312,'Type'},
       {var,312,'Keep'},
       {var,312,'G'},
       {var,312,'Vs'}]}]},
   {clause,313,
    [{cons,313,
      {tuple,313,[{atom,313,keep_labels},{var,313,'Keep'}]},
      {var,313,'Opts'}},
     {var,313,'Type'},
     {var,313,'_Keep0'},
     {var,313,'G'},
     {var,313,'Vs'}],
    [[{call,314,{atom,314,is_boolean},[{var,314,'Keep'}]}]],
    [{call,315,
      {atom,315,subgraph_opts},
      [{var,315,'Opts'},
       {var,315,'Type'},
       {var,315,'Keep'},
       {var,315,'G'},
       {var,315,'Vs'}]}]},
   {clause,316,
    [{nil,316},
     {atom,316,inherit},
     {var,316,'Keep'},
     {var,316,'G'},
     {var,316,'Vs'}],
    [],
    [{match,317,
      {var,317,'Info'},
      {call,317,
       {remote,317,{atom,317,digraph},{atom,317,info}},
       [{var,317,'G'}]}},
     {match,318,
      {tuple,318,
       [{var,318,'_'},{tuple,318,[{var,318,'_'},{var,318,'Cyclicity'}]}]},
      {call,318,
       {remote,318,{atom,318,lists},{atom,318,keysearch}},
       [{atom,318,cyclicity},{integer,318,1},{var,318,'Info'}]}},
     {match,319,
      {tuple,319,
       [{var,319,'_'},{tuple,319,[{var,319,'_'},{var,319,'Protection'}]}]},
      {call,319,
       {remote,319,{atom,319,lists},{atom,319,keysearch}},
       [{atom,319,protection},{integer,319,1},{var,319,'Info'}]}},
     {call,320,
      {atom,320,subgraph},
      [{var,320,'G'},
       {var,320,'Vs'},
       {cons,320,
        {var,320,'Cyclicity'},
        {cons,320,{var,320,'Protection'},{nil,320}}},
       {var,320,'Keep'}]}]},
   {clause,321,
    [{nil,321},{var,321,'Type'},{var,321,'Keep'},{var,321,'G'},{var,321,'Vs'}],
    [],
    [{call,322,
      {atom,322,subgraph},
      [{var,322,'G'},{var,322,'Vs'},{var,322,'Type'},{var,322,'Keep'}]}]},
   {clause,323,
    [{var,323,'_'},
     {var,323,'_Type'},
     {var,323,'_Keep'},
     {var,323,'_G'},
     {var,323,'_Vs'}],
    [],
    [{call,324,{atom,324,throw},[{atom,324,badarg}]}]}]},
 {function,326,subgraph,4,
  [{clause,326,
    [{var,326,'G'},{var,326,'Vs'},{var,326,'Type'},{var,326,'Keep'}],
    [],
    [{'try',327,
      [{call,327,
        {remote,327,{atom,327,digraph},{atom,327,new}},
        [{var,327,'Type'}]}],
      [{clause,328,
        [{var,328,'SG'}],
        [],
        [{call,329,
          {remote,329,{atom,329,lists},{atom,329,foreach}},
          [{'fun',329,
            {clauses,
             [{clause,329,
               [{var,329,'V'}],
               [],
               [{call,329,
                 {atom,329,subgraph_vertex},
                 [{var,329,'V'},
                  {var,329,'G'},
                  {var,329,'SG'},
                  {var,329,'Keep'}]}]}]}},
           {var,329,'Vs'}]},
         {match,330,
          {var,330,'EFun'},
          {'fun',330,
           {clauses,
            [{clause,330,
              [{var,330,'V'}],
              [],
              [{call,330,
                {remote,330,{atom,330,lists},{atom,330,foreach}},
                [{'fun',330,
                  {clauses,
                   [{clause,330,
                     [{var,330,'E'}],
                     [],
                     [{call,331,
                       {atom,331,subgraph_edge},
                       [{var,331,'E'},
                        {var,331,'G'},
                        {var,331,'SG'},
                        {var,331,'Keep'}]}]}]}},
                 {call,333,
                  {remote,333,{atom,333,digraph},{atom,333,out_edges}},
                  [{var,333,'G'},{var,333,'V'}]}]}]}]}}},
         {call,335,
          {remote,335,{atom,335,lists},{atom,335,foreach}},
          [{var,335,'EFun'},
           {call,335,
            {remote,335,{atom,335,digraph},{atom,335,vertices}},
            [{var,335,'SG'}]}]},
         {var,336,'SG'}]}],
      [{clause,338,
        [{tuple,338,[{atom,338,error},{atom,338,badarg},{var,338,'_'}]}],
        [],
        [{call,339,{atom,339,throw},[{atom,339,badarg}]}]}],
      []}]}]},
 {function,342,subgraph_vertex,4,
  [{clause,342,
    [{var,342,'V'},{var,342,'G'},{var,342,'SG'},{var,342,'Keep'}],
    [],
    [{'case',343,
      {call,343,
       {remote,343,{atom,343,digraph},{atom,343,vertex}},
       [{var,343,'G'},{var,343,'V'}]},
      [{clause,344,[{atom,344,false}],[],[{atom,344,ok}]},
       {clause,345,
        [{var,345,'_'}],
        [[{op,345,'not',{var,345,'Keep'}}]],
        [{call,345,
          {remote,345,{atom,345,digraph},{atom,345,add_vertex}},
          [{var,345,'SG'},{var,345,'V'}]}]},
       {clause,346,
        [{tuple,346,[{var,346,'_V'},{var,346,'Label'}]}],
        [[{var,346,'Keep'}]],
        [{call,346,
          {remote,346,{atom,346,digraph},{atom,346,add_vertex}},
          [{var,346,'SG'},{var,346,'V'},{var,346,'Label'}]}]}]}]}]},
 {function,349,subgraph_edge,4,
  [{clause,349,
    [{var,349,'E'},{var,349,'G'},{var,349,'SG'},{var,349,'Keep'}],
    [],
    [{match,350,
      {tuple,350,
       [{var,350,'_E'},{var,350,'V1'},{var,350,'V2'},{var,350,'Label'}]},
      {call,350,
       {remote,350,{atom,350,digraph},{atom,350,edge}},
       [{var,350,'G'},{var,350,'E'}]}},
     {'case',351,
      {call,351,
       {remote,351,{atom,351,digraph},{atom,351,vertex}},
       [{var,351,'SG'},{var,351,'V2'}]},
      [{clause,352,[{atom,352,false}],[],[{atom,352,ok}]},
       {clause,353,
        [{var,353,'_'}],
        [[{op,353,'not',{var,353,'Keep'}}]],
        [{call,353,
          {remote,353,{atom,353,digraph},{atom,353,add_edge}},
          [{var,353,'SG'},
           {var,353,'E'},
           {var,353,'V1'},
           {var,353,'V2'},
           {nil,353}]}]},
       {clause,354,
        [{var,354,'_'}],
        [[{var,354,'Keep'}]],
        [{call,354,
          {remote,354,{atom,354,digraph},{atom,354,add_edge}},
          [{var,354,'SG'},
           {var,354,'E'},
           {var,354,'V1'},
           {var,354,'V2'},
           {var,354,'Label'}]}]}]}]}]},
 {function,357,condense,5,
  [{clause,357,
    [{var,357,'SC'},
     {var,357,'G'},
     {var,357,'SCG'},
     {var,357,'V2I'},
     {var,357,'I2C'}],
    [],
    [{match,358,
      {var,358,'T'},
      {call,358,
       {remote,358,{atom,358,ets},{atom,358,new}},
       [{atom,358,condense},{nil,358}]}},
     {match,359,
      {var,359,'NFun'},
      {'fun',359,
       {clauses,
        [{clause,359,
          [{var,359,'Neighbour'}],
          [],
          [{match,360,
            {cons,360,{tuple,360,[{var,360,'_V'},{var,360,'I'}]},{nil,360}},
            {call,360,
             {remote,360,{atom,360,ets},{atom,360,lookup}},
             [{var,360,'V2I'},{var,360,'Neighbour'}]}},
           {call,361,
            {remote,361,{atom,361,ets},{atom,361,insert}},
            [{var,361,'T'},{tuple,361,[{var,361,'I'}]}]}]}]}}},
     {match,363,
      {var,363,'VFun'},
      {'fun',363,
       {clauses,
        [{clause,363,
          [{var,363,'V'}],
          [],
          [{call,363,
            {remote,363,{atom,363,lists},{atom,363,foreach}},
            [{var,363,'NFun'},
             {call,363,
              {remote,363,{atom,363,digraph},{atom,363,out_neighbours}},
              [{var,363,'G'},{var,363,'V'}]}]}]}]}}},
     {call,364,
      {remote,364,{atom,364,lists},{atom,364,foreach}},
      [{var,364,'VFun'},{var,364,'SC'}]},
     {call,365,
      {remote,365,{atom,365,digraph},{atom,365,add_vertex}},
      [{var,365,'SCG'},{var,365,'SC'}]},
     {call,366,
      {atom,366,condense},
      [{call,366,{remote,366,{atom,366,ets},{atom,366,first}},[{var,366,'T'}]},
       {var,366,'T'},
       {var,366,'SC'},
       {var,366,'G'},
       {var,366,'SCG'},
       {var,366,'I2C'}]},
     {call,367,
      {remote,367,{atom,367,ets},{atom,367,delete}},
      [{var,367,'T'}]}]}]},
 {function,369,condense,6,
  [{clause,369,
    [{atom,369,'$end_of_table'},
     {var,369,'_T'},
     {var,369,'_SC'},
     {var,369,'_G'},
     {var,369,'_SCG'},
     {var,369,'_I2C'}],
    [],
    [{atom,370,ok}]},
   {clause,371,
    [{var,371,'I'},
     {var,371,'T'},
     {var,371,'SC'},
     {var,371,'G'},
     {var,371,'SCG'},
     {var,371,'I2C'}],
    [],
    [{match,372,
      {cons,372,{tuple,372,[{var,372,'_'},{var,372,'C'}]},{nil,372}},
      {call,372,
       {remote,372,{atom,372,ets},{atom,372,lookup}},
       [{var,372,'I2C'},{var,372,'I'}]}},
     {call,373,
      {remote,373,{atom,373,digraph},{atom,373,add_vertex}},
      [{var,373,'SCG'},{var,373,'C'}]},
     {match,374,
      {var,374,'_'},
      {lc,374,
       {call,374,
        {remote,374,{atom,374,digraph},{atom,374,add_edge}},
        [{var,374,'SCG'},{var,374,'SC'},{var,374,'C'}]},
       [{op,374,'=/=',{var,374,'C'},{var,374,'SC'}}]}},
     {call,375,
      {atom,375,condense},
      [{call,375,
        {remote,375,{atom,375,ets},{atom,375,next}},
        [{var,375,'T'},{var,375,'I'}]},
       {var,375,'T'},
       {var,375,'SC'},
       {var,375,'G'},
       {var,375,'SCG'},
       {var,375,'I2C'}]}]}]}]
