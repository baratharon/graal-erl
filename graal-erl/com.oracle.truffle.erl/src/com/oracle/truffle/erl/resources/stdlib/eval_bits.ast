eval_bits
[]
[]
[{function,52,expr_grp,5,
     [{clause,52,
          [{var,52,'Fields'},
           {var,52,'Bindings'},
           {var,52,'EvalFun'},
           {nil,52},
           {var,52,'_'}],
          [],
          [{call,53,
               {atom,53,expr_grp},
               [{var,53,'Fields'},
                {var,53,'Bindings'},
                {var,53,'EvalFun'},
                {bin,53,[]}]}]},
      {clause,54,
          [{var,54,'Fields'},
           {var,54,'Bindings'},
           {var,54,'EvalFun'},
           {var,54,'ListOfBits'},
           {var,54,'_'}],
          [],
          [{match,55,
               {var,55,'Bin'},
               {call,55,{atom,55,convert_list},[{var,55,'ListOfBits'}]}},
           {call,56,
               {atom,56,expr_grp},
               [{var,56,'Fields'},
                {var,56,'Bindings'},
                {var,56,'EvalFun'},
                {var,56,'Bin'}]}]}]},
 {function,58,convert_list,1,
     [{clause,58,
          [{var,58,'List'}],
          [],
          [{bc,59,
               {bin,59,[{bin_element,59,{var,59,'X'},{integer,59,1},default}]},
               [{generate,59,{var,59,'X'},{var,59,'List'}}]}]}]},
 {function,61,expr_grp,3,
     [{clause,61,
          [{var,61,'Fields'},{var,61,'Bindings'},{var,61,'EvalFun'}],
          [],
          [{call,62,
               {atom,62,expr_grp},
               [{var,62,'Fields'},
                {var,62,'Bindings'},
                {var,62,'EvalFun'},
                {bin,62,[]}]}]}]},
 {function,64,expr_grp,4,
     [{clause,64,
          [{cons,64,{var,64,'Field'},{var,64,'FS'}},
           {var,64,'Bs0'},
           {var,64,'Lf'},
           {var,64,'Acc'}],
          [],
          [{match,65,
               {tuple,65,[{var,65,'Bin'},{var,65,'Bs'}]},
               {call,65,
                   {atom,65,eval_field},
                   [{var,65,'Field'},{var,65,'Bs0'},{var,65,'Lf'}]}},
           {call,66,
               {atom,66,expr_grp},
               [{var,66,'FS'},
                {var,66,'Bs'},
                {var,66,'Lf'},
                {bin,66,
                    [{bin_element,66,{var,66,'Acc'},default,[binary,{unit,1}]},
                     {bin_element,66,
                         {var,66,'Bin'},
                         default,
                         [binary,{unit,1}]}]}]}]},
      {clause,67,
          [{nil,67},{var,67,'Bs0'},{var,67,'_Lf'},{var,67,'Acc'}],
          [],
          [{tuple,68,[{atom,68,value},{var,68,'Acc'},{var,68,'Bs0'}]}]}]},
 {function,70,eval_field,3,
     [{clause,70,
          [{tuple,70,
               [{atom,70,bin_element},
                {var,70,'_'},
                {tuple,70,[{atom,70,string},{var,70,'_'},{var,70,'S'}]},
                {atom,70,default},
                {atom,70,default}]},
           {var,70,'Bs0'},
           {var,70,'_Fun'}],
          [],
          [{match,71,
               {var,71,'Latin1'},
               {lc,71,
                   {op,71,'band',{var,71,'C'},{integer,71,255}},
                   [{generate,71,{var,71,'C'},{var,71,'S'}}]}},
           {tuple,72,
               [{call,72,{atom,72,list_to_binary},[{var,72,'Latin1'}]},
                {var,72,'Bs0'}]}]},
      {clause,73,
          [{tuple,73,
               [{atom,73,bin_element},
                {var,73,'Line'},
                {tuple,73,[{atom,73,string},{var,73,'_'},{var,73,'S'}]},
                {var,73,'Size0'},
                {var,73,'Options0'}]},
           {var,73,'Bs'},
           {var,73,'_Fun'}],
          [],
          [{match,74,
               {tuple,74,
                   [{var,74,'_Size'},
                    {cons,74,
                        {var,74,'Type'},
                        {cons,74,
                            {var,74,'_Unit'},
                            {cons,74,
                                {var,74,'_Sign'},
                                {cons,74,{var,74,'Endian'},{nil,74}}}}}]},
               {call,75,
                   {atom,75,make_bit_type},
                   [{var,75,'Line'},{var,75,'Size0'},{var,75,'Options0'}]}},
           {match,76,
               {var,76,'Res'},
               {bc,76,
                   {bin,76,
                       [{bin_element,76,
                            {call,76,
                                {atom,76,eval_exp_field1},
                                [{var,76,'C'},
                                 {atom,76,no_size},
                                 {atom,76,no_unit},
                                 {var,77,'Type'},
                                 {var,77,'Endian'},
                                 {atom,77,no_sign}]},
                            default,
                            [binary]}]},
                   [{generate,78,{var,78,'C'},{var,78,'S'}}]}},
           {tuple,79,[{var,79,'Res'},{var,79,'Bs'}]}]},
      {clause,80,
          [{tuple,80,
               [{atom,80,bin_element},
                {var,80,'Line'},
                {var,80,'E'},
                {var,80,'Size0'},
                {var,80,'Options0'}]},
           {var,80,'Bs0'},
           {var,80,'Fun'}],
          [],
          [{match,81,
               {tuple,81,[{atom,81,value},{var,81,'V'},{var,81,'Bs1'}]},
               {call,81,{var,81,'Fun'},[{var,81,'E'},{var,81,'Bs0'}]}},
           {match,82,
               {tuple,82,
                   [{var,82,'Size1'},
                    {cons,82,
                        {var,82,'Type'},
                        {cons,82,
                            {tuple,82,[{atom,82,unit},{var,82,'Unit'}]},
                            {cons,82,
                                {var,82,'Sign'},
                                {cons,82,{var,82,'Endian'},{nil,82}}}}}]},
               {call,83,
                   {atom,83,make_bit_type},
                   [{var,83,'Line'},{var,83,'Size0'},{var,83,'Options0'}]}},
           {match,84,
               {tuple,84,[{atom,84,value},{var,84,'Size'},{var,84,'Bs'}]},
               {call,84,{var,84,'Fun'},[{var,84,'Size1'},{var,84,'Bs1'}]}},
           {tuple,85,
               [{call,85,
                    {atom,85,eval_exp_field1},
                    [{var,85,'V'},
                     {var,85,'Size'},
                     {var,85,'Unit'},
                     {var,85,'Type'},
                     {var,85,'Endian'},
                     {var,85,'Sign'}]},
                {var,85,'Bs'}]}]}]},
 {function,87,eval_exp_field1,6,
     [{clause,87,
          [{var,87,'V'},
           {var,87,'Size'},
           {var,87,'Unit'},
           {var,87,'Type'},
           {var,87,'Endian'},
           {var,87,'Sign'}],
          [],
          [{'try',88,
               [{call,89,
                    {atom,89,eval_exp_field},
                    [{var,89,'V'},
                     {var,89,'Size'},
                     {var,89,'Unit'},
                     {var,89,'Type'},
                     {var,89,'Endian'},
                     {var,89,'Sign'}]}],
               [],
               [{clause,91,
                    [{tuple,91,
                         [{atom,91,error},
                          {atom,91,system_limit},
                          {var,91,'_'}]}],
                    [],
                    [{call,92,{atom,92,error},[{atom,92,system_limit}]}]},
                {clause,93,
                    [{tuple,93,[{atom,93,error},{var,93,'_'},{var,93,'_'}]}],
                    [],
                    [{call,94,{atom,94,error},[{atom,94,badarg}]}]}],
               []}]}]},
 {function,97,eval_exp_field,6,
     [{clause,97,
          [{var,97,'Val'},
           {var,97,'Size'},
           {var,97,'Unit'},
           {atom,97,integer},
           {atom,97,little},
           {atom,97,signed}],
          [],
          [{bin,98,
               [{bin_element,98,
                    {var,98,'Val'},
                    {op,98,'*',{var,98,'Size'},{var,98,'Unit'}},
                    [little,signed]}]}]},
      {clause,99,
          [{var,99,'Val'},
           {var,99,'Size'},
           {var,99,'Unit'},
           {atom,99,integer},
           {atom,99,little},
           {atom,99,unsigned}],
          [],
          [{bin,100,
               [{bin_element,100,
                    {var,100,'Val'},
                    {op,100,'*',{var,100,'Size'},{var,100,'Unit'}},
                    [little]}]}]},
      {clause,101,
          [{var,101,'Val'},
           {var,101,'Size'},
           {var,101,'Unit'},
           {atom,101,integer},
           {atom,101,native},
           {atom,101,signed}],
          [],
          [{bin,102,
               [{bin_element,102,
                    {var,102,'Val'},
                    {op,102,'*',{var,102,'Size'},{var,102,'Unit'}},
                    [native,signed]}]}]},
      {clause,103,
          [{var,103,'Val'},
           {var,103,'Size'},
           {var,103,'Unit'},
           {atom,103,integer},
           {atom,103,native},
           {atom,103,unsigned}],
          [],
          [{bin,104,
               [{bin_element,104,
                    {var,104,'Val'},
                    {op,104,'*',{var,104,'Size'},{var,104,'Unit'}},
                    [native]}]}]},
      {clause,105,
          [{var,105,'Val'},
           {var,105,'Size'},
           {var,105,'Unit'},
           {atom,105,integer},
           {atom,105,big},
           {atom,105,signed}],
          [],
          [{bin,106,
               [{bin_element,106,
                    {var,106,'Val'},
                    {op,106,'*',{var,106,'Size'},{var,106,'Unit'}},
                    [signed]}]}]},
      {clause,107,
          [{var,107,'Val'},
           {var,107,'Size'},
           {var,107,'Unit'},
           {atom,107,integer},
           {atom,107,big},
           {atom,107,unsigned}],
          [],
          [{bin,108,
               [{bin_element,108,
                    {var,108,'Val'},
                    {op,108,'*',{var,108,'Size'},{var,108,'Unit'}},
                    default}]}]},
      {clause,109,
          [{var,109,'Val'},
           {var,109,'_Size'},
           {var,109,'_Unit'},
           {atom,109,utf8},
           {var,109,'_'},
           {var,109,'_'}],
          [],
          [{bin,110,[{bin_element,110,{var,110,'Val'},default,[utf8]}]}]},
      {clause,111,
          [{var,111,'Val'},
           {var,111,'_Size'},
           {var,111,'_Unit'},
           {atom,111,utf16},
           {atom,111,big},
           {var,111,'_'}],
          [],
          [{bin,112,[{bin_element,112,{var,112,'Val'},default,[big,utf16]}]}]},
      {clause,113,
          [{var,113,'Val'},
           {var,113,'_Size'},
           {var,113,'_Unit'},
           {atom,113,utf16},
           {atom,113,little},
           {var,113,'_'}],
          [],
          [{bin,114,
               [{bin_element,114,{var,114,'Val'},default,[little,utf16]}]}]},
      {clause,115,
          [{var,115,'Val'},
           {var,115,'_Size'},
           {var,115,'_Unit'},
           {atom,115,utf32},
           {atom,115,big},
           {var,115,'_'}],
          [],
          [{bin,116,[{bin_element,116,{var,116,'Val'},default,[big,utf32]}]}]},
      {clause,117,
          [{var,117,'Val'},
           {var,117,'_Size'},
           {var,117,'_Unit'},
           {atom,117,utf32},
           {atom,117,little},
           {var,117,'_'}],
          [],
          [{bin,118,
               [{bin_element,118,{var,118,'Val'},default,[little,utf32]}]}]},
      {clause,119,
          [{var,119,'Val'},
           {var,119,'Size'},
           {var,119,'Unit'},
           {atom,119,float},
           {atom,119,little},
           {var,119,'_'}],
          [],
          [{bin,120,
               [{bin_element,120,
                    {var,120,'Val'},
                    {op,120,'*',{var,120,'Size'},{var,120,'Unit'}},
                    [float,little]}]}]},
      {clause,121,
          [{var,121,'Val'},
           {var,121,'Size'},
           {var,121,'Unit'},
           {atom,121,float},
           {atom,121,native},
           {var,121,'_'}],
          [],
          [{bin,122,
               [{bin_element,122,
                    {var,122,'Val'},
                    {op,122,'*',{var,122,'Size'},{var,122,'Unit'}},
                    [float,native]}]}]},
      {clause,123,
          [{var,123,'Val'},
           {var,123,'Size'},
           {var,123,'Unit'},
           {atom,123,float},
           {atom,123,big},
           {var,123,'_'}],
          [],
          [{bin,124,
               [{bin_element,124,
                    {var,124,'Val'},
                    {op,124,'*',{var,124,'Size'},{var,124,'Unit'}},
                    [float]}]}]},
      {clause,125,
          [{var,125,'Val'},
           {atom,125,all},
           {var,125,'Unit'},
           {atom,125,binary},
           {var,125,'_'},
           {var,125,'_'}],
          [],
          [{'case',126,
               {call,126,{atom,126,bit_size},[{var,126,'Val'}]},
               [{clause,127,
                    [{var,127,'Size'}],
                    [[{op,127,'=:=',
                          {op,127,'rem',{var,127,'Size'},{var,127,'Unit'}},
                          {integer,127,0}}]],
                    [{bin,128,
                         [{bin_element,128,
                              {var,128,'Val'},
                              {var,128,'Size'},
                              [binary,{unit,1}]}]}]},
                {clause,129,
                    [{var,129,'_'}],
                    [],
                    [{call,130,{atom,130,error},[{atom,130,badarg}]}]}]}]},
      {clause,132,
          [{var,132,'Val'},
           {var,132,'Size'},
           {var,132,'Unit'},
           {atom,132,binary},
           {var,132,'_'},
           {var,132,'_'}],
          [],
          [{bin,133,
               [{bin_element,133,
                    {var,133,'Val'},
                    {op,133,'*',{var,133,'Size'},{var,133,'Unit'}},
                    [binary,{unit,1}]}]}]}]},
 {function,147,bin_gen,6,
     [{clause,147,
          [{tuple,147,[{atom,147,bin},{var,147,'_'},{var,147,'Fs'}]},
           {var,147,'Bin'},
           {var,147,'Bs0'},
           {var,147,'BBs0'},
           {var,147,'Mfun'},
           {var,147,'Efun'}],
          [],
          [{call,148,
               {atom,148,bin_gen},
               [{var,148,'Fs'},
                {var,148,'Bin'},
                {var,148,'Bs0'},
                {var,148,'BBs0'},
                {var,148,'Mfun'},
                {var,148,'Efun'},
                {atom,148,true}]}]}]},
 {function,150,bin_gen,7,
     [{clause,150,
          [{cons,150,{var,150,'F'},{var,150,'Fs'}},
           {var,150,'Bin'},
           {var,150,'Bs0'},
           {var,150,'BBs0'},
           {var,150,'Mfun'},
           {var,150,'Efun'},
           {var,150,'Flag'}],
          [[{call,151,
                {atom,151,is_function},
                [{var,151,'Mfun'},{integer,151,2}]},
            {call,151,
                {atom,151,is_function},
                [{var,151,'Efun'},{integer,151,2}]}]],
          [{'case',152,
               {call,152,
                   {atom,152,bin_gen_field},
                   [{var,152,'F'},
                    {var,152,'Bin'},
                    {var,152,'Bs0'},
                    {var,152,'BBs0'},
                    {var,152,'Mfun'},
                    {var,152,'Efun'}]},
               [{clause,153,
                    [{tuple,153,
                         [{atom,153,match},
                          {var,153,'Bs'},
                          {var,153,'BBs'},
                          {var,153,'Rest'}]}],
                    [],
                    [{call,154,
                         {atom,154,bin_gen},
                         [{var,154,'Fs'},
                          {var,154,'Rest'},
                          {var,154,'Bs'},
                          {var,154,'BBs'},
                          {var,154,'Mfun'},
                          {var,154,'Efun'},
                          {var,154,'Flag'}]}]},
                {clause,155,
                    [{tuple,155,[{atom,155,nomatch},{var,155,'Rest'}]}],
                    [],
                    [{call,156,
                         {atom,156,bin_gen},
                         [{var,156,'Fs'},
                          {var,156,'Rest'},
                          {var,156,'Bs0'},
                          {var,156,'BBs0'},
                          {var,156,'Mfun'},
                          {var,156,'Efun'},
                          {atom,156,false}]}]},
                {clause,157,[{atom,157,done}],[],[{atom,158,done}]}]}]},
      {clause,160,
          [{nil,160},
           {var,160,'Bin'},
           {var,160,'Bs0'},
           {var,160,'_BBs0'},
           {var,160,'_Mfun'},
           {var,160,'_Efun'},
           {atom,160,true}],
          [],
          [{tuple,161,[{atom,161,match},{var,161,'Bin'},{var,161,'Bs0'}]}]},
      {clause,162,
          [{nil,162},
           {var,162,'Bin'},
           {var,162,'_Bs0'},
           {var,162,'_BBs0'},
           {var,162,'_Mfun'},
           {var,162,'_Efun'},
           {atom,162,false}],
          [],
          [{tuple,163,[{atom,163,nomatch},{var,163,'Bin'}]}]}]},
 {function,165,bin_gen_field,6,
     [{clause,165,
          [{tuple,165,
               [{atom,165,bin_element},
                {var,165,'_'},
                {tuple,165,[{atom,165,string},{var,165,'_'},{var,165,'S'}]},
                {atom,165,default},
                {atom,165,default}]},
           {var,166,'Bin'},
           {var,166,'Bs'},
           {var,166,'BBs'},
           {var,166,'_Mfun'},
           {var,166,'_Efun'}],
          [],
          [{match,167,
               {var,167,'Bits'},
               {'try',167,
                   [{call,167,{atom,167,list_to_binary},[{var,167,'S'}]}],
                   [],
                   [{clause,168,
                        [{tuple,168,
                             [{var,168,'_'},{var,168,'_'},{var,168,'_'}]}],
                        [],
                        [{bin,168,[]}]}],
                   []}},
           {match,170,
               {var,170,'Size'},
               {call,170,{atom,170,length},[{var,170,'S'}]}},
           {'case',171,
               {var,171,'Bin'},
               [{clause,172,
                    [{bin,172,
                         [{bin_element,172,
                              {var,172,'Bits'},
                              {var,172,'Size'},
                              [binary]},
                          {bin_element,172,
                              {var,172,'Rest'},
                              default,
                              [bitstring]}]}],
                    [],
                    [{tuple,173,
                         [{atom,173,match},
                          {var,173,'Bs'},
                          {var,173,'BBs'},
                          {var,173,'Rest'}]}]},
                {clause,174,
                    [{bin,174,
                         [{bin_element,174,
                              {var,174,'_'},
                              {var,174,'Size'},
                              [binary]},
                          {bin_element,174,
                              {var,174,'Rest'},
                              default,
                              [bitstring]}]}],
                    [],
                    [{tuple,175,[{atom,175,nomatch},{var,175,'Rest'}]}]},
                {clause,176,[{var,176,'_'}],[],[{atom,177,done}]}]}]},
      {clause,179,
          [{tuple,179,
               [{atom,179,bin_element},
                {var,179,'Line'},
                {tuple,179,
                    [{atom,179,string},{var,179,'SLine'},{var,179,'S'}]},
                {var,179,'Size0'},
                {var,179,'Options0'}]},
           {var,180,'Bin0'},
           {var,180,'Bs0'},
           {var,180,'BBs0'},
           {var,180,'Mfun'},
           {var,180,'Efun'}],
          [],
          [{match,181,
               {tuple,181,
                   [{var,181,'Size1'},
                    {cons,181,
                        {var,181,'Type'},
                        {cons,181,
                            {tuple,181,[{atom,181,unit},{var,181,'Unit'}]},
                            {cons,181,
                                {var,181,'Sign'},
                                {cons,181,{var,181,'Endian'},{nil,181}}}}}]},
               {call,182,
                   {atom,182,make_bit_type},
                   [{var,182,'Line'},{var,182,'Size0'},{var,182,'Options0'}]}},
           {call,183,
               {atom,183,match_check_size},
               [{var,183,'Mfun'},{var,183,'Size1'},{var,183,'BBs0'}]},
           {match,184,
               {tuple,184,
                   [{atom,184,value},{var,184,'Size'},{var,184,'_BBs'}]},
               {call,184,
                   {var,184,'Efun'},
                   [{var,184,'Size1'},{var,184,'BBs0'}]}},
           {match,185,
               {var,185,'F'},
               {'fun',185,
                   {clauses,
                       [{clause,185,
                            [{var,185,'C'},
                             {var,185,'Bin'},
                             {var,185,'Bs'},
                             {var,185,'BBs'}],
                            [],
                            [{call,186,
                                 {atom,186,bin_gen_field1},
                                 [{var,186,'Bin'},
                                  {var,186,'Type'},
                                  {var,186,'Size'},
                                  {var,186,'Unit'},
                                  {var,186,'Sign'},
                                  {var,186,'Endian'},
                                  {tuple,187,
                                      [{atom,187,integer},
                                       {var,187,'SLine'},
                                       {var,187,'C'}]},
                                  {var,187,'Bs'},
                                  {var,187,'BBs'},
                                  {var,187,'Mfun'}]}]}]}}},
           {call,189,
               {atom,189,bin_gen_field_string},
               [{var,189,'S'},
                {var,189,'Bin0'},
                {var,189,'Bs0'},
                {var,189,'BBs0'},
                {var,189,'F'}]}]},
      {clause,190,
          [{tuple,190,
               [{atom,190,bin_element},
                {var,190,'Line'},
                {var,190,'VE'},
                {var,190,'Size0'},
                {var,190,'Options0'}]},
           {var,191,'Bin'},
           {var,191,'Bs0'},
           {var,191,'BBs0'},
           {var,191,'Mfun'},
           {var,191,'Efun'}],
          [],
          [{match,192,
               {tuple,192,
                   [{var,192,'Size1'},
                    {cons,192,
                        {var,192,'Type'},
                        {cons,192,
                            {tuple,192,[{atom,192,unit},{var,192,'Unit'}]},
                            {cons,192,
                                {var,192,'Sign'},
                                {cons,192,{var,192,'Endian'},{nil,192}}}}}]},
               {call,193,
                   {atom,193,make_bit_type},
                   [{var,193,'Line'},{var,193,'Size0'},{var,193,'Options0'}]}},
           {match,194,
               {var,194,'V'},
               {call,194,
                   {remote,194,{atom,194,erl_eval},{atom,194,partial_eval}},
                   [{var,194,'VE'}]}},
           {match,195,
               {var,195,'NewV'},
               {call,195,
                   {atom,195,coerce_to_float},
                   [{var,195,'V'},{var,195,'Type'}]}},
           {call,196,
               {atom,196,match_check_size},
               [{var,196,'Mfun'},
                {var,196,'Size1'},
                {var,196,'BBs0'},
                {atom,196,false}]},
           {match,197,
               {tuple,197,
                   [{atom,197,value},{var,197,'Size'},{var,197,'_BBs'}]},
               {call,197,
                   {var,197,'Efun'},
                   [{var,197,'Size1'},{var,197,'BBs0'}]}},
           {call,198,
               {atom,198,bin_gen_field1},
               [{var,198,'Bin'},
                {var,198,'Type'},
                {var,198,'Size'},
                {var,198,'Unit'},
                {var,198,'Sign'},
                {var,198,'Endian'},
                {var,198,'NewV'},
                {var,198,'Bs0'},
                {var,198,'BBs0'},
                {var,198,'Mfun'}]}]}]},
 {function,200,bin_gen_field_string,5,
     [{clause,200,
          [{nil,200},
           {var,200,'Rest'},
           {var,200,'Bs'},
           {var,200,'BBs'},
           {var,200,'_F'}],
          [],
          [{tuple,201,
               [{atom,201,match},
                {var,201,'Bs'},
                {var,201,'BBs'},
                {var,201,'Rest'}]}]},
      {clause,202,
          [{cons,202,{var,202,'C'},{var,202,'Cs'}},
           {var,202,'Bin0'},
           {var,202,'Bs0'},
           {var,202,'BBs0'},
           {var,202,'Fun'}],
          [],
          [{'case',203,
               {call,203,
                   {var,203,'Fun'},
                   [{var,203,'C'},
                    {var,203,'Bin0'},
                    {var,203,'Bs0'},
                    {var,203,'BBs0'}]},
               [{clause,204,
                    [{tuple,204,
                         [{atom,204,match},
                          {var,204,'Bs'},
                          {var,204,'BBs'},
                          {var,204,'Rest'}]}],
                    [],
                    [{call,205,
                         {atom,205,bin_gen_field_string},
                         [{var,205,'Cs'},
                          {var,205,'Rest'},
                          {var,205,'Bs'},
                          {var,205,'BBs'},
                          {var,205,'Fun'}]}]},
                {clause,206,
                    [{tuple,206,[{atom,206,nomatch},{var,206,'Rest'}]}],
                    [],
                    [{tuple,207,[{atom,207,nomatch},{var,207,'Rest'}]}]},
                {clause,208,[{atom,208,done}],[],[{atom,209,done}]}]}]}]},
 {function,212,bin_gen_field1,10,
     [{clause,212,
          [{var,212,'Bin'},
           {var,212,'Type'},
           {var,212,'Size'},
           {var,212,'Unit'},
           {var,212,'Sign'},
           {var,212,'Endian'},
           {var,212,'NewV'},
           {var,212,'Bs0'},
           {var,212,'BBs0'},
           {var,212,'Mfun'}],
          [],
          [{'case',213,
               {'catch',213,
                   {call,213,
                       {atom,213,get_value},
                       [{var,213,'Bin'},
                        {var,213,'Type'},
                        {var,213,'Size'},
                        {var,213,'Unit'},
                        {var,213,'Sign'},
                        {var,213,'Endian'}]}},
               [{clause,214,
                    [{tuple,214,
                         [{var,214,'Val'},
                          {match,214,
                              {bin,214,
                                  [{bin_element,214,
                                       {var,214,'_'},
                                       default,
                                       [bitstring]}]},
                              {var,214,'Rest'}}]}],
                    [],
                    [{'case',215,
                         {'catch',215,
                             {call,215,
                                 {var,215,'Mfun'},
                                 [{atom,215,match},
                                  {tuple,215,
                                      [{var,215,'NewV'},
                                       {var,215,'Val'},
                                       {var,215,'Bs0'}]}]}},
                         [{clause,216,
                              [{tuple,216,[{atom,216,match},{var,216,'Bs'}]}],
                              [],
                              [{match,217,
                                   {var,217,'BBs'},
                                   {call,217,
                                       {atom,217,add_bin_binding},
                                       [{var,217,'Mfun'},
                                        {var,217,'NewV'},
                                        {var,217,'Bs'},
                                        {var,217,'BBs0'}]}},
                               {tuple,218,
                                   [{atom,218,match},
                                    {var,218,'Bs'},
                                    {var,218,'BBs'},
                                    {var,218,'Rest'}]}]},
                          {clause,219,
                              [{var,219,'_'}],
                              [],
                              [{tuple,220,
                                   [{atom,220,nomatch},
                                    {var,220,'Rest'}]}]}]}]},
                {clause,222,[{var,222,'_'}],[],[{atom,223,done}]}]}]}]},
 {function,237,match_bits,7,
     [{clause,237,
          [{var,237,'Fs'},
           {var,237,'Bin'},
           {var,237,'Bs0'},
           {var,237,'BBs'},
           {var,237,'Mfun'},
           {var,237,'Efun'},
           {var,237,'_'}],
          [],
          [{call,238,
               {atom,238,match_bits},
               [{var,238,'Fs'},
                {var,238,'Bin'},
                {var,238,'Bs0'},
                {var,238,'BBs'},
                {var,238,'Mfun'},
                {var,238,'Efun'}]}]}]},
 {function,240,match_bits,6,
     [{clause,240,
          [{var,240,'Fs'},
           {var,240,'Bin'},
           {var,240,'Bs0'},
           {var,240,'BBs'},
           {var,240,'Mfun'},
           {var,240,'Efun'}],
          [[{call,241,
                {atom,241,is_function},
                [{var,241,'Mfun'},{integer,241,2}]},
            {call,241,
                {atom,241,is_function},
                [{var,241,'Efun'},{integer,241,2}]}]],
          [{'case',242,
               {'catch',242,
                   {call,242,
                       {atom,242,match_bits_1},
                       [{var,242,'Fs'},
                        {var,242,'Bin'},
                        {var,242,'Bs0'},
                        {var,242,'BBs'},
                        {var,242,'Mfun'},
                        {var,242,'Efun'}]}},
               [{clause,243,
                    [{tuple,243,[{atom,243,match},{var,243,'Bs'}]}],
                    [],
                    [{tuple,243,[{atom,243,match},{var,243,'Bs'}]}]},
                {clause,244,
                    [{atom,244,invalid}],
                    [],
                    [{call,244,{atom,244,throw},[{atom,244,invalid}]}]},
                {clause,245,
                    [{var,245,'_Error'}],
                    [],
                    [{call,245,{atom,245,throw},[{atom,245,nomatch}]}]}]}]}]},
 {function,248,match_bits_1,6,
     [{clause,248,
          [{nil,248},
           {bin,248,[]},
           {var,248,'Bs'},
           {var,248,'_BBs'},
           {var,248,'_Mfun'},
           {var,248,'_Efun'}],
          [],
          [{tuple,249,[{atom,249,match},{var,249,'Bs'}]}]},
      {clause,250,
          [{cons,250,{var,250,'F'},{var,250,'Fs'}},
           {var,250,'Bits0'},
           {var,250,'Bs0'},
           {var,250,'BBs0'},
           {var,250,'Mfun'},
           {var,250,'Efun'}],
          [],
          [{match,251,
               {tuple,251,[{var,251,'Bs'},{var,251,'BBs'},{var,251,'Bits'}]},
               {call,251,
                   {atom,251,match_field_1},
                   [{var,251,'F'},
                    {var,251,'Bits0'},
                    {var,251,'Bs0'},
                    {var,251,'BBs0'},
                    {var,251,'Mfun'},
                    {var,251,'Efun'}]}},
           {call,252,
               {atom,252,match_bits_1},
               [{var,252,'Fs'},
                {var,252,'Bits'},
                {var,252,'Bs'},
                {var,252,'BBs'},
                {var,252,'Mfun'},
                {var,252,'Efun'}]}]}]},
 {function,254,match_field_1,6,
     [{clause,254,
          [{tuple,254,
               [{atom,254,bin_element},
                {var,254,'_'},
                {tuple,254,[{atom,254,string},{var,254,'_'},{var,254,'S'}]},
                {atom,254,default},
                {atom,254,default}]},
           {var,255,'Bin'},
           {var,255,'Bs'},
           {var,255,'BBs'},
           {var,255,'_Mfun'},
           {var,255,'_Efun'}],
          [],
          [{match,256,
               {var,256,'Bits'},
               {call,256,{atom,256,list_to_binary},[{var,256,'S'}]}},
           {match,257,
               {var,257,'Size'},
               {call,257,{atom,257,byte_size},[{var,257,'Bits'}]}},
           {match,258,
               {bin,258,
                   [{bin_element,258,
                        {var,258,'Bits'},
                        {var,258,'Size'},
                        [binary]},
                    {bin_element,258,
                        {var,258,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,258,'Bin'}},
           {tuple,259,[{var,259,'Bs'},{var,259,'BBs'},{var,259,'Rest'}]}]},
      {clause,260,
          [{tuple,260,
               [{atom,260,bin_element},
                {var,260,'Line'},
                {tuple,260,
                    [{atom,260,string},{var,260,'SLine'},{var,260,'S'}]},
                {var,260,'Size0'},
                {var,260,'Options0'}]},
           {var,261,'Bin0'},
           {var,261,'Bs0'},
           {var,261,'BBs0'},
           {var,261,'Mfun'},
           {var,261,'Efun'}],
          [],
          [{match,262,
               {tuple,262,
                   [{var,262,'Size1'},
                    {cons,262,
                        {var,262,'Type'},
                        {cons,262,
                            {tuple,262,[{atom,262,unit},{var,262,'Unit'}]},
                            {cons,262,
                                {var,262,'Sign'},
                                {cons,262,{var,262,'Endian'},{nil,262}}}}}]},
               {call,263,
                   {atom,263,make_bit_type},
                   [{var,263,'Line'},{var,263,'Size0'},{var,263,'Options0'}]}},
           {match,264,
               {var,264,'Size2'},
               {call,264,
                   {remote,264,{atom,264,erl_eval},{atom,264,partial_eval}},
                   [{var,264,'Size1'}]}},
           {call,265,
               {atom,265,match_check_size},
               [{var,265,'Mfun'},{var,265,'Size2'},{var,265,'BBs0'}]},
           {match,266,
               {tuple,266,
                   [{atom,266,value},{var,266,'Size'},{var,266,'_BBs'}]},
               {call,266,
                   {var,266,'Efun'},
                   [{var,266,'Size2'},{var,266,'BBs0'}]}},
           {match,267,
               {var,267,'F'},
               {'fun',267,
                   {clauses,
                       [{clause,267,
                            [{var,267,'C'},
                             {var,267,'Bin'},
                             {var,267,'Bs'},
                             {var,267,'BBs'}],
                            [],
                            [{call,268,
                                 {atom,268,match_field},
                                 [{var,268,'Bin'},
                                  {var,268,'Type'},
                                  {var,268,'Size'},
                                  {var,268,'Unit'},
                                  {var,268,'Sign'},
                                  {var,268,'Endian'},
                                  {tuple,269,
                                      [{atom,269,integer},
                                       {var,269,'SLine'},
                                       {var,269,'C'}]},
                                  {var,269,'Bs'},
                                  {var,269,'BBs'},
                                  {var,269,'Mfun'}]}]}]}}},
           {call,271,
               {atom,271,match_field_string},
               [{var,271,'S'},
                {var,271,'Bin0'},
                {var,271,'Bs0'},
                {var,271,'BBs0'},
                {var,271,'F'}]}]},
      {clause,272,
          [{tuple,272,
               [{atom,272,bin_element},
                {var,272,'Line'},
                {var,272,'VE'},
                {var,272,'Size0'},
                {var,272,'Options0'}]},
           {var,273,'Bin'},
           {var,273,'Bs0'},
           {var,273,'BBs0'},
           {var,273,'Mfun'},
           {var,273,'Efun'}],
          [],
          [{match,274,
               {tuple,274,
                   [{var,274,'Size1'},
                    {cons,274,
                        {var,274,'Type'},
                        {cons,274,
                            {tuple,274,[{atom,274,unit},{var,274,'Unit'}]},
                            {cons,274,
                                {var,274,'Sign'},
                                {cons,274,{var,274,'Endian'},{nil,274}}}}}]},
               {call,275,
                   {atom,275,make_bit_type},
                   [{var,275,'Line'},{var,275,'Size0'},{var,275,'Options0'}]}},
           {match,276,
               {var,276,'V'},
               {call,276,
                   {remote,276,{atom,276,erl_eval},{atom,276,partial_eval}},
                   [{var,276,'VE'}]}},
           {match,277,
               {var,277,'NewV'},
               {call,277,
                   {atom,277,coerce_to_float},
                   [{var,277,'V'},{var,277,'Type'}]}},
           {match,278,
               {var,278,'Size2'},
               {call,278,
                   {remote,278,{atom,278,erl_eval},{atom,278,partial_eval}},
                   [{var,278,'Size1'}]}},
           {call,279,
               {atom,279,match_check_size},
               [{var,279,'Mfun'},{var,279,'Size2'},{var,279,'BBs0'}]},
           {match,280,
               {tuple,280,
                   [{atom,280,value},{var,280,'Size'},{var,280,'_BBs'}]},
               {call,280,
                   {var,280,'Efun'},
                   [{var,280,'Size2'},{var,280,'BBs0'}]}},
           {call,281,
               {atom,281,match_field},
               [{var,281,'Bin'},
                {var,281,'Type'},
                {var,281,'Size'},
                {var,281,'Unit'},
                {var,281,'Sign'},
                {var,281,'Endian'},
                {var,281,'NewV'},
                {var,281,'Bs0'},
                {var,281,'BBs0'},
                {var,281,'Mfun'}]}]}]},
 {function,283,match_field_string,5,
     [{clause,283,
          [{nil,283},
           {var,283,'Rest'},
           {var,283,'Bs'},
           {var,283,'BBs'},
           {var,283,'_Fun'}],
          [],
          [{tuple,284,[{var,284,'Bs'},{var,284,'BBs'},{var,284,'Rest'}]}]},
      {clause,285,
          [{cons,285,{var,285,'C'},{var,285,'Cs'}},
           {var,285,'Bin0'},
           {var,285,'Bs0'},
           {var,285,'BBs0'},
           {var,285,'Fun'}],
          [],
          [{match,286,
               {tuple,286,[{var,286,'Bs'},{var,286,'BBs'},{var,286,'Bin'}]},
               {call,286,
                   {var,286,'Fun'},
                   [{var,286,'C'},
                    {var,286,'Bin0'},
                    {var,286,'Bs0'},
                    {var,286,'BBs0'}]}},
           {call,287,
               {atom,287,match_field_string},
               [{var,287,'Cs'},
                {var,287,'Bin'},
                {var,287,'Bs'},
                {var,287,'BBs'},
                {var,287,'Fun'}]}]}]},
 {function,289,match_field,10,
     [{clause,289,
          [{var,289,'Bin'},
           {var,289,'Type'},
           {var,289,'Size'},
           {var,289,'Unit'},
           {var,289,'Sign'},
           {var,289,'Endian'},
           {var,289,'NewV'},
           {var,289,'Bs0'},
           {var,289,'BBs0'},
           {var,289,'Mfun'}],
          [],
          [{match,290,
               {tuple,290,[{var,290,'Val'},{var,290,'Rest'}]},
               {call,290,
                   {atom,290,get_value},
                   [{var,290,'Bin'},
                    {var,290,'Type'},
                    {var,290,'Size'},
                    {var,290,'Unit'},
                    {var,290,'Sign'},
                    {var,290,'Endian'}]}},
           {match,291,
               {tuple,291,[{atom,291,match},{var,291,'Bs'}]},
               {call,291,
                   {var,291,'Mfun'},
                   [{atom,291,match},
                    {tuple,291,
                        [{var,291,'NewV'},{var,291,'Val'},{var,291,'Bs0'}]}]}},
           {match,292,
               {var,292,'BBs'},
               {call,292,
                   {atom,292,add_bin_binding},
                   [{var,292,'Mfun'},
                    {var,292,'NewV'},
                    {var,292,'Bs'},
                    {var,292,'BBs0'}]}},
           {tuple,293,[{var,293,'Bs'},{var,293,'BBs'},{var,293,'Rest'}]}]}]},
 {function,296,coerce_to_float,2,
     [{clause,296,
          [{match,296,
               {tuple,296,[{atom,296,integer},{var,296,'L'},{var,296,'I'}]},
               {var,296,'E'}},
           {atom,296,float}],
          [],
          [{'try',297,
               [{tuple,298,
                    [{atom,298,float},
                     {var,298,'L'},
                     {call,298,{atom,298,float},[{var,298,'I'}]}]}],
               [],
               [{clause,300,
                    [{tuple,300,
                         [{atom,300,error},{atom,300,badarg},{var,300,'_'}]}],
                    [],
                    [{var,300,'E'}]},
                {clause,301,
                    [{tuple,301,
                         [{atom,301,error},
                          {atom,301,badarith},
                          {var,301,'_'}]}],
                    [],
                    [{var,301,'E'}]}],
               []}]},
      {clause,303,[{var,303,'E'},{var,303,'_Type'}],[],[{var,304,'E'}]}]},
 {function,306,add_bin_binding,4,
     [{clause,306,
          [{var,306,'_'},
           {tuple,306,[{atom,306,var},{var,306,'_'},{atom,306,'_'}]},
           {var,306,'_Bs'},
           {var,306,'BBs'}],
          [],
          [{var,307,'BBs'}]},
      {clause,308,
          [{var,308,'Mfun'},
           {tuple,308,[{atom,308,var},{var,308,'_'},{var,308,'Name'}]},
           {var,308,'Bs'},
           {var,308,'BBs'}],
          [],
          [{match,309,
               {tuple,309,[{atom,309,value},{var,309,'Value'}]},
               {call,309,
                   {var,309,'Mfun'},
                   [{atom,309,binding},
                    {tuple,309,[{var,309,'Name'},{var,309,'Bs'}]}]}},
           {call,310,
               {var,310,'Mfun'},
               [{atom,310,add_binding},
                {tuple,310,
                    [{var,310,'Name'},{var,310,'Value'},{var,310,'BBs'}]}]}]},
      {clause,311,
          [{var,311,'_'},{var,311,'_'},{var,311,'_Bs'},{var,311,'BBs'}],
          [],
          [{var,312,'BBs'}]}]},
 {function,314,get_value,6,
     [{clause,314,
          [{var,314,'Bin'},
           {atom,314,integer},
           {var,314,'Size'},
           {var,314,'Unit'},
           {var,314,'Sign'},
           {var,314,'Endian'}],
          [],
          [{call,315,
               {atom,315,get_integer},
               [{var,315,'Bin'},
                {op,315,'*',{var,315,'Size'},{var,315,'Unit'}},
                {var,315,'Sign'},
                {var,315,'Endian'}]}]},
      {clause,316,
          [{var,316,'Bin'},
           {atom,316,float},
           {var,316,'Size'},
           {var,316,'Unit'},
           {var,316,'_Sign'},
           {var,316,'Endian'}],
          [],
          [{call,317,
               {atom,317,get_float},
               [{var,317,'Bin'},
                {op,317,'*',{var,317,'Size'},{var,317,'Unit'}},
                {var,317,'Endian'}]}]},
      {clause,318,
          [{var,318,'Bin'},
           {atom,318,utf8},
           {atom,318,undefined},
           {var,318,'_Unit'},
           {var,318,'_Sign'},
           {var,318,'_Endian'}],
          [],
          [{match,319,
               {bin,319,
                   [{bin_element,319,{var,319,'I'},default,[utf8]},
                    {bin_element,319,{var,319,'Rest'},default,[bits]}]},
               {var,319,'Bin'}},
           {tuple,320,[{var,320,'I'},{var,320,'Rest'}]}]},
      {clause,321,
          [{var,321,'Bin'},
           {atom,321,utf16},
           {atom,321,undefined},
           {var,321,'_Unit'},
           {var,321,'_Sign'},
           {atom,321,big}],
          [],
          [{match,322,
               {bin,322,
                   [{bin_element,322,{var,322,'I'},default,[big,utf16]},
                    {bin_element,322,{var,322,'Rest'},default,[bits]}]},
               {var,322,'Bin'}},
           {tuple,323,[{var,323,'I'},{var,323,'Rest'}]}]},
      {clause,324,
          [{var,324,'Bin'},
           {atom,324,utf16},
           {atom,324,undefined},
           {var,324,'_Unit'},
           {var,324,'_Sign'},
           {atom,324,little}],
          [],
          [{match,325,
               {bin,325,
                   [{bin_element,325,{var,325,'I'},default,[little,utf16]},
                    {bin_element,325,{var,325,'Rest'},default,[bits]}]},
               {var,325,'Bin'}},
           {tuple,326,[{var,326,'I'},{var,326,'Rest'}]}]},
      {clause,327,
          [{var,327,'Bin'},
           {atom,327,utf32},
           {atom,327,undefined},
           {var,327,'_Unit'},
           {var,327,'_Sign'},
           {atom,327,big}],
          [],
          [{match,328,
               {bin,328,
                   [{bin_element,328,{var,328,'Val'},default,[big,utf32]},
                    {bin_element,328,{var,328,'Rest'},default,[bits]}]},
               {var,328,'Bin'}},
           {tuple,329,[{var,329,'Val'},{var,329,'Rest'}]}]},
      {clause,330,
          [{var,330,'Bin'},
           {atom,330,utf32},
           {atom,330,undefined},
           {var,330,'_Unit'},
           {var,330,'_Sign'},
           {atom,330,little}],
          [],
          [{match,331,
               {bin,331,
                   [{bin_element,331,{var,331,'Val'},default,[little,utf32]},
                    {bin_element,331,{var,331,'Rest'},default,[bits]}]},
               {var,331,'Bin'}},
           {tuple,332,[{var,332,'Val'},{var,332,'Rest'}]}]},
      {clause,333,
          [{var,333,'Bin'},
           {atom,333,binary},
           {atom,333,all},
           {var,333,'Unit'},
           {var,333,'_Sign'},
           {var,333,'_Endian'}],
          [],
          [{match,334,
               {integer,334,0},
               {op,334,'rem',
                   {call,334,{atom,334,bit_size},[{var,334,'Bin'}]},
                   {var,334,'Unit'}}},
           {tuple,335,[{var,335,'Bin'},{bin,335,[]}]}]},
      {clause,336,
          [{var,336,'Bin'},
           {atom,336,binary},
           {var,336,'Size'},
           {var,336,'Unit'},
           {var,336,'_Sign'},
           {var,336,'_Endian'}],
          [],
          [{match,337,
               {var,337,'TotSize'},
               {op,337,'*',{var,337,'Size'},{var,337,'Unit'}}},
           {match,338,
               {bin,338,
                   [{bin_element,338,
                        {var,338,'Val'},
                        {var,338,'TotSize'},
                        [bitstring]},
                    {bin_element,338,{var,338,'Rest'},default,[bits]}]},
               {var,338,'Bin'}},
           {tuple,339,[{var,339,'Val'},{var,339,'Rest'}]}]}]},
 {function,341,get_integer,4,
     [{clause,341,
          [{var,341,'Bin'},
           {var,341,'Size'},
           {atom,341,signed},
           {atom,341,little}],
          [],
          [{match,342,
               {bin,342,
                   [{bin_element,342,
                        {var,342,'Val'},
                        {var,342,'Size'},
                        [little,signed]},
                    {bin_element,342,
                        {var,342,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,342,'Bin'}},
           {tuple,343,[{var,343,'Val'},{var,343,'Rest'}]}]},
      {clause,344,
          [{var,344,'Bin'},
           {var,344,'Size'},
           {atom,344,unsigned},
           {atom,344,little}],
          [],
          [{match,345,
               {bin,345,
                   [{bin_element,345,
                        {var,345,'Val'},
                        {var,345,'Size'},
                        [little]},
                    {bin_element,345,
                        {var,345,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,345,'Bin'}},
           {tuple,346,[{var,346,'Val'},{var,346,'Rest'}]}]},
      {clause,347,
          [{var,347,'Bin'},
           {var,347,'Size'},
           {atom,347,signed},
           {atom,347,native}],
          [],
          [{match,348,
               {bin,348,
                   [{bin_element,348,
                        {var,348,'Val'},
                        {var,348,'Size'},
                        [native,signed]},
                    {bin_element,348,
                        {var,348,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,348,'Bin'}},
           {tuple,349,[{var,349,'Val'},{var,349,'Rest'}]}]},
      {clause,350,
          [{var,350,'Bin'},
           {var,350,'Size'},
           {atom,350,unsigned},
           {atom,350,native}],
          [],
          [{match,351,
               {bin,351,
                   [{bin_element,351,
                        {var,351,'Val'},
                        {var,351,'Size'},
                        [native]},
                    {bin_element,351,
                        {var,351,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,351,'Bin'}},
           {tuple,352,[{var,352,'Val'},{var,352,'Rest'}]}]},
      {clause,353,
          [{var,353,'Bin'},{var,353,'Size'},{atom,353,signed},{atom,353,big}],
          [],
          [{match,354,
               {bin,354,
                   [{bin_element,354,
                        {var,354,'Val'},
                        {var,354,'Size'},
                        [signed]},
                    {bin_element,354,
                        {var,354,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,354,'Bin'}},
           {tuple,355,[{var,355,'Val'},{var,355,'Rest'}]}]},
      {clause,356,
          [{var,356,'Bin'},
           {var,356,'Size'},
           {atom,356,unsigned},
           {atom,356,big}],
          [],
          [{match,357,
               {bin,357,
                   [{bin_element,357,{var,357,'Val'},{var,357,'Size'},default},
                    {bin_element,357,
                        {var,357,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,357,'Bin'}},
           {tuple,358,[{var,358,'Val'},{var,358,'Rest'}]}]}]},
 {function,360,get_float,3,
     [{clause,360,
          [{var,360,'Bin'},{var,360,'Size'},{atom,360,little}],
          [],
          [{match,361,
               {bin,361,
                   [{bin_element,361,
                        {var,361,'Val'},
                        {var,361,'Size'},
                        [float,little]},
                    {bin_element,361,
                        {var,361,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,361,'Bin'}},
           {tuple,362,[{var,362,'Val'},{var,362,'Rest'}]}]},
      {clause,363,
          [{var,363,'Bin'},{var,363,'Size'},{atom,363,native}],
          [],
          [{match,364,
               {bin,364,
                   [{bin_element,364,
                        {var,364,'Val'},
                        {var,364,'Size'},
                        [float,native]},
                    {bin_element,364,
                        {var,364,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,364,'Bin'}},
           {tuple,365,[{var,365,'Val'},{var,365,'Rest'}]}]},
      {clause,366,
          [{var,366,'Bin'},{var,366,'Size'},{atom,366,big}],
          [],
          [{match,367,
               {bin,367,
                   [{bin_element,367,{var,367,'Val'},{var,367,'Size'},[float]},
                    {bin_element,367,
                        {var,367,'Rest'},
                        default,
                        [binary,{unit,1}]}]},
               {var,367,'Bin'}},
           {tuple,368,[{var,368,'Val'},{var,368,'Rest'}]}]}]},
 {function,371,make_bit_type,3,
     [{clause,371,
          [{var,371,'Line'},{atom,371,default},{var,371,'Type0'}],
          [],
          [{'case',372,
               {call,372,
                   {remote,372,{atom,372,erl_bits},{atom,372,set_bit_type}},
                   [{atom,372,default},{var,372,'Type0'}]},
               [{clause,373,
                    [{tuple,373,
                         [{atom,373,ok},{atom,373,all},{var,373,'Bt'}]}],
                    [],
                    [{tuple,373,
                         [{tuple,373,
                              [{atom,373,atom},
                               {var,373,'Line'},
                               {atom,373,all}]},
                          {call,373,
                              {remote,373,
                                  {atom,373,erl_bits},
                                  {atom,373,as_list}},
                              [{var,373,'Bt'}]}]}]},
                {clause,374,
                    [{tuple,374,
                         [{atom,374,ok},{atom,374,undefined},{var,374,'Bt'}]}],
                    [],
                    [{tuple,374,
                         [{tuple,374,
                              [{atom,374,atom},
                               {var,374,'Line'},
                               {atom,374,undefined}]},
                          {call,374,
                              {remote,374,
                                  {atom,374,erl_bits},
                                  {atom,374,as_list}},
                              [{var,374,'Bt'}]}]}]},
                {clause,375,
                    [{tuple,375,
                         [{atom,375,ok},{var,375,'Size'},{var,375,'Bt'}]}],
                    [],
                    [{tuple,375,
                         [{tuple,375,
                              [{atom,375,integer},
                               {var,375,'Line'},
                               {var,375,'Size'}]},
                          {call,375,
                              {remote,375,
                                  {atom,375,erl_bits},
                                  {atom,375,as_list}},
                              [{var,375,'Bt'}]}]}]},
                {clause,376,
                    [{tuple,376,[{atom,376,error},{var,376,'Reason'}]}],
                    [],
                    [{call,376,{atom,376,error},[{var,376,'Reason'}]}]}]}]},
      {clause,378,
          [{var,378,'_Line'},{var,378,'Size'},{var,378,'Type0'}],
          [],
          [{'case',379,
               {call,379,
                   {remote,379,{atom,379,erl_bits},{atom,379,set_bit_type}},
                   [{var,379,'Size'},{var,379,'Type0'}]},
               [{clause,380,
                    [{tuple,380,
                         [{atom,380,ok},{var,380,'Size'},{var,380,'Bt'}]}],
                    [],
                    [{tuple,380,
                         [{var,380,'Size'},
                          {call,380,
                              {remote,380,
                                  {atom,380,erl_bits},
                                  {atom,380,as_list}},
                              [{var,380,'Bt'}]}]}]},
                {clause,381,
                    [{tuple,381,[{atom,381,error},{var,381,'Reason'}]}],
                    [],
                    [{call,381,{atom,381,error},[{var,381,'Reason'}]}]}]}]}]},
 {function,384,match_check_size,3,
     [{clause,384,
          [{var,384,'Mfun'},{var,384,'Size'},{var,384,'Bs'}],
          [],
          [{call,385,
               {atom,385,match_check_size},
               [{var,385,'Mfun'},
                {var,385,'Size'},
                {var,385,'Bs'},
                {atom,385,true}]}]}]},
 {function,387,match_check_size,4,
     [{clause,387,
          [{var,387,'Mfun'},
           {tuple,387,[{atom,387,var},{var,387,'_'},{var,387,'V'}]},
           {var,387,'Bs'},
           {var,387,'_AllowAll'}],
          [],
          [{'case',388,
               {call,388,
                   {var,388,'Mfun'},
                   [{atom,388,binding},
                    {tuple,388,[{var,388,'V'},{var,388,'Bs'}]}]},
               [{clause,389,
                    [{tuple,389,[{atom,389,value},{var,389,'_'}]}],
                    [],
                    [{atom,389,ok}]},
                {clause,390,
                    [{atom,390,unbound}],
                    [],
                    [{call,390,{atom,390,throw},[{atom,390,invalid}]}]}]}]},
      {clause,392,
          [{var,392,'_'},
           {tuple,392,[{atom,392,atom},{var,392,'_'},{atom,392,all}]},
           {var,392,'_Bs'},
           {atom,392,true}],
          [],
          [{atom,393,ok}]},
      {clause,394,
          [{var,394,'_'},
           {tuple,394,[{atom,394,atom},{var,394,'_'},{atom,394,all}]},
           {var,394,'_Bs'},
           {atom,394,false}],
          [],
          [{call,395,{atom,395,throw},[{atom,395,invalid}]}]},
      {clause,396,
          [{var,396,'_'},
           {tuple,396,[{atom,396,atom},{var,396,'_'},{atom,396,undefined}]},
           {var,396,'_Bs'},
           {var,396,'_AllowAll'}],
          [],
          [{atom,397,ok}]},
      {clause,398,
          [{var,398,'_'},
           {tuple,398,[{atom,398,integer},{var,398,'_'},{var,398,'_'}]},
           {var,398,'_Bs'},
           {var,398,'_AllowAll'}],
          [],
          [{atom,399,ok}]},
      {clause,400,
          [{var,400,'_'},
           {tuple,400,[{atom,400,value},{var,400,'_'},{var,400,'_'}]},
           {var,400,'_Bs'},
           {var,400,'_AllowAll'}],
          [],
          [{atom,401,ok}]},
      {clause,402,
          [{var,402,'_'},{var,402,'_'},{var,402,'_Bs'},{var,402,'_AllowAll'}],
          [],
          [{call,403,{atom,403,throw},[{atom,403,invalid}]}]}]},
 {function,407,error,1,
     [{clause,407,
          [{var,407,'Reason'}],
          [],
          [{call,408,
               {remote,408,{atom,408,erlang},{atom,408,raise}},
               [{atom,408,error},
                {var,408,'Reason'},
                {cons,408,
                    {tuple,408,
                        [{atom,408,erl_eval},{atom,408,expr},{integer,408,3}]},
                    {nil,408}}]}]}]}]
