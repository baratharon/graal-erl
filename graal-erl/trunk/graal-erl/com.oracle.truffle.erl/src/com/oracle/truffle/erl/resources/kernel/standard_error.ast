standard_error
[]
[]
[{function,37,start_link,0,
  [{clause,37,[],[],
    [{call,38,
      {remote,38,{atom,38,supervisor_bridge},{atom,38,start_link}},
      [{tuple,38,[{atom,38,local},{atom,27,standard_error_sup}]},
       {atom,-1,standard_error},
       {nil,38}]}]}]},
 {function,42,terminate,2,
  [{clause,42,
    [{var,42,'_Reason'},{var,42,'Pid'}],
    [],
    [{'catch',43,{call,43,{atom,43,exit},[{var,43,'Pid'},{atom,43,kill}]}},
     {atom,44,ok}]}]},
 {function,48,init,1,
  [{clause,48,
    [{nil,48}],
    [],
    [{'case',49,
      {'catch',49,
       {call,49,
        {atom,49,start_port},
        [{cons,49,{atom,49,out},{cons,49,{atom,49,binary},{nil,49}}}]}},
      [{clause,50,
        [{var,50,'Pid'}],
        [[{call,50,{atom,50,is_pid},[{var,50,'Pid'}]}]],
        [{tuple,51,[{atom,51,ok},{var,51,'Pid'},{var,51,'Pid'}]}]},
       {clause,52,
        [{var,52,'_'}],
        [],
        [{tuple,53,[{atom,53,error},{atom,53,no_stderror}]}]}]}]}]},
 {function,56,start_port,1,
  [{clause,56,
    [{var,56,'PortSettings'}],
    [],
    [{match,57,
      {var,57,'Id'},
      {call,57,
       {atom,57,spawn},
       [{'fun',57,
         {clauses,
          [{clause,57,[],[],
            [{call,57,
              {atom,57,server},
              [{tuple,57,[{atom,57,fd},{integer,57,2},{integer,57,2}]},
               {var,57,'PortSettings'}]}]}]}}]}},
     {call,58,{atom,58,register},[{atom,26,standard_error},{var,58,'Id'}]},
     {var,59,'Id'}]}]},
 {function,61,server,2,
  [{clause,61,
    [{var,61,'PortName'},{var,61,'PortSettings'}],
    [],
    [{call,62,{atom,62,process_flag},[{atom,62,trap_exit},{atom,62,true}]},
     {match,63,
      {var,63,'Port'},
      {call,63,
       {atom,63,open_port},
       [{var,63,'PortName'},{var,63,'PortSettings'}]}},
     {call,64,{atom,64,run},[{var,64,'Port'}]}]}]},
 {function,66,run,1,
  [{clause,66,
    [{var,66,'P'}],
    [],
    [{call,67,{atom,67,put},[{atom,67,encoding},{atom,67,latin1}]},
     {call,68,{atom,68,server_loop},[{var,68,'P'}]}]}]},
 {function,70,server_loop,1,
  [{clause,70,
    [{var,70,'Port'}],
    [],
    [{'receive',71,
      [{clause,72,
        [{tuple,72,
          [{atom,72,io_request},
           {var,72,'From'},
           {var,72,'ReplyAs'},
           {var,72,'Request'}]}],
        [[{call,72,{atom,72,is_pid},[{var,72,'From'}]}]],
        [{match,73,
          {var,73,'_'},
          {call,73,
           {atom,73,do_io_request},
           [{var,73,'Request'},
            {var,73,'From'},
            {var,73,'ReplyAs'},
            {var,73,'Port'}]}},
         {call,74,{atom,74,server_loop},[{var,74,'Port'}]}]},
       {clause,75,
        [{tuple,75,[{atom,75,'EXIT'},{var,75,'Port'},{atom,75,badsig}]}],
        [],
        [{call,76,{atom,76,server_loop},[{var,76,'Port'}]}]},
       {clause,77,
        [{tuple,77,[{atom,77,'EXIT'},{var,77,'Port'},{var,77,'What'}]}],
        [],
        [{call,78,{atom,78,exit},[{var,78,'What'}]}]},
       {clause,79,
        [{var,79,'_Other'}],
        [],
        [{call,80,{atom,80,server_loop},[{var,80,'Port'}]}]}]}]}]},
 {function,83,get_fd_geometry,1,
  [{clause,83,
    [{var,83,'Port'}],
    [],
    [{'case',84,
      {'catch',84,
       {call,84,
        {atom,84,port_control},
        [{var,84,'Port'},{integer,30,100},{nil,84}]}},
      [{clause,85,
        [{var,85,'List'}],
        [[{op,85,'=:=',
           {call,85,{atom,85,length},[{var,85,'List'}]},
           {integer,85,8}}]],
        [{match,86,
          {bin,86,
           [{bin_element,86,{var,86,'W'},{integer,86,32},[native]},
            {bin_element,86,{var,86,'H'},{integer,86,32},[native]}]},
          {call,86,{atom,86,list_to_binary},[{var,86,'List'}]}},
         {tuple,87,[{var,87,'W'},{var,87,'H'}]}]},
       {clause,88,[{var,88,'_'}],[],[{atom,89,error}]}]}]}]},
 {function,94,do_io_request,4,
  [{clause,94,
    [{var,94,'Req'},{var,94,'From'},{var,94,'ReplyAs'},{var,94,'Port'}],
    [],
    [{match,95,
      {tuple,95,[{var,95,'_Status'},{var,95,'Reply'}]},
      {call,95,{atom,95,io_request},[{var,95,'Req'},{var,95,'Port'}]}},
     {call,96,
      {atom,96,io_reply},
      [{var,96,'From'},{var,96,'ReplyAs'},{var,96,'Reply'}]}]}]},
 {function,100,io_request,2,
  [{clause,100,
    [{tuple,100,[{atom,100,put_chars},{atom,100,unicode},{var,100,'Chars'}]},
     {var,100,'Port'}],
    [],
    [{'case',101,
      {call,101,
       {atom,101,wrap_characters_to_binary},
       [{var,101,'Chars'},
        {atom,101,unicode},
        {call,101,{atom,101,get},[{atom,101,encoding}]}]},
      [{clause,102,
        [{atom,102,error}],
        [],
        [{tuple,103,
          [{atom,103,error},
           {tuple,103,[{atom,103,error},{atom,103,put_chars}]}]}]},
       {clause,104,
        [{var,104,'Bin'}],
        [],
        [{call,105,
          {atom,105,put_chars},
          [{var,105,'Bin'},{var,105,'Port'}]}]}]}]},
   {clause,107,
    [{tuple,107,
      [{atom,107,put_chars},
       {atom,107,unicode},
       {var,107,'Mod'},
       {var,107,'Func'},
       {var,107,'Args'}]},
     {var,107,'Port'}],
    [],
    [{'case',108,
      {'catch',108,
       {call,108,
        {atom,108,apply},
        [{var,108,'Mod'},{var,108,'Func'},{var,108,'Args'}]}},
      [{clause,109,
        [{var,109,'Data'}],
        [[{call,109,{atom,109,is_list},[{var,109,'Data'}]}],
         [{call,109,{atom,109,is_binary},[{var,109,'Data'}]}]],
        [{'case',110,
          {call,110,
           {atom,110,wrap_characters_to_binary},
           [{var,110,'Data'},
            {atom,110,unicode},
            {call,110,{atom,110,get},[{atom,110,encoding}]}]},
          [{clause,111,
            [{var,111,'Bin'}],
            [[{call,111,{atom,111,is_binary},[{var,111,'Bin'}]}]],
            [{call,112,
              {atom,112,put_chars},
              [{var,112,'Bin'},{var,112,'Port'}]}]},
           {clause,113,
            [{atom,113,error}],
            [],
            [{tuple,114,
              [{atom,114,error},
               {tuple,114,[{atom,114,error},{atom,114,put_chars}]}]}]}]}]},
       {clause,116,
        [{var,116,'_'}],
        [],
        [{tuple,117,
          [{atom,117,error},
           {tuple,117,[{atom,117,error},{atom,117,put_chars}]}]}]}]}]},
   {clause,119,
    [{tuple,119,[{atom,119,put_chars},{atom,119,latin1},{var,119,'Chars'}]},
     {var,119,'Port'}],
    [],
    [{'case',120,
      {'catch',120,
       {call,120,
        {remote,120,{atom,120,unicode},{atom,120,characters_to_binary}},
        [{var,120,'Chars'},
         {atom,120,latin1},
         {call,120,{atom,120,get},[{atom,120,encoding}]}]}},
      [{clause,121,
        [{var,121,'Data'}],
        [[{call,121,{atom,121,is_binary},[{var,121,'Data'}]}]],
        [{call,122,{atom,122,put_chars},[{var,122,'Data'},{var,122,'Port'}]}]},
       {clause,123,
        [{var,123,'_'}],
        [],
        [{tuple,124,
          [{atom,124,error},
           {tuple,124,[{atom,124,error},{atom,124,put_chars}]}]}]}]}]},
   {clause,126,
    [{tuple,126,
      [{atom,126,put_chars},
       {atom,126,latin1},
       {var,126,'Mod'},
       {var,126,'Func'},
       {var,126,'Args'}]},
     {var,126,'Port'}],
    [],
    [{'case',127,
      {'catch',127,
       {call,127,
        {atom,127,apply},
        [{var,127,'Mod'},{var,127,'Func'},{var,127,'Args'}]}},
      [{clause,128,
        [{var,128,'Data'}],
        [[{call,128,{atom,128,is_list},[{var,128,'Data'}]}],
         [{call,128,{atom,128,is_binary},[{var,128,'Data'}]}]],
        [{'case',129,
          {'catch',130,
           {call,130,
            {remote,130,{atom,130,unicode},{atom,130,characters_to_binary}},
            [{var,130,'Data'},
             {atom,130,latin1},
             {call,130,{atom,130,get},[{atom,130,encoding}]}]}},
          [{clause,132,
            [{var,132,'Bin'}],
            [[{call,132,{atom,132,is_binary},[{var,132,'Bin'}]}]],
            [{call,133,
              {atom,133,put_chars},
              [{var,133,'Bin'},{var,133,'Port'}]}]},
           {clause,134,
            [{var,134,'_'}],
            [],
            [{tuple,135,
              [{atom,135,error},
               {tuple,135,[{atom,135,error},{atom,135,put_chars}]}]}]}]}]},
       {clause,137,
        [{var,137,'_'}],
        [],
        [{tuple,138,
          [{atom,138,error},
           {tuple,138,[{atom,138,error},{atom,138,put_chars}]}]}]}]}]},
   {clause,141,
    [{tuple,141,[{atom,141,put_chars},{var,141,'Chars'}]},{var,141,'Port'}],
    [],
    [{call,142,
      {atom,142,io_request},
      [{tuple,142,[{atom,142,put_chars},{atom,142,latin1},{var,142,'Chars'}]},
       {var,142,'Port'}]}]},
   {clause,143,
    [{tuple,143,
      [{atom,143,put_chars},
       {var,143,'Mod'},
       {var,143,'Func'},
       {var,143,'Args'}]},
     {var,143,'Port'}],
    [],
    [{call,144,
      {atom,144,io_request},
      [{tuple,144,
        [{atom,144,put_chars},
         {atom,144,latin1},
         {var,144,'Mod'},
         {var,144,'Func'},
         {var,144,'Args'}]},
       {var,144,'Port'}]}]},
   {clause,146,
    [{tuple,146,[{atom,146,get_geometry},{atom,146,columns}]},
     {var,146,'Port'}],
    [],
    [{'case',147,
      {call,147,{atom,147,get_fd_geometry},[{var,147,'Port'}]},
      [{clause,148,
        [{tuple,148,[{var,148,'W'},{var,148,'_H'}]}],
        [],
        [{tuple,149,[{atom,149,ok},{var,149,'W'}]}]},
       {clause,150,
        [{var,150,'_'}],
        [],
        [{tuple,151,
          [{atom,151,error},
           {tuple,151,[{atom,151,error},{atom,151,enotsup}]}]}]}]}]},
   {clause,153,
    [{tuple,153,[{atom,153,get_geometry},{atom,153,rows}]},{var,153,'Port'}],
    [],
    [{'case',154,
      {call,154,{atom,154,get_fd_geometry},[{var,154,'Port'}]},
      [{clause,155,
        [{tuple,155,[{var,155,'_W'},{var,155,'H'}]}],
        [],
        [{tuple,156,[{atom,156,ok},{var,156,'H'}]}]},
       {clause,157,
        [{var,157,'_'}],
        [],
        [{tuple,158,
          [{atom,158,error},
           {tuple,158,[{atom,158,error},{atom,158,enotsup}]}]}]}]}]},
   {clause,160,
    [{atom,160,getopts},{var,160,'_Port'}],
    [],
    [{call,161,{atom,161,getopts},[]}]},
   {clause,162,
    [{tuple,162,[{atom,162,setopts},{var,162,'Opts'}]},{var,162,'_Port'}],
    [[{call,162,{atom,162,is_list},[{var,162,'Opts'}]}]],
    [{call,163,{atom,163,setopts},[{var,163,'Opts'}]}]},
   {clause,164,
    [{tuple,164,[{atom,164,requests},{var,164,'Reqs'}]},{var,164,'Port'}],
    [],
    [{call,165,
      {atom,165,io_requests},
      [{var,165,'Reqs'},
       {tuple,165,[{atom,165,ok},{atom,165,ok}]},
       {var,165,'Port'}]}]},
   {clause,166,
    [{var,166,'R'},{var,166,'_Port'}],
    [],
    [{tuple,167,
      [{atom,167,error},
       {tuple,167,
        [{atom,167,error},
         {tuple,167,[{atom,167,request},{var,167,'R'}]}]}]}]}]},
 {function,172,io_requests,3,
  [{clause,172,
    [{cons,172,{var,172,'R'},{var,172,'Rs'}},
     {tuple,172,[{atom,172,ok},{var,172,'_Res'}]},
     {var,172,'Port'}],
    [],
    [{call,173,
      {atom,173,io_requests},
      [{var,173,'Rs'},
       {call,173,{atom,173,io_request},[{var,173,'R'},{var,173,'Port'}]},
       {var,173,'Port'}]}]},
   {clause,174,
    [{cons,174,{var,174,'_'},{var,174,'_'}},{var,174,'Error'},{var,174,'_'}],
    [],
    [{var,175,'Error'}]},
   {clause,176,
    [{nil,176},{var,176,'Stat'},{var,176,'_'}],
    [],
    [{var,177,'Stat'}]}]},
 {function,183,put_port,2,
  [{clause,183,
    [{var,183,'List'},{var,183,'Port'}],
    [],
    [{call,184,
      {atom,184,send_port},
      [{var,184,'Port'},
       {tuple,184,[{atom,184,command},{var,184,'List'}]}]}]}]},
 {function,188,send_port,2,
  [{clause,188,
    [{var,188,'Port'},{var,188,'Command'}],
    [],
    [{op,189,'!',
      {var,189,'Port'},
      {tuple,189,[{call,189,{atom,189,self},[]},{var,189,'Command'}]}}]}]},
 {function,196,io_reply,3,
  [{clause,196,
    [{var,196,'From'},{var,196,'ReplyAs'},{var,196,'Reply'}],
    [],
    [{op,197,'!',
      {var,197,'From'},
      {tuple,197,
       [{atom,197,io_reply},{var,197,'ReplyAs'},{var,197,'Reply'}]}}]}]},
 {function,200,put_chars,2,
  [{clause,200,
    [{var,200,'Chars'},{var,200,'Port'}],
    [[{call,200,{atom,200,is_binary},[{var,200,'Chars'}]}]],
    [{match,201,
      {var,201,'_'},
      {call,201,{atom,201,put_port},[{var,201,'Chars'},{var,201,'Port'}]}},
     {tuple,202,[{atom,202,ok},{atom,202,ok}]}]}]},
 {function,205,setopts,1,
  [{clause,205,
    [{var,205,'Opts0'}],
    [],
    [{match,206,
      {var,206,'Opts'},
      {call,206,{atom,206,expand_encoding},[{var,206,'Opts0'}]}},
     {'case',207,
      {call,207,{atom,207,check_valid_opts},[{var,207,'Opts'}]},
      [{clause,208,
        [{atom,208,true}],
        [],
        [{call,209,{atom,209,do_setopts},[{var,209,'Opts'}]}]},
       {clause,210,
        [{atom,210,false}],
        [],
        [{tuple,211,
          [{atom,211,error},
           {tuple,211,[{atom,211,error},{atom,211,enotsup}]}]}]}]}]}]},
 {function,214,check_valid_opts,1,
  [{clause,214,[{nil,214}],[],[{atom,215,true}]},
   {clause,216,
    [{cons,216,
      {tuple,216,[{atom,216,encoding},{var,216,'Valid'}]},
      {var,216,'T'}}],
    [[{op,216,'=:=',{var,216,'Valid'},{atom,216,unicode}}],
     [{op,217,'=:=',{var,217,'Valid'},{atom,217,utf8}}],
     [{op,217,'=:=',{var,217,'Valid'},{atom,217,latin1}}]],
    [{call,218,{atom,218,check_valid_opts},[{var,218,'T'}]}]},
   {clause,219,[{var,219,'_'}],[],[{atom,220,false}]}]},
 {function,222,expand_encoding,1,
  [{clause,222,[{nil,222}],[],[{nil,223}]},
   {clause,224,
    [{cons,224,{atom,224,latin1},{var,224,'T'}}],
    [],
    [{cons,225,
      {tuple,225,[{atom,225,encoding},{atom,225,latin1}]},
      {call,225,{atom,225,expand_encoding},[{var,225,'T'}]}}]},
   {clause,226,
    [{cons,226,{atom,226,unicode},{var,226,'T'}}],
    [],
    [{cons,227,
      {tuple,227,[{atom,227,encoding},{atom,227,unicode}]},
      {call,227,{atom,227,expand_encoding},[{var,227,'T'}]}}]},
   {clause,228,
    [{cons,228,{var,228,'H'},{var,228,'T'}}],
    [],
    [{cons,229,
      {var,229,'H'},
      {call,229,{atom,229,expand_encoding},[{var,229,'T'}]}}]}]},
 {function,231,do_setopts,1,
  [{clause,231,
    [{var,231,'Opts'}],
    [],
    [{'case',232,
      {call,232,
       {remote,232,{atom,232,proplists},{atom,232,get_value}},
       [{atom,232,encoding},{var,232,'Opts'}]},
      [{clause,233,
        [{var,233,'Valid'}],
        [[{op,233,'=:=',{var,233,'Valid'},{atom,233,unicode}}],
         [{op,233,'=:=',{var,233,'Valid'},{atom,233,utf8}}]],
        [{call,234,{atom,234,put},[{atom,234,encoding},{atom,234,unicode}]}]},
       {clause,235,
        [{atom,235,latin1}],
        [],
        [{call,236,{atom,236,put},[{atom,236,encoding},{atom,236,latin1}]}]},
       {clause,237,[{atom,237,undefined}],[],[{atom,238,ok}]}]},
     {tuple,240,[{atom,240,ok},{atom,240,ok}]}]}]},
 {function,242,getopts,0,
  [{clause,242,[],[],
    [{match,243,
      {var,243,'Uni'},
      {tuple,243,
       [{atom,243,encoding},{call,243,{atom,243,get},[{atom,243,encoding}]}]}},
     {tuple,244,[{atom,244,ok},{cons,244,{var,244,'Uni'},{nil,244}}]}]}]},
 {function,246,wrap_characters_to_binary,3,
  [{clause,246,
    [{var,246,'Chars'},{var,246,'From'},{var,246,'To'}],
    [],
    [{match,247,
      {var,247,'TrNl'},
      {op,247,'=/=',
       {call,247,{atom,247,whereis},[{atom,247,user_drv}]},
       {atom,247,undefined}}},
     {match,248,
      {var,248,'Limit'},
      {'case',248,
       {var,248,'To'},
       [{clause,249,[{atom,249,latin1}],[],[{integer,250,255}]},
        {clause,251,[{var,251,'_Else'}],[],[{integer,252,1114111}]}]}},
     {'case',254,
      {'catch',254,
       {call,254,
        {remote,254,{atom,254,unicode},{atom,254,characters_to_list}},
        [{var,254,'Chars'},{var,254,'From'}]}},
      [{clause,255,
        [{var,255,'L'}],
        [[{call,255,{atom,255,is_list},[{var,255,'L'}]}]],
        [{call,256,
          {remote,256,{atom,256,unicode},{atom,256,characters_to_binary}},
          [{lc,257,
            {'case',257,
             {var,257,'X'},
             [{clause,258,
               [{char,258,10}],
               [[{var,258,'TrNl'}]],
               [{string,259,"\r\n"}]},
              {clause,260,
               [{var,260,'High'}],
               [[{op,260,'>',{var,260,'High'},{var,260,'Limit'}}]],
               [{cons,261,
                 {string,261,"\\x{"},
                 {cons,261,
                  {call,261,
                   {remote,261,{atom,261,erlang},{atom,261,integer_to_list}},
                   [{var,261,'X'},{integer,261,16}]},
                  {cons,261,{char,261,125},{nil,261}}}}]},
              {clause,262,[{var,262,'Low'}],[],[{var,263,'Low'}]}]},
            [{generate,264,{var,264,'X'},{var,264,'L'}}]},
           {atom,264,unicode},
           {var,264,'To'}]}]},
       {clause,265,[{var,265,'_'}],[],[{atom,266,error}]}]}]}]}]
